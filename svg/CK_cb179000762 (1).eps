%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1603.m10.i305.n022.S.c10.151277060 Teeth, dentistry medical line icons.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Admin
%%CreationDate: 3/17/2016
%%BoundingBox: 0 0 351 370
%%HiResBoundingBox: 0 0 350.4097 369.0871
%%CropBox: 0 0 350.4097 369.0871
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 124 128 8%%BeginData: 12180 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD21FF52A8FD10FFA8FD3AFF7D527DFD2BFFA8277DFD0DFF7D7D52
%7D52FD37FFA87D7DFF7D52A8FD0CFFA8A8A8FFFFFFA8FD16FFA827A8FD0C
%FF7D7D527D527D52FD33FFA8A87D7DA8A852A8A87D7DA8A8FD07FFA8527D
%527D527D527D52527DFD13FF52527DFD0BFFA87D527DA87D527D7DFD09FF
%A8A8A8FD20FFA8527D527D527D7DA8A87D52A8527DA8A87D7D527D527D52
%A8FF52A87DFFFFFFA8FD04FF7D52FD12FF7D52FD0CFFA87D7DFFFFFF7D7D
%7DFD0AFF527D7DA87DA8A8FD05FFA8FD15FF7D7DFD06A87D7D7DFFFFFFA8
%7D7DFD07A87D52A8A87DFD09FF7D7DFD11FF5252A8FD0BFF7D7D52FFFFFF
%7D7D7DFD0AFF7D7DA87D7D527D527D527D525252A8FD13FFA87DA8527D52
%7D7DA8FD07FFA87D7D527D52FD067DFD0AFFA87DFD10FFA87D7D7D527D7D
%FD08FFA852A852A8527D52A8FD0AFF7D7D7DFD0BFF52A8FD12FF7D7D7DA8
%FD11FFA87DA87D527D7DFD0AFFA852FD11FF527D7DA87D5252A8FD05FFA8
%52A87D7D527D527DFD0BFF7D527D7DFD0AFFA852FD12FFA87DA87DFD05FF
%527D527D525252FD05FF7DA87DA87D7D7DFD0AFFA87DFD12FFA8A87D7D7D
%A852A8FFFFFF7D52FD067DA8FD0DFF7D7D7DA8FD0AFF7DA8FD11FFA87DA8
%7DFD04FF7D7D7DFFA8FFFFA852FD04FFA87D7DA8527D7DFD0AFF7D7DFD15
%FFA87D527D2752A87D527D5252FD12FFA87D7D7D527D7D7D527D7DA87DFF
%52A8FD12FF52A852FD04FF7D52A8FD05FF52A8FFFFFF7DA852FFA852FD0B
%FF52FD18FF52527DA8527D7D7D52A8FD13FFA8A87DA8A8A87DA87D7DFD04
%52A8FD12FF7DA87DA8FFFFFF7D52A8FD05FF52FD04FF7DA87DFFFF7D7DFD
%09FF7D7DFD18FF7D52FFFFA8527D527DFD14FF7D27522752525227522752
%277DA8FD13FF7D7D7DA8FFFFFF7D52FD05FF7D7DFFFFFFA852A852FFFF7D
%A8FD09FF7DA8FD19FF7D7DFFFFA8527DFD15FFFD05527D7D7DFD04527DFD
%14FFA87DA87DFFFFFFA87DFD05FF7DA8FFFFFF7DA87DA8FFFF7D7DFD09FF
%52A8FD18FFA87D527DFFFFA8527DFD14FF7DFD05527DFD0452277DFD06FF
%A8FFA8FD0CFF7DA87DFD04FF52FD05FF52A8FFFFFF7DA87DA8FFFF7DA8FD
%09FF7DA8FD17FFA852527D7D7DFFFFA8527DFD13FFFD05527D7D7DFD0452
%7DFFFFA87D7D527D527D52FD0BFF7DA87DA8FFFFA87DFFA852A8FF7DA8FF
%FFA852A87DFFFFFF7DA8FFFFFF7D7D7DFFFFFF7DA8FD16FF7D52A8FF7D7D
%527DFFFFA8527DFD12FF7D27FD04527DFD0452277DA852527DA8FD04FF7D
%A8FD0AFFA852A852FFFFA852FF52A852A87DA8FFFF52A852A8FFFFFF7DFF
%FFFFFD057DFFFFA87DFD15FFA852A8FFFF7D7DFF527DFFFFA87D7DFD11FF
%FD04522752525227FD04527DA8FFFFFFA8A87DA852FD0CFF7DA87D7DFFA8
%7D7DA8FFFF7D7DA8FFA87DA87DFFFFFFA87DA8FF7D7DFFFFA852A8FF7D7D
%FD14FF7D52A8FFFF7D52FFFFFF527DFFFFFF527DFD0FFF527D7DA87D7D7D
%A87D7D7DA87D7DA8FF7D7D52FD047DA8FD0CFFA852A852A8FF527DA8FFA8
%7D52A8FF52A87D7DFD04FF52FFFF7DA8FFFFFF7D7DFFA87DFD13FF7D7DA8
%FFFF7D52FD05FF52A8FFFFFF7D7DFD0DFF7D7DFD0EFF7D7DA8FD13FF7DA8
%A87DFF7D52FFFFFF5252FF7D7DA852FD05FF7DA8A852FD05FF52FF7D7DFD
%12FF7D52A8FFFF7D52FD07FF527DFFFFFF7D52FD0CFFA852FD0C7DA85252
%A8FD15FF52A87D7DA8FD05FFA87D52A852FD06FF7DFF7DA8FD05FF7DA8A8
%7DFD11FF7D7DFFFFFF7D52FD09FF52A8FFFFFF7D7DFD0DFF7D7D7DA87D7D
%7DA87D7D7DA87DA8FD18FF52FF7D7DFD05FF7D7DFF52FD07FF7D7D7DA8FD
%05FF7DA852A8FD10FFA852A8FFFF7D52FD0BFF52A8FFFFA852FD33FFA852
%A87D527DFFA8527DA852A8FD07FFA87D52FD06FFA8527DFD12FF52FFFF7D
%52FD0DFF52A8FF7D7DFD35FF52A8A87D527DA8A852A8FD09FF7D7DA8FD05
%FFA8527DFD12FFA8527D52FD0FFF525252FD37FF527D7DA87D7D52FD2AFF
%A8FD4BFFA87D527DA8FDFCFFFDFCFFFDFCFFFDFCFFFDDBFFA8FD38FFA8FD
%42FF7D7DFD1AFFA8FFFFFFA8FD17FF527D7DFD42FFA87DFD16FF527D527D
%527D527D527D7DFD13FF5227527D527DFD41FFA87DFD14FF527D7DFFFFFF
%A8FD04FF7D52FD11FFA87D527D7D52527DFD41FFA87DA8FD11FF527D7DA8
%FD09FF7D7DFD11FF527D7D7D52FF7D52FD41FF7D5252A8FD0FFF7D52FD0B
%FFA87DFD11FFA8525252FF7DFF7D7DFD40FFA87D5252A8FD0EFF527DFFFF
%FF7D527D52A8FFFFFFA852FD12FF7D52FF7D277DA827527DFD1DFFA8A852
%7DFFFFA87D7DA8A8FD17FF5227527D527DFD0CFF5252FFFFFF527D527D7D
%FFFFFFA87DFD13FF7DA8FF52FF7D7DFF7D52FD15FFA8A87DA87D7D527D7D
%A87D7D527D7DA87D7D527D7DFD04A8FD11FF52A8FFFF277DFD0BFF525252
%7D527D527D527D527D7D527DFD13FFA8527DA87D5252A8FFA8527DFD10FF
%7D527D522752527D7DFFA8FFFFFFA8A8A8FFFFFFA8A87D522727277D527D
%FD0FFF7DA8FF52A8527DFD0BFFFD047D527DFFFD057DA8FD16FF52277D52
%FF7D7DA8FF7D7DFD10FF527DA8FFA8A8FD047D52FD077D52FD047DA8A8FF
%7D7DFD10FFA852A8FFFF7D52A8FD0AFFA852A87DA8A8FFA8A87DA852FD17
%FFA852FF7D7DFFA87D52A8A852A8FD0EFFA827527DFD07FFA8FFA8A8A8FF
%A8FD05FFA8A852277DFD11FF7D52A8A87DFF277DFD09FFA87DFD08FFA87D
%FD18FF7D7DFF52FFFFFFA8527DA87D7DFD0EFFA852A87D7D7DA8A8FD0BFF
%A8A852FD047DFD13FF7D52A8FF7DA8527DFD08FFA852FD08FFA852FD19FF
%52A87D7DFD04FF7D52A87D7DFD0EFFA852A8A8A8525252FD047DA87D7D52
%7D527D7DFFA87D7DFD15FF7D52A8FFA87D277DA8FD06FFA87DFD08FFA87D
%FD19FFA852FF52A8FD04FFA87DA87D7DFD0FFF527DA8FFFFFFA8A87DA87D
%A87DA8A8FFFFFF7D7DA8FD17FFA852FFFF7DFF52527DFD05FFA87DFFFFA8
%527D52FFFFFF52FD1AFF7D7DA852FD05FFA8527D7D7DFD0FFF7D7D527DA8
%FD08FFA87D7D52A8FD1AFF7D52A8FF7D7D52A8FD05FF7DA8FFA852FFFFA8
%52FFFF7DA8FD1AFF52A8A87DFD05FFA87D7D7DA8FD11FF7D7D52FD057D52
%7D7DA8A8FD1DFFA87D7D7D5252A8FD05FF7D7DFF52A8FFFFFF7D7DFF52A8
%FD1AFFA852A87D7DFD05FFA852527DFD14FFFD05A8FD23FF7D5252527D52
%A8FD04FF7DA8A87DFD04FFA87DFF7DA8FD1BFFA87DA87DA8FD05FFA87D52
%FD3DFF527D7DA8A87D7DA8FFFFFD047DFD05FF52A87DA8FD1CFF7D7DA852
%A8FD05FF7D52A8FD3FFF527D7D2727FFFFA87D52FD06FFA87D7DA8FD1DFF
%7D7DA852A8FD47FF5252527DFFFFFF5252A8FD05FFA85252FD1FFF7D527D
%527DFD46FF7D277DFD04FF5252FD07FF27A8FD20FFA87D52527DFD45FFA8
%A8FD05FFA8A8FD07FFA8A8FD22FF7D527DA8FDFCFFFDFCFFFDFCFFFDFCFF
%FDFCFFFDFCFFFDAFFF527D527D527D527D52527DFD19FF5252527D7D7D52
%7D52A8FD17FFA8FD04527D7D5252527DA8FD17FF7D7D52FD057D527D7DFD
%08FF527D7DFFFFFFA8FFFFFFA8527DFD17FFA852A8FF7D7DA8FFA8A852A8
%FD15FF7D52A8FFFF7D7D7DFFFFFF7D52A8FD15FF7D7DA8FFFFA87DA8A8FF
%A87D7DFD06FF52A87DA8FD06FF7DFD0452A8FD14FF7D527DFD09FF52FD14
%FFA852FD0BFF7D52A8FD13FF7D52FFFF7DFD08FF7D7DFD05FF7D7DA8FD06
%FFFD05527D527DFD12FFA852A8FD0AFFA87DFD13FF52A8A87D52FD057D52
%7D7DFF52A8FD13FF7DA8FF7D527DFD07FFA87DFD05FF527DA8FD05FFFD05
%52A85252527DFD10FFA8527DFD0BFFA87DFD13FF52527DA8FFA8A87DA8A8
%FFA87D52527DFD13FF52A8A87D27527DFD07FF52FD05FF7D7DA8FD04FFA8
%52527D7DA8FFFF7D5252FD11FF7D7DA8FD0AFFA87DFD13FF527DFD0CFF27
%A8FD13FF7DA8FFFF7DFD09FF7DFD05FF527D7DFD04FF7D277D52FD05FF52
%52A8FD0FFFA87D7D7DFD0AFF7DA8FD13FF7D7DFFFFA8FD047D52A8FFFFFF
%7DA8FD13FF7DA8FD04FF7D7DA8FD04FFA852FD05FFA87DFD05FF7D527DA8
%FD05FF7D52A8FD10FF7D7D7DFD09FFA87DA8FD13FFA87DFFFF52FD05A852
%7DFFA852FD14FFA852FD04FFA87DFD05FF7DA8FD06FF7DA8FD04FF7D277D
%FD05FFA85252A8FD11FF52A8FD09FF7D7DFD15FF52A87D7DFD06FF52FF52
%A8FD15FF7D7DFF27A8FD06FFA87DFD07FF7D7DFD04FFA852527DFD04FF52
%7D7DFD12FF7DA8FD09FF52FD16FFA87DA87DFFA8A87DFFA87DA87DFD16FF
%A87DFD09FF7DA8FD07FF7D7DFD05FF7D5252527D7D527D7D7DFD12FF7DA8
%FD09FF7DA8FD15FFA87DA852527D7D7D52527DFF52FD16FFA852FD09FF7D
%A8FD07FF7DA8FD06FF7DFD04527D527D7D7DFD11FF7DA8FD09FF7DA8FD15
%FFA87DA852FD05FF7D7DA87DFD16FF7D7DFD09FFA87DFD07FF7DA8FFFFFF
%7D7DA8FFA87D527D7DFF7D7D7D527DFD0FFF52A8FFFFFFA87DFD04FF7D7D
%FD15FF7D7D7DA8FFFFA8FFFFFF52A852FD16FF7D7DFFFFFFA8A8A8FFFFFF
%7D7DFD07FF52FFFFFF527D7D52A8FFFFA87DFFFFFF7D7DA87D52A8FD0DFF
%7DA8FFFF7D527D52FFFFFF7DA8FD15FFA87D7DFFFF7D5252A8FFA87D7DA8
%FD15FF7DA8FFFFA8527D527DFFFFFF7DFD07FF7DA8FF7D7DFFFFA852A8FF
%7D7DFD04FF52A8FFFF52A8FD0CFF52FFFFA852FFFFA852FFFFA87DFD15FF
%7D7D7DFF527DFFA852FFA87D52A8FD15FF7DA8FFA852A8FFA852A8FFA87D
%FD07FF7DFFFF7DA8FFFFFF7D7DFFA87DFD04FFA852FFFFFF52A8FD0BFF7D
%FFFF52FD04FF7D7DFF7DA8FD15FFA87D7DA87DFFFFFFA852FF7D7DA8FD15
%FF7DA8FF7D7DFFFFFFA87DFFFF52FD06FFA87DA8A852FD04FFA852FF7DA8
%FD05FF527DFFFFFF27A8FD0AFF52FFA87DFD04FF7D7DFF7D7DFD15FFFD05
%7DFD04FF7D7D7D52A8FD15FF7DA8FF52FD05FF52FFA87DFD07FF7DFF7DA8
%FD05FF7DA8A8A8FD06FF7D7DFFA87DFD0BFF7DFFA87DFD05FF52FF7DA8FD
%15FFA852A87DFD05FFFD047DA8FD15FF7DA8A87DFD05FF7DA8FF7DFD07FF
%7D7D7DA8FD05FF7DA852FD08FF7D527DA8FD0BFF52A87DA8FD05FF7DA87D
%A8FD15FFA852527DFD06FF525252FD16FFA87DA87DFD05FF7D7D7DA8FD07
%FF7D7D7DFD06FFA87D7DFD09FF7DFD0DFFA87D7DA8FD05FF7DA87DFD17FF
%52527DFD06FF52277DFD16FFA87D7DA8FD05FFA87D7DA8FD08FF527DFD06
%FFA8527DFD17FFA85252FD06FFA827A8FD17FF52277DFD06FF52277DFD17
%FF7D52A8FD05FFA85252FD4EFFA87DA8FD06FFA87DFD19FFA8FD07FFA8FD
%FCFFFDFCFFFDFCFFFDFCFFFDFCFFFD73FFA8A8A8FFFFFFA8A8A8FD71FFA8
%527D7D7D527D527D7D5252FD63FFA8FD0CFF527D7DFFFFFFA8FD04FF7D52
%FD5FFFFD04527DFD0AFF527D7DA8FD09FF7D7DFD33FFA8FD137D52FD15FF
%527DA8FFA85252FD09FF7D7DA8FD0AFFA87DFD32FFA87DA8FFA8FFA8FFA8
%FFA8A8A8FFA8FFA8FFFD04A852FD13FF7D7DFFFFFF527D7D7DFD08FF527D
%A8FD0AFFA852FD0FFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FD0EFF7D7DFF527D527D7DFFFFA8A8FD07FF7DFFFF7D7DFD12FF7D7DFF7D
%527D7D277DFD08FF7D52A8FD0AFFA87DFD0EFFA87D52FD077D527D7D7D52
%7D7D7D527D7D7D527D527DFD0AFF7DA87DFD0552A8FFA8FFFD067DA8FFA8
%FF7DA8FD12FF5252527DA8FFFFA87DFD08FF527D7DFD0AFF7D7DFD0EFFA8
%52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA852FD0AFF7D7D
%FF527D7DA8A8FFFFFF527DA8A87DA8A852A8FFFF7D7DFD12FF7D7DFD05FF
%A87DFD08FFA852FD0BFF52FD0FFFA87DFD16FFA87DFD0AFF7DA87D525252
%FD04FFA87DFD06FFA87DFFFF7DA8FD12FF7DA8FD05FF7D7DFD09FF7D7DFF
%A8FFA8FFA8FFA8FF52A8FD0FFFA87DA8527DA87DA8FFFFFFA8FFFFFFA8FF
%FFFFA8A87D7D52A852FD0AFF7D7DFF7D7DA8FD04FFA852FD06FFA852FFFF
%7D7DFD12FFA852FD05FF52FD0AFFA8FD0B7DFD10FFFD047D527D7DA8527D
%A8A8527D52A87D7D52FF7D527DA87D7DFD0AFF7DA8FD09FF7DA8FD05FF7D
%A8FFFF7DA8FD13FF7D52FFFFFF52A8FD0CFF7D527D527D527D52A8FD11FF
%A8FD05527D527D527D7D7D527D7D7D527DFD06527DFD0AFF7D7DFD09FF7D
%7DFD04FFA852A8FFFF7D7DFD14FF7D527D527DFD0CFFA852FFFFFFA8FFFF
%A852FD12FFA8527D527D527D527D527D527D527D527D527D527D52A852FD
%0BFF7DA8FD09FFA87DFD05FF7DFFFFFF7DA8FD10FFA8A852A8FFFF7DFFFF
%A8527DA8FD08FF7D527D7D7DA87D7D5252A8FD11FF52A8FF5252FF7D5252
%A8A852527DA8A852527DFF527DFF7D7DFD0AFF7D7DFD09FF7D7DFFA87DFF
%A87DFFFFFF7D7DFD0FFF527D52527DA8527D52A87DFD0452FD08FF52FD06
%7D527DFD12FF7D525252A8A8A852FFA8FFA852A8FFFFA852FFA87D525252
%A8FD0AFF7DA8FD09FF7DA8A8527D52FF52FFFFFF7DA8FD0EFF52A8FF527D
%7DA87D7D7DA87D7D7DFF7D52FD06FFA8527DFD05A8527DFD12FF7DA87D52
%522752527D27277D527D27527DFD0552A87D7DFD0AFF7D7DFD09FF7DA852
%A8FF7D7D7DA8FFFF7D7DFD0DFF7D7DFFFFA85252A87D527D7D5252A8FFFF
%7D7DFD06FF7D527D7D527D7D52A8FD12FF7D7DA827A8A8FF52FF7DA8A852
%A87DA8A852FFFF7D52A852A8FD0AFF7DA8FD09FFA8527DFFFFA87D52FFFF
%FF7DA8FD0DFF7DA8FFFFFF52FFFD057DFF52FFFFFF7D7DFD06FF7D52FFA8
%FFA8A8527DFD12FFA87D7DA8527D52FD057D527D7D7D5252527D52A87DA8
%FD0BFF7D7DFD09FFA8277DFFFFFF277DFFFFFF7D7DFD0DFF52FFFFFFA852
%A8A827A827A87D52A8FFFFFF52FD06FFA852527D527D527DFD18FFA8FFFF
%FD04A8FFA8A87DA8FFFFA8FD0FFF7DA8FD08FFA8FF7DFD04FFFD04A8FF7D
%A8FD0CFFA87DFD05FF7D527DA852527DFD05FF7DA8FD05FFA827A87DA8A8
%7D52FD36FF7D52FD08FFA8A8FD07FF7DFFFF52A8FD0CFF7D7DFD06FF7D27
%7D277DFD06FF7D7DFD06FF52527D527D277DFD37FF7D52FD147DFD0DFF7D
%7D7DA8A8FD04FFA852A8FD04FFA8A87D7D7DFD06FF52527D7D7D527DFD39
%FFFD13A8FD0FFFA8A87D7D527D52FD057D527D527D7DA8A8FD08FF277D7D
%5252FD63FFA8A8A8FFA8FD0FFFA8527D52FD72FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-03-17T07:54:11+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-03-17T07:54:11+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-03-17T07:54:11+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>244</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9IeYfOPlvy8Ixq16sE02&#xA;8FuqtLM/+rFGGcj3pTFUqT81/IvLhc372MlCwS8t57eoArVTIig/QcVWH82/I4Aka6nW1Y0F4bS6&#xA;EH/BmOlPfFWV2V7Z31rFd2cyXFrMvKKaJgyMPEEYqrYq7FXYqsnmiggknlbjFEpeRj0CqKk/diry&#xA;v8j7jUdQ1DzTrN7I7HUJ7eZY2J4r6qPMAAT2jlQfIYq9XxV2KsU8/wDnGXy/ZwQWQiOp33qGF7gk&#xA;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&#xA;pF06Ck855XV5KxluJm8ZJXqzfLp4DFU4xV2KuxV2KuxVjvm7yiutLBfWM/6P8w6fV9N1JBup7xyD&#xA;9uJ+jKf9tV5h5r87oND1PS7nRk0nULiX0fNNwqI4lm4jhHa15epJKo5Kzf3a77mmKsl/JVbfT7XV&#xA;NGuYv0drK3AuJ9IZSpjh9NI43RizeqGCAs4/aPTpVV6Ziryr80NRn0bzFeXsNVn1Py/Jp9m4rX1v&#xA;riKONO4FzXFXpGiaVbaRpFlpdsKQWUKQptSvBQOR9z1OKsW/MCSLSdZ8s+ZSeH1a9+oXbDvbXqMp&#xA;5eISRVIriqK/Km3kg/L3RhIvFponuCP+YiV5h+EmKssxV2KuxV2KuxV2KsC8+eTJpJLnW9ItVvJL&#xA;mH0Nd0ViQl/br0KkfZuIqVjcb/qKqWeQ/wAwLeyit9K1W7afSpH9HSdam+FlYVP1K/r/AHVxGNgT&#xA;sw3+arP/ADDoWn6/o1zpV8nO3uUpyH2kbqkiHsytuMVQHkfyo3ljRW0971tQmlnluZrlkEdXmNTx&#xA;QFuI+nrirIMVdirsVdirsVdirsVdirsVdirsVdirsVdirHrr8vvJ15ql1qd3pqXN5eIyTtKzuvxo&#xA;EZlRmKIxRQOSgHbFXj3n2HWfL2tWPlyznee4thHPoWrRs/6RhtZ2ki+ojjT1qulE8B4Doq9K/QXn&#xA;X/lV36M+uS/4n4ep631l/W/3p9b0frP2ufo/uufSvtiqe+ZfJuh+Y5NPk1ON3fTJxcW5RuO+xKN4&#xA;qxUV+WKp3iqU+aPLGl+ZdIk0rUg/1aRkcNE3B1ZDUFTv+rFUxtLW3tLSG0t0EdvbxrFDGOiogCqP&#xA;oAxVVxV2KuxV2KuxV2KuxVh3m38stH12Sa7tZDpmp3C8bm4iRZIrhR0FzA3wS07HZge+2Kpt5N8u&#xA;S+XfL9vpMt7JftBypPJUUDGoRAzOQi9FHI4qneKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VQewsZLyO9e2ie8iUpFcsimVVPVVcjkAfCuKq+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;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&#xA;zwOssLX97NIFkQ8lYIhjTY+1MVZbir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:310ff1fd-67b5-4944-9a61-96dff08f542b</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:310ff1fd-67b5-4944-9a61-96dff08f542b</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:b6dfc67f-20c6-5b46-bfd9-ff5367901aa8</stRef:instanceID>
            <stRef:documentID>xmp.did:b6dfc67f-20c6-5b46-bfd9-ff5367901aa8</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:53478e20-5172-604d-b79e-0923974f7080</stEvt:instanceID>
                  <stEvt:when>2016-03-16T22:27:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b6dfc67f-20c6-5b46-bfd9-ff5367901aa8</stEvt:instanceID>
                  <stEvt:when>2016-03-16T22:44:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:310ff1fd-67b5-4944-9a61-96dff08f542b</stEvt:instanceID>
                  <stEvt:when>2016-03-17T07:54:11+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -369.087 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 369.087 li
350.41 369.087 li
350.41 0 li
cp
clp
316.574 241.591 mo
318.425 241.591 320.194 242.355 321.427 243.688 cv
324.352 246.848 326.248 251.715 327.045 255.216 cv
327.589 257.599 327.866 260.121 327.868 262.712 cv
327.868 263.441 328.465 263.634 328.781 263.634 cv
328.781 263.634 li
329.001 263.634 329.401 263.557 329.594 263.039 cv
330.958 259.395 331.715 255.141 331.913 250.035 cv
332.061 246.195 331.521 241.872 331.087 238.398 cv
330.802 236.12 330.578 234.32 330.611 233.188 cv
330.684 230.747 331.719 228.988 332.72 227.287 cv
332.98 226.846 333.245 226.398 333.499 225.926 cv
334.809 223.494 335.043 221.474 335.232 218.885 cv
335.594 213.894 333.071 209.856 328.48 208.082 cv
327.323 207.636 326.091 207.418 324.716 207.418 cv
322.302 207.418 319.795 208.1 317.373 208.759 cv
316.574 208.976 li
315.777 208.76 li
313.353 208.1 310.846 207.418 308.432 207.418 cv
307.057 207.418 305.826 207.636 304.668 208.082 cv
300.079 209.855 297.554 213.894 297.916 218.885 cv
298.104 221.472 298.338 223.492 299.65 225.926 cv
299.904 226.398 300.168 226.847 300.428 227.289 cv
301.429 228.989 302.464 230.748 302.538 233.187 cv
302.571 234.32 302.346 236.121 302.061 238.4 cv
301.627 241.874 301.087 246.195 301.235 250.035 cv
301.433 255.145 302.192 259.398 303.554 263.039 cv
303.748 263.557 304.147 263.634 304.368 263.634 cv
304.683 263.634 305.28 263.441 305.281 262.712 cv
305.282 260.121 305.558 257.6 306.103 255.216 cv
306.901 251.716 308.796 246.849 311.72 243.688 cv
312.954 242.355 314.723 241.591 316.574 241.591 cv
cp
328.781 265.634 mo
328.781 265.634 li
327.349 265.634 325.869 264.541 325.868 262.713 cv
325.866 260.272 325.606 257.898 325.096 255.661 cv
324.355 252.412 322.617 247.917 319.959 245.046 cv
319.104 244.121 317.87 243.591 316.574 243.591 cv
315.278 243.591 314.044 244.121 313.188 245.046 cv
310.532 247.917 308.793 252.412 308.052 255.661 cv
307.542 257.898 307.282 260.272 307.281 262.713 cv
307.279 264.542 305.798 265.634 304.368 265.634 cv
303.148 265.634 302.119 264.908 301.681 263.74 cv
300.243 259.897 299.443 255.439 299.237 250.112 cv
299.083 246.109 299.633 241.698 300.077 238.153 cv
300.339 236.046 300.567 234.226 300.538 233.246 cv
300.48 231.32 299.658 229.922 298.705 228.304 cv
298.432 227.84 298.155 227.369 297.889 226.875 cv
296.392 224.097 296.121 221.775 295.921 219.029 cv
295.492 213.113 298.493 208.323 303.948 206.217 cv
305.339 205.68 306.806 205.418 308.432 205.418 cv
311.114 205.418 313.751 206.136 316.302 206.829 cv
316.574 206.903 li
316.847 206.829 li
319.398 206.136 322.035 205.418 324.716 205.418 cv
326.342 205.418 327.809 205.68 329.201 206.217 cv
334.656 208.324 337.657 213.113 337.226 219.029 cv
337.027 221.777 336.754 224.099 335.258 226.875 cv
334.993 227.368 334.716 227.839 334.444 228.302 cv
333.491 229.921 332.668 231.319 332.611 233.247 cv
332.582 234.226 332.808 236.044 333.072 238.152 cv
333.514 241.696 334.066 246.109 333.911 250.112 cv
333.706 255.435 332.907 259.893 331.467 263.74 cv
331.03 264.908 330.001 265.634 328.781 265.634 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.333333 .333333 .333333 rgb
f
308.183 209.931 mo
308.137 216.638 300.602 216.638 300.602 216.638 cv
300.602 216.638 308.137 216.638 308.183 223.345 cv
308.228 216.638 315.763 216.638 315.763 216.638 cv
315.763 216.638 308.228 216.638 308.183 209.931 cv
cp
f
315.763 221.136 mo
315.74 224.49 311.973 224.49 311.973 224.49 cv
311.973 224.49 315.74 224.49 315.763 227.843 cv
315.785 224.49 319.553 224.49 319.553 224.49 cv
319.553 224.49 315.785 224.49 315.763 221.136 cv
cp
f
308.183 225.926 mo
308.16 229.28 304.392 229.28 304.392 229.28 cv
304.392 229.28 308.16 229.28 308.183 232.633 cv
308.205 229.28 311.973 229.28 311.973 229.28 cv
311.973 229.28 308.205 229.28 308.183 225.926 cv
cp
f
106.384 118.482 mo
106.002 118.482 105.643 118.63 105.372 118.898 cv
104.827 119.448 104.827 120.356 105.379 120.913 cv
105.907 121.434 106.853 121.442 107.396 120.906 cv
107.94 120.356 107.94 119.448 107.388 118.891 cv
107.124 118.63 106.765 118.482 106.384 118.482 cv
cp
106.384 123.322 mo
105.472 123.322 104.613 122.969 103.965 122.328 cv
102.638 120.987 102.638 118.817 103.958 117.483 cv
105.269 116.187 107.506 116.194 108.802 117.476 cv
110.129 118.817 110.129 120.987 108.81 122.32 cv
108.154 122.969 107.295 123.322 106.384 123.322 cv
cp
101.594 124.528 mo
101.595 124.528 li
101.841 124.764 li
102.583 125.525 103.382 126.037 104.274 126.355 cv
106.403 127.148 108.791 126.795 110.58 125.457 cv
110.837 125.269 111.08 125.061 111.312 124.83 cv
111.536 124.605 111.741 124.367 111.918 124.121 cv
113.295 122.294 113.636 119.939 112.842 117.806 cv
112.518 116.899 112.006 116.1 111.316 115.419 cv
111.048 115.153 li
108.602 112.695 102.058 106.741 95.4487 106.011 cv
99.1255 109.65 li
99.7788 109.098 100.667 108.927 101.417 109.283 cv
102.105 109.59 103.545 110.371 105.233 112.047 cv
106.454 113.259 li
104.797 113.72 li
103.702 114.025 102.699 114.611 101.896 115.414 cv
101.092 116.218 100.506 117.224 100.203 118.323 cv
99.7417 119.99 li
98.5268 118.759 li
96.8735 117.084 96.0771 115.637 95.75 114.924 cv
95.4043 114.151 95.5634 113.278 96.1513 112.69 cv
92.5122 109.035 li
93.2094 115.462 99.0088 121.934 101.594 124.528 cv
cp
106.605 128.777 mo
106.605 128.777 li
105.571 128.777 104.556 128.594 103.589 128.234 cv
102.425 127.819 101.374 127.147 100.478 126.24 cv
100.452 126.215 100.428 126.189 100.405 126.164 cv
100.293 126.055 li
97.6157 123.389 91.3027 116.408 90.4951 109.198 cv
90.4345 108.623 90.6059 108.083 90.9775 107.67 cv
91.7133 106.852 93.1186 106.813 93.9257 107.62 cv
97.5444 111.229 li
97.9272 111.611 98.143 112.116 98.1533 112.65 cv
98.1635 113.198 97.9585 113.711 97.5756 114.094 cv
97.7646 114.516 98.1626 115.257 98.9008 116.178 cv
99.309 115.376 99.8423 114.639 100.481 114 cv
101.121 113.361 101.856 112.828 102.658 112.419 cv
101.735 111.677 101 111.287 100.581 111.1 cv
99.8134 111.845 98.4848 111.837 97.7114 111.064 cv
94.1015 107.454 li
93.5053 106.858 93.3252 105.979 93.6421 105.214 cv
93.9756 104.41 94.7763 103.921 95.6753 104.024 cv
102.911 104.823 109.872 111.136 112.528 113.813 cv
112.582 113.868 li
112.629 113.908 112.677 113.951 112.726 114 cv
113.627 114.89 114.3 115.942 114.721 117.121 cv
115.749 119.883 115.305 122.949 113.527 125.309 cv
113.299 125.625 113.025 125.945 112.726 126.244 cv
112.419 126.55 112.096 126.827 111.766 127.066 cv
110.276 128.182 108.487 128.777 106.605 128.777 cv
cp
f
106.384 118.482 mo
106.002 118.482 105.643 118.63 105.372 118.898 cv
104.827 119.448 104.827 120.356 105.379 120.913 cv
105.907 121.434 106.853 121.442 107.396 120.906 cv
107.94 120.356 107.94 119.448 107.388 118.891 cv
107.124 118.63 106.765 118.482 106.384 118.482 cv
cp
106.384 123.322 mo
105.472 123.322 104.613 122.969 103.965 122.328 cv
102.638 120.987 102.638 118.817 103.958 117.483 cv
105.269 116.187 107.506 116.194 108.802 117.476 cv
110.129 118.817 110.129 120.987 108.81 122.32 cv
108.154 122.969 107.295 123.322 106.384 123.322 cv
cp
f
106.384 118.482 mo
106.002 118.482 105.643 118.63 105.372 118.898 cv
104.827 119.448 104.827 120.356 105.379 120.913 cv
105.907 121.434 106.853 121.442 107.396 120.906 cv
107.94 120.356 107.94 119.448 107.388 118.891 cv
107.124 118.63 106.765 118.482 106.384 118.482 cv
cp
106.384 123.322 mo
105.472 123.322 104.613 122.969 103.965 122.328 cv
102.638 120.987 102.638 118.817 103.958 117.483 cv
105.269 116.187 107.506 116.194 108.802 117.476 cv
110.129 118.817 110.129 120.987 108.81 122.32 cv
108.154 122.969 107.295 123.322 106.384 123.322 cv
cp
f
105.905 128.749 mo
110.214 136.241 124.881 160.214 138.855 165.327 cv
139.299 165.285 139.825 165.128 139.949 164.944 cv
139.96 164.927 139.967 164.902 139.968 164.87 cv
137.298 163.345 122.847 154.148 110.745 127.723 cv
109.281 128.526 107.591 128.883 105.905 128.749 cv
cp
138.545 167.34 mo
138.375 167.28 li
122.298 161.589 106.138 133.377 103.062 127.778 cv
101.767 125.421 li
104.288 126.36 li
106.379 127.139 108.791 126.795 110.58 125.457 cv
111.581 124.707 li
112.091 125.848 li
124.999 154.675 141.134 163.235 141.296 163.318 cv
141.641 163.496 li
141.776 163.86 li
142.164 164.908 141.895 165.642 141.6 166.073 cv
140.8 167.243 139.065 167.331 138.726 167.337 cv
138.545 167.34 li
cp
f
114.198 124.274 mo
140.629 136.366 149.826 150.816 151.351 153.486 cv
151.591 153.466 151.763 152.828 151.808 152.373 cv
146.697 138.403 122.732 123.739 115.235 119.426 cv
115.374 121.103 115.019 122.786 114.198 124.274 cv
cp
151.339 155.487 mo
151.022 155.487 150.686 155.422 150.341 155.295 cv
149.979 155.161 li
149.8 154.816 li
149.716 154.654 141.085 138.486 112.32 125.62 cv
111.175 125.107 li
111.93 124.106 li
113.295 122.294 113.636 119.939 112.842 117.806 cv
111.903 115.285 li
114.26 116.581 li
119.858 119.657 148.072 135.818 153.761 151.894 cv
153.821 152.064 li
153.818 152.244 li
153.791 153.806 153.004 155.487 151.339 155.487 cv
cp
f
192.886 311.702 mo
190.17 311.702 187.961 313.911 187.961 316.627 cv
187.961 353.765 li
187.961 356.481 190.17 358.69 192.886 358.69 cv
243.63 358.69 li
246.346 358.69 248.555 356.481 248.555 353.765 cv
248.555 316.627 li
248.555 313.911 246.346 311.702 243.63 311.702 cv
192.886 311.702 li
cp
243.63 360.69 mo
192.886 360.69 li
189.068 360.69 185.961 357.583 185.961 353.765 cv
185.961 316.627 li
185.961 312.809 189.068 309.702 192.886 309.702 cv
243.63 309.702 li
247.449 309.702 250.555 312.809 250.555 316.627 cv
250.555 353.765 li
250.555 357.583 247.449 360.69 243.63 360.69 cv
cp
f
192.992 317.365 mo
192.775 317.365 192.599 317.541 192.599 317.758 cv
192.599 317.975 192.775 318.151 192.992 318.151 cv
205.757 318.151 li
205.974 318.151 206.15 317.975 206.15 317.758 cv
206.15 317.541 205.974 317.365 205.757 317.365 cv
192.992 317.365 li
cp
205.757 320.151 mo
192.992 320.151 li
191.672 320.151 190.599 319.077 190.599 317.758 cv
190.599 316.439 191.672 315.365 192.992 315.365 cv
205.757 315.365 li
207.077 315.365 208.15 316.439 208.15 317.758 cv
208.15 319.077 207.077 320.151 205.757 320.151 cv
cp
f
193.475 323.836 mo
193.163 323.836 192.909 324.09 192.909 324.402 cv
192.909 324.715 193.163 324.97 193.475 324.97 cv
199.626 324.97 li
199.938 324.97 200.193 324.715 200.193 324.402 cv
200.193 324.09 199.938 323.836 199.626 323.836 cv
193.475 323.836 li
cp
199.626 326.97 mo
193.475 326.97 li
192.06 326.97 190.909 325.818 190.909 324.402 cv
190.909 322.987 192.06 321.836 193.475 321.836 cv
199.626 321.836 li
201.042 321.836 202.193 322.987 202.193 324.402 cv
202.193 325.818 201.042 326.97 199.626 326.97 cv
cp
f
227.687 338.951 mo
228.871 338.951 230.002 339.44 230.792 340.295 cv
232.532 342.175 233.657 345.056 234.129 347.125 cv
234.449 348.526 234.612 350.01 234.613 351.535 cv
234.613 351.583 234.613 351.643 234.714 351.643 cv
234.747 351.643 234.76 351.643 234.786 351.575 cv
235.553 349.522 235.981 347.116 236.094 344.22 cv
236.178 342.045 235.87 339.576 235.622 337.592 cv
235.456 336.261 235.324 335.21 235.344 334.525 cv
235.389 333.013 236.012 331.954 236.615 330.93 cv
236.762 330.68 236.913 330.425 237.056 330.157 cv
237.773 328.829 237.901 327.709 238.005 326.272 cv
238.203 323.555 236.884 321.443 234.388 320.48 cv
233.772 320.242 233.114 320.126 232.376 320.126 cv
231.042 320.126 229.626 320.511 228.258 320.883 cv
227.687 321.038 li
227.117 320.883 li
225.748 320.511 224.333 320.126 222.999 320.126 cv
222.26 320.126 221.602 320.242 220.986 320.48 cv
218.49 321.443 217.171 323.555 217.369 326.272 cv
217.473 327.709 217.601 328.829 218.317 330.156 cv
218.461 330.425 218.612 330.68 218.759 330.93 cv
219.362 331.954 219.985 333.013 220.03 334.526 cv
220.05 335.21 219.918 336.261 219.752 337.592 cv
219.504 339.576 219.196 342.045 219.28 344.22 cv
219.393 347.116 219.821 349.522 220.588 351.575 cv
220.757 351.641 220.761 351.583 220.761 351.535 cv
220.762 350.01 220.925 348.526 221.245 347.125 cv
221.717 345.056 222.842 342.175 224.582 340.295 cv
225.372 339.44 226.503 338.951 227.687 338.951 cv
cp
234.714 353.643 mo
234.714 353.643 li
233.537 353.643 232.614 352.718 232.613 351.537 cv
232.612 350.16 232.466 348.825 232.18 347.57 cv
231.765 345.753 230.796 343.244 229.324 341.653 cv
228.5 340.761 226.875 340.762 226.05 341.652 cv
224.578 343.244 223.609 345.753 223.194 347.57 cv
222.908 348.825 222.762 350.16 222.761 351.537 cv
222.76 352.718 221.837 353.643 220.66 353.643 cv
219.776 353.643 219.031 353.119 218.715 352.276 cv
217.872 350.021 217.403 347.41 217.282 344.298 cv
217.191 341.959 217.511 339.401 217.768 337.344 cv
217.917 336.148 218.046 335.115 218.03 334.585 cv
218.001 333.585 217.575 332.86 217.036 331.944 cv
216.876 331.672 216.712 331.396 216.556 331.105 cv
215.654 329.431 215.492 328.049 215.375 326.417 cv
215.113 322.815 216.941 319.898 220.265 318.614 cv
221.116 318.286 222.01 318.126 222.999 318.126 cv
224.599 318.126 226.146 318.547 227.641 318.953 cv
227.687 318.966 li
227.733 318.953 li
229.228 318.547 230.775 318.126 232.376 318.126 cv
233.364 318.126 234.258 318.286 235.109 318.614 cv
238.433 319.898 240.261 322.815 240 326.417 cv
239.882 328.049 239.72 329.431 238.817 331.106 cv
238.662 331.396 238.499 331.672 238.338 331.944 cv
237.799 332.86 237.374 333.585 237.344 334.584 cv
237.328 335.115 237.457 336.148 237.606 337.344 cv
237.863 339.401 238.183 341.959 238.092 344.298 cv
237.971 347.41 237.502 350.021 236.659 352.276 cv
236.343 353.119 235.598 353.643 234.714 353.643 cv
cp
f
217.448 355.161 mo
214.753 355.161 li
214.753 352.465 li
214.753 352.194 214.533 351.974 214.262 351.974 cv
213.99 351.974 213.771 352.194 213.771 352.465 cv
213.771 355.652 li
213.771 355.923 213.99 356.143 214.262 356.143 cv
217.448 356.143 li
217.719 356.143 217.939 355.923 217.939 355.652 cv
217.939 355.38 217.719 355.161 217.448 355.161 cv
cp
f
214.753 318.933 mo
214.753 316.237 li
217.448 316.237 li
217.719 316.237 217.939 316.017 217.939 315.746 cv
217.939 315.475 217.719 315.255 217.448 315.255 cv
214.262 315.255 li
213.99 315.255 213.771 315.475 213.771 315.746 cv
213.771 318.933 li
213.771 319.204 213.99 319.424 214.262 319.424 cv
214.533 319.424 214.753 319.204 214.753 318.933 cv
cp
f
237.926 355.161 mo
240.622 355.161 li
240.622 352.465 li
240.622 352.194 240.841 351.974 241.112 351.974 cv
241.384 351.974 241.603 352.194 241.603 352.465 cv
241.603 355.652 li
241.603 355.923 241.384 356.143 241.112 356.143 cv
237.926 356.143 li
237.655 356.143 237.435 355.923 237.435 355.652 cv
237.435 355.38 237.655 355.161 237.926 355.161 cv
cp
f
240.622 318.933 mo
240.622 316.237 li
237.926 316.237 li
237.655 316.237 237.435 316.017 237.435 315.746 cv
237.435 315.475 237.655 315.255 237.926 315.255 cv
241.112 315.255 li
241.384 315.255 241.603 315.475 241.603 315.746 cv
241.603 318.933 li
241.603 319.204 241.384 319.424 241.112 319.424 cv
240.841 319.424 240.622 319.204 240.622 318.933 cv
cp
f
189.363 125.193 mo
204.747 127.892 218.928 127.928 219.09 127.928 cv
219.252 127.928 233.438 127.891 248.818 125.193 cv
241.201 124.288 229.285 122.736 225.655 121.505 cv
224.781 122.381 222.804 123.828 219.147 124.037 cv
219.09 124.04 li
219.034 124.037 li
215.376 123.828 213.4 122.381 212.526 121.505 cv
208.896 122.736 196.98 124.288 189.363 125.193 cv
cp
219.09 129.928 mo
218.906 129.928 200.443 129.882 182.665 125.9 cv
176.765 124.579 li
182.776 123.93 li
193.172 122.808 210.381 120.599 212.298 119.447 cv
213.138 118.943 li
213.66 119.773 li
213.709 119.845 215.049 121.789 219.09 122.036 cv
223.131 121.789 224.472 119.845 224.528 119.762 cv
225.057 118.968 li
225.882 119.447 li
227.799 120.599 245.008 122.808 255.406 123.93 cv
261.417 124.579 li
255.517 125.9 li
237.738 129.882 219.275 129.928 219.09 129.928 cv
cp
f
218.736 145.337 mo
219.035 145.339 li
221.608 145.339 242.991 144.909 253.766 131.004 cv
247.791 134.109 235.067 139.512 218.882 139.512 cv
218.632 139.512 li
202.447 139.513 189.724 134.11 183.749 131.005 cv
194.524 144.91 215.907 145.339 218.48 145.339 cv
218.736 145.337 li
cp
219.035 147.339 mo
218.736 147.337 li
218.48 147.339 li
215.589 147.339 189.948 146.812 179.725 128.541 cv
177.722 124.961 li
181.149 127.218 li
181.305 127.321 197.027 137.512 218.628 137.512 cv
218.63 137.512 218.63 137.512 218.632 137.512 cv
218.882 137.512 li
240.484 137.512 256.209 127.321 256.365 127.218 cv
259.791 124.963 li
257.789 128.541 li
247.566 146.812 221.925 147.339 219.035 147.339 cv
cp
f
96.1973 0 mo
95.3425 0 94.5583 .5511 94.291 1.3993 cv
88.7874 18.8637 91.0094 20.9572 91.7396 21.6452 cv
93.888 23.6694 101.006 24.8186 104.039 25.2264 cv
108.758 29.962 li
109.647 33.2996 li
109.737 33.6399 109.916 33.9502 110.165 34.1993 cv
111.977 36.0108 li
142.412 67.6779 li
143.346 68.6499 144.603 69.1852 145.952 69.1852 cv
147.263 69.1852 148.495 68.6745 149.423 67.7473 cv
151.47 65.7002 li
152.41 64.76 152.92 63.51 152.907 62.1804 cv
152.894 60.8508 152.359 59.6111 151.4 58.6897 cv
121.658 30.104 li
117.96 26.405 li
117.711 26.156 117.4 25.9772 117.06 25.8866 cv
113.724 24.9985 li
108.515 19.7893 li
108.24 19.5139 107.89 19.325 107.509 19.2455 cv
96.309 16.9112 li
96.4679 14.1747 97.3108 7.7945 98.1742 2.3115 cv
98.337 1.2775 97.6749 .2928 96.6559 .0534 cv
96.5025 .0174 96.3487 0 96.1973 0 cv
96.1973 0 li
cp
96.1985 2.0004 mo
96.1985 2.0004 93.8651 16.8177 94.3571 18.5473 cv
107.101 21.2035 li
112.69 26.7929 li
116.545 27.8192 li
120.272 31.5459 li
150.014 60.1317 li
151.189 61.2606 151.207 63.134 150.055 64.286 cv
148.008 66.3331 li
147.44 66.9017 146.695 67.1852 145.952 67.1852 cv
145.188 67.1852 144.426 66.8868 143.854 66.292 cv
113.391 34.5966 li
111.58 32.785 li
110.553 28.9298 li
104.973 23.3307 li
104.973 23.3307 95.1502 22.1107 93.1111 20.1895 cv
91.072 18.2683 96.1985 2.0004 96.1985 2.0004 cv
96.1985 2.0004 li
cp
f
104.958 24.9547 mo
103.544 23.5406 li
107.278 19.8062 li
108.692 21.2203 li
104.958 24.9547 li
cp
f
110.338 30.335 mo
108.924 28.921 li
112.658 25.1866 li
114.072 26.6007 li
110.338 30.335 li
cp
f
111.446 34.2911 mo
110.032 32.877 li
116.424 26.484 li
117.838 27.898 li
111.446 34.2911 li
cp
f
111.594 38.2128 mo
110.152 39.5987 li
89.1153 59.8169 li
88.1959 60.7006 87.6826 61.8895 87.6699 63.1647 cv
87.6573 64.4399 88.1469 65.6389 89.0487 66.5406 cv
90.9545 68.4464 li
91.8437 69.3356 93.026 69.8254 94.2835 69.8254 cv
95.5766 69.8254 96.7822 69.312 97.6782 68.3798 cv
117.801 47.443 li
119.133 46.0571 li
117.801 44.6712 li
112.979 39.6548 li
111.594 38.2128 li
111.594 38.2128 li
cp
111.537 41.0407 mo
116.359 46.0571 li
96.2362 66.9938 li
95.7039 67.5477 94.994 67.8254 94.2835 67.8254 cv
93.5911 67.8254 92.898 67.5615 92.3687 67.0322 cv
90.4629 65.1264 li
89.3905 64.054 89.4077 62.3099 90.5012 61.2589 cv
111.537 41.0407 li
111.537 41.0407 li
cp
f
143.526 2.6561 mo
140.505 2.6561 137.664 3.8329 135.527 5.9695 cv
132.017 9.48 131.27 14.9071 133.513 19.2078 cv
129.852 22.8684 li
126.86 23.665 li
126.361 23.7978 li
125.988 24.1557 li
123.52 26.528 li
122.02 27.97 li
123.52 29.412 li
128.229 33.9378 li
129.671 35.3237 li
131.057 33.8817 li
133.339 31.5067 li
133.697 31.1344 li
133.83 30.6353 li
134.627 27.6433 li
138.285 23.9854 li
139.896 24.8332 141.684 25.2751 143.541 25.2751 cv
146.557 25.2751 149.393 24.1005 151.526 21.9678 cv
153.662 19.8312 154.839 16.9904 154.839 13.9687 cv
154.839 10.947 153.662 8.1062 151.526 5.9695 cv
149.389 3.8329 146.548 2.6561 143.526 2.6561 cv
143.526 2.6561 li
cp
143.526 4.6561 mo
145.91 4.6561 148.293 5.5653 150.111 7.3837 cv
153.748 11.0205 153.748 16.9169 150.111 20.5536 cv
148.296 22.3692 145.919 23.2751 143.541 23.2751 cv
141.59 23.2751 139.637 22.6651 137.995 21.4471 cv
132.832 26.6092 li
131.897 30.1208 li
129.615 32.4958 li
124.906 27.97 li
127.374 25.5977 li
130.886 24.6628 li
136.048 19.5007 li
133.346 15.8552 133.636 10.689 136.942 7.3837 cv
138.76 5.5653 141.143 4.6561 143.526 4.6561 cv
143.526 4.6561 li
cp
f
143.542 6.4437 mo
143.542 6.4437 li
141.534 6.4439 139.647 7.2244 138.23 8.6414 cv
135.301 11.5703 135.301 16.336 138.23 19.2649 cv
139.647 20.6821 141.534 21.4627 143.542 21.4627 cv
145.55 21.4627 147.437 20.6822 148.854 19.265 cv
151.783 16.3361 151.783 11.5704 148.854 8.6414 cv
147.436 7.2242 145.55 6.4437 143.542 6.4437 cv
143.542 6.4437 li
cp
143.542 8.4437 mo
144.953 8.4436 146.365 8.9809 147.439 10.0556 cv
149.589 12.2048 149.589 15.7016 147.44 17.8508 cv
146.365 18.9253 144.953 19.4627 143.542 19.4627 cv
142.13 19.4627 140.719 18.9254 139.644 17.8507 cv
137.495 15.7016 137.495 12.2048 139.644 10.0556 cv
140.719 8.9811 142.13 8.4438 143.542 8.4437 cv
143.542 8.4437 li
cp
f
132.948 28.0211 mo
129.479 24.5518 li
130.893 23.1378 li
134.362 26.607 li
132.948 28.0211 li
cp
f
131.71 31.4239 mo
125.921 25.6349 li
127.335 24.2208 li
133.125 30.0099 li
131.71 31.4239 li
cp
f
307.816 116.301 mo
306.401 117.715 li
304.693 119.424 li
303.278 120.838 li
304.693 122.252 li
305.219 122.778 li
304.244 124.814 304.355 126.82 305.61 128.075 cv
325.766 148.231 li
324.714 149.334 324.73 151.087 325.813 152.17 cv
326.346 152.702 327.053 152.996 327.806 152.996 cv
328.559 152.996 329.267 152.702 329.8 152.17 cv
339.066 142.904 li
340.165 141.805 340.165 140.016 339.066 138.917 cv
338.533 138.385 337.825 138.092 337.072 138.092 cv
336.342 138.092 335.653 138.368 335.127 138.871 cv
314.971 118.715 li
314.286 118.03 313.361 117.669 312.295 117.669 cv
311.498 117.669 310.64 117.877 309.785 118.27 cv
309.23 117.715 li
307.816 116.301 li
307.816 116.301 li
cp
307.816 119.129 mo
309.462 120.775 li
310.441 120.06 311.463 119.669 312.295 119.669 cv
312.805 119.669 313.244 119.817 313.556 120.129 cv
335.126 141.699 li
336.493 140.332 li
336.653 140.172 336.863 140.092 337.072 140.092 cv
337.282 140.092 337.492 140.172 337.651 140.331 cv
337.971 140.651 337.971 141.17 337.651 141.49 cv
328.386 150.756 li
328.226 150.916 328.016 150.996 327.806 150.996 cv
327.597 150.996 327.387 150.916 327.227 150.756 cv
326.907 150.436 326.907 149.917 327.227 149.597 cv
328.594 148.23 li
307.025 126.66 li
306.188 125.824 306.531 124.08 307.741 122.472 cv
306.107 120.838 li
307.816 119.129 li
307.816 119.129 li
cp
f
335.637 143.726 mo
334.222 145.14 li
332.036 147.327 li
330.622 148.741 li
332.036 150.155 li
339.504 157.624 li
340.919 159.038 li
342.333 157.624 li
344.519 155.437 li
345.934 154.023 li
344.519 152.609 li
337.051 145.14 li
335.637 143.726 li
335.637 143.726 li
cp
335.637 146.554 mo
343.105 154.023 li
340.919 156.209 li
333.45 148.741 li
335.637 146.554 li
335.637 146.554 li
cp
f
346.827 151.43 mo
346.116 151.43 345.448 151.707 344.945 152.21 cv
339.106 158.049 li
338.068 159.087 338.068 160.776 339.106 161.814 cv
339.609 162.317 340.277 162.594 340.988 162.594 cv
341.7 162.594 342.368 162.317 342.871 161.814 cv
348.71 155.975 li
349.748 154.937 349.748 153.248 348.71 152.21 cv
348.207 151.707 347.539 151.43 346.827 151.43 cv
346.827 151.43 li
cp
346.827 153.43 mo
346.997 153.43 347.166 153.495 347.296 153.624 cv
347.554 153.883 347.554 154.302 347.296 154.561 cv
341.457 160.4 li
341.327 160.529 341.158 160.594 340.988 160.594 cv
340.819 160.594 340.649 160.529 340.52 160.4 cv
340.262 160.141 340.262 159.722 340.52 159.463 cv
346.359 153.624 li
346.488 153.495 346.658 153.43 346.827 153.43 cv
346.827 153.43 li
cp
f
302.505 111.883 mo
301.538 111.883 300.629 112.26 299.945 112.944 cv
298.509 114.379 298.509 116.676 299.921 118.089 cv
301.587 119.754 li
301.628 120.356 301.879 120.944 302.337 121.402 cv
302.827 121.893 303.48 122.163 304.173 122.163 cv
304.867 122.163 305.519 121.893 306.01 121.402 cv
308.298 119.114 li
308.789 118.624 309.059 117.971 309.059 117.278 cv
309.059 116.584 308.789 115.932 308.298 115.441 cv
307.896 115.039 307.386 114.786 306.833 114.71 cv
305.066 112.944 li
304.382 112.26 303.473 111.883 302.505 111.883 cv
302.505 111.883 li
cp
302.505 113.883 mo
302.92 113.883 303.335 114.041 303.652 114.358 cv
306.105 116.811 li
306.214 116.728 306.345 116.686 306.474 116.686 cv
306.622 116.686 306.77 116.741 306.884 116.855 cv
307.117 117.088 307.117 117.467 306.884 117.7 cv
304.596 119.988 li
304.479 120.105 304.326 120.163 304.173 120.163 cv
304.02 120.163 303.868 120.105 303.751 119.988 cv
303.518 119.755 303.518 119.376 303.751 119.143 cv
303.778 119.116 li
301.336 116.674 li
300.702 116.041 300.702 115.014 301.336 114.381 cv
301.359 114.358 li
301.675 114.041 302.09 113.883 302.505 113.883 cv
302.505 113.883 li
cp
f
289.031 101.128 mo
288.286 101.114 287.395 100.706 286.657 99.9676 cv
286.333 100.292 li
300.4 114.358 li
301.331 113.427 li
289.031 101.128 li
cp
f
328.156 148.668 mo
326.742 147.253 li
334.149 139.846 li
335.563 141.26 li
328.156 148.668 li
cp
f
303.559 119.796 mo
302.145 118.382 li
305.355 115.171 li
306.769 116.585 li
303.559 119.796 li
cp
f
313.198 127.302 mo
312.942 127.302 312.686 127.204 312.491 127.009 cv
312.1 126.619 312.1 125.985 312.491 125.595 cv
315.756 122.329 li
316.147 121.938 316.78 121.938 317.17 122.329 cv
317.561 122.719 317.561 123.352 317.17 123.743 cv
313.905 127.009 li
313.709 127.204 313.454 127.302 313.198 127.302 cv
cp
f
317.512 131.616 mo
317.256 131.616 317.001 131.519 316.805 131.323 cv
316.415 130.933 316.415 130.3 316.805 129.909 cv
320.071 126.644 li
320.461 126.253 321.094 126.253 321.485 126.644 cv
321.876 127.034 321.876 127.667 321.485 128.058 cv
318.219 131.323 li
318.024 131.519 317.768 131.616 317.512 131.616 cv
cp
f
321.827 135.931 mo
321.571 135.931 321.315 135.834 321.12 135.638 cv
320.729 135.248 320.729 134.615 321.12 134.224 cv
324.385 130.958 li
324.776 130.568 325.409 130.568 325.799 130.958 cv
326.19 131.348 326.19 131.982 325.799 132.372 cv
322.534 135.638 li
322.338 135.834 322.083 135.931 321.827 135.931 cv
cp
f
326.141 140.246 mo
325.885 140.246 325.629 140.148 325.434 139.953 cv
325.043 139.562 325.043 138.929 325.434 138.539 cv
328.701 135.273 li
329.091 134.882 329.724 134.882 330.115 135.273 cv
330.505 135.664 330.505 136.297 330.115 136.687 cv
326.848 139.953 li
326.653 140.148 326.397 140.246 326.141 140.246 cv
cp
f
316.321 308.065 mo
309.921 308.065 306.676 311.574 306.676 318.497 cv
306.676 326.408 311.002 332.844 316.321 332.844 cv
321.639 332.844 325.966 326.408 325.966 318.497 cv
325.966 311.574 322.721 308.065 316.321 308.065 cv
cp
316.321 334.844 mo
309.9 334.844 304.676 327.511 304.676 318.497 cv
304.676 310.48 308.812 306.065 316.321 306.065 cv
323.831 306.065 327.966 310.48 327.966 318.497 cv
327.966 327.511 322.742 334.844 316.321 334.844 cv
cp
f
289.95 358.272 mo
293.622 359.071 307.378 361.921 316.294 361.682 cv
325.115 361.537 338.955 358.971 342.688 358.248 cv
341.331 350.77 338.918 344.877 338.431 343.733 cv
338.431 343.733 li
338.429 343.733 338.407 343.683 338.386 343.632 cv
338.33 343.523 li
337.001 340.901 332.896 338.575 327.27 337.233 cv
317.808 359.982 li
314.834 359.982 li
305.372 337.233 li
299.746 338.575 295.642 340.9 294.312 343.523 cv
294.245 343.657 li
294.222 343.711 294.204 343.752 294.182 343.794 cv
293.524 345.374 291.253 351.122 289.95 358.272 cv
cp
315.211 363.696 mo
304.64 363.696 289.226 360.166 288.576 360.016 cv
287.659 359.804 li
287.814 358.876 li
289.118 351.085 291.629 344.72 292.368 342.955 cv
292.403 342.875 292.425 342.824 292.442 342.786 cv
292.596 342.49 li
294.34 339.22 299.126 336.528 305.76 335.094 cv
306.575 334.918 li
316.167 357.982 li
316.474 357.982 li
326.067 334.918 li
326.881 335.094 li
333.521 336.529 338.307 339.223 340.049 342.496 cv
340.071 342.529 li
340.105 342.582 340.153 342.667 340.198 342.784 cv
340.23 342.858 li
339.351 343.341 li
340.271 342.949 li
340.794 344.179 343.474 350.725 344.827 358.877 cv
344.985 359.829 li
344.04 360.022 li
343.337 360.163 326.73 363.511 316.337 363.682 cv
315.976 363.691 315.596 363.696 315.211 363.696 cv
cp
f
316.167 357.982 mo
316.474 357.982 li
318.183 353.868 li
316.592 342.296 li
318.796 340.092 li
316.321 338.682 li
313.845 340.092 li
316.049 342.296 li
314.458 353.868 li
316.167 357.982 li
cp
317.808 359.982 mo
314.834 359.982 li
312.403 354.134 li
313.932 343.007 li
310.576 339.651 li
316.321 336.381 li
322.064 339.651 li
318.709 343.007 li
320.238 354.134 li
317.808 359.982 li
cp
f
308.567 311.522 mo
307.696 313.146 li
307.595 313.395 307.29 314.733 306.845 317.493 cv
307.456 317.481 li
311.556 317.405 316.204 317.319 318.709 312.057 cv
319.551 310.29 li
320.49 312.006 li
320.55 312.113 322.028 314.671 325.483 314.919 cv
324.057 310.683 320.61 308.065 316.425 308.065 cv
312.802 308.065 310.159 309.228 308.567 311.522 cv
cp
306.668 319.496 mo
306.126 319.496 305.612 319.26 305.26 318.848 cv
304.909 318.436 304.756 317.892 304.842 317.356 cv
305.503 313.21 305.796 312.513 305.893 312.284 cv
306.887 310.437 li
308.842 307.576 312.141 306.065 316.425 306.065 cv
321.528 306.065 325.868 309.413 327.481 314.597 cv
327.651 315.144 327.549 315.745 327.21 316.206 cv
326.87 316.669 326.346 316.934 325.775 316.934 cv
325.775 316.934 li
322.759 316.839 320.82 315.415 319.756 314.299 cv
316.585 319.314 311.377 319.408 307.493 319.481 cv
306.668 319.496 li
cp
f
317.397 359.982 mo
317.122 359.982 316.847 359.868 316.65 359.646 cv
316.283 359.233 316.32 358.601 316.733 358.234 cv
327.508 348.655 li
325.076 345.326 li
324.903 345.09 324.842 344.79 324.911 344.505 cv
324.978 344.221 325.167 343.98 325.427 343.846 cv
329.222 341.904 li
326.466 337.568 li
326.169 337.103 326.307 336.484 326.774 336.189 cv
327.239 335.893 327.857 336.03 328.154 336.496 cv
331.499 341.758 li
331.65 341.995 331.694 342.285 331.62 342.557 cv
331.545 342.828 331.361 343.056 331.111 343.185 cv
327.382 345.093 li
329.66 348.209 li
329.963 348.625 329.902 349.204 329.516 349.546 cv
318.061 359.729 li
317.871 359.898 317.633 359.982 317.397 359.982 cv
cp
f
315.12 359.982 mo
314.883 359.982 314.646 359.898 314.456 359.729 cv
303.001 349.546 li
302.615 349.204 302.553 348.625 302.857 348.209 cv
305.134 345.093 li
301.406 343.185 li
301.156 343.056 300.971 342.828 300.897 342.557 cv
300.823 342.285 300.867 341.995 301.018 341.758 cv
304.363 336.496 li
304.659 336.03 305.278 335.893 305.743 336.189 cv
306.209 336.484 306.347 337.103 306.05 337.568 cv
303.294 341.904 li
307.089 343.846 li
307.349 343.98 307.539 344.221 307.606 344.505 cv
307.674 344.79 307.614 345.09 307.441 345.326 cv
305.008 348.655 li
315.784 358.234 li
316.197 358.601 316.234 359.233 315.867 359.646 cv
315.669 359.868 315.395 359.982 315.12 359.982 cv
cp
f
217.869 242.485 mo
219.763 242.485 221.573 243.267 222.834 244.63 cv
225.834 247.871 227.779 252.865 228.598 256.458 cv
229.156 258.904 229.44 261.492 229.442 264.151 cv
229.442 264.922 230.073 265.125 230.406 265.126 cv
230.406 265.126 li
230.64 265.126 231.062 265.044 231.267 264.496 cv
232.667 260.753 233.448 256.381 233.651 251.131 cv
233.803 247.187 233.248 242.745 232.802 239.177 cv
232.51 236.837 232.279 234.989 232.313 233.828 cv
232.388 231.33 233.45 229.527 234.476 227.783 cv
234.743 227.329 235.015 226.867 235.277 226.382 cv
236.626 223.877 236.867 221.8 237.06 219.139 cv
237.432 213.999 234.834 209.842 230.107 208.016 cv
228.916 207.556 227.648 207.332 226.232 207.332 cv
223.748 207.332 221.172 208.033 218.681 208.71 cv
217.87 208.931 li
217.058 208.71 li
214.566 208.032 211.99 207.332 209.506 207.332 cv
208.09 207.332 206.823 207.556 205.631 208.016 cv
200.905 209.842 198.306 213.999 198.678 219.139 cv
198.873 221.8 199.114 223.878 200.463 226.382 cv
200.724 226.868 200.997 227.33 201.264 227.785 cv
202.29 229.528 203.35 231.33 203.425 233.827 cv
203.459 234.989 203.228 236.837 202.936 239.177 cv
202.491 242.745 201.935 247.187 202.087 251.132 cv
202.291 256.379 203.07 260.751 204.471 264.496 cv
204.676 265.044 205.099 265.126 205.333 265.126 cv
205.666 265.126 206.296 264.922 206.296 264.152 cv
206.298 261.492 206.583 258.904 207.14 256.458 cv
207.959 252.865 209.905 247.871 212.904 244.63 cv
214.166 243.267 215.975 242.485 217.869 242.485 cv
cp
230.406 267.126 mo
230.406 267.126 li
228.95 267.125 227.443 266.014 227.442 264.152 cv
227.44 261.643 227.173 259.203 226.649 256.903 cv
225.886 253.563 224.098 248.941 221.366 245.987 cv
220.482 245.032 219.208 244.485 217.869 244.485 cv
216.531 244.485 215.256 245.032 214.373 245.987 cv
211.64 248.941 209.852 253.563 209.089 256.903 cv
208.565 259.203 208.298 261.643 208.296 264.153 cv
208.295 266.014 206.789 267.126 205.333 267.126 cv
204.09 267.126 203.042 266.387 202.598 265.197 cv
201.122 261.248 200.3 256.673 200.089 251.209 cv
199.93 247.1 200.497 242.569 200.952 238.929 cv
201.222 236.764 201.456 234.895 201.425 233.887 cv
201.367 231.902 200.52 230.465 199.541 228.8 cv
199.26 228.323 198.975 227.839 198.702 227.33 cv
197.168 224.482 196.889 222.102 196.684 219.283 cv
196.244 213.22 199.32 208.31 204.911 206.15 cv
206.336 205.6 207.839 205.332 209.506 205.332 cv
212.257 205.332 214.964 206.068 217.583 206.78 cv
217.87 206.859 li
218.156 206.78 li
220.774 206.068 223.481 205.332 226.232 205.332 cv
227.899 205.332 229.402 205.6 230.828 206.15 cv
236.418 208.31 239.495 213.22 239.054 219.283 cv
238.85 222.1 238.572 224.482 237.038 227.331 cv
236.764 227.838 236.479 228.322 236.199 228.798 cv
235.218 230.464 234.372 231.902 234.313 233.888 cv
234.283 234.895 234.516 236.764 234.787 238.929 cv
235.242 242.569 235.808 247.1 235.649 251.208 cv
235.438 256.675 234.617 261.251 233.14 265.197 cv
232.696 266.387 231.648 267.126 230.406 267.126 cv
cp
f
217.812 232.525 mo
220.947 232.544 223.872 234.035 225.806 235.022 cv
226.092 235.167 226.413 235.331 226.689 235.463 cv
226.941 234.07 227.237 231.455 227.441 229.214 cv
227.616 227.314 225.721 226.037 223.89 225.476 cv
223.516 225.36 222.974 225.3 222.322 225.3 cv
220.393 225.3 218.114 225.812 218.091 225.818 cv
217.87 225.867 li
217.648 225.818 li
217.626 225.812 215.345 225.3 213.417 225.3 cv
212.765 225.3 212.222 225.36 211.849 225.476 cv
210.017 226.037 208.123 227.314 208.297 229.213 cv
208.328 229.551 208.352 230.211 208.381 231.009 cv
208.423 232.195 208.495 234.175 208.636 235.335 cv
208.954 235.198 209.346 235.017 209.692 234.856 cv
211.692 233.928 214.715 232.525 217.812 232.525 cv
cp
227.245 237.711 mo
227.245 237.711 li
226.678 237.711 226.008 237.369 224.898 236.804 cv
223.13 235.902 220.46 234.541 217.864 234.525 cv
217.863 234.525 217.863 234.525 217.863 234.525 cv
215.157 234.525 212.375 235.816 210.534 236.67 cv
209.259 237.262 208.622 237.546 208.067 237.546 cv
207.503 237.546 207.049 237.234 206.88 236.73 cv
206.574 235.814 206.473 233.63 206.382 231.081 cv
206.355 230.332 206.334 229.711 206.305 229.396 cv
206.072 226.848 208.017 224.558 211.262 223.564 cv
211.839 223.387 212.544 223.3 213.417 223.3 cv
215.223 223.3 217.211 223.682 217.87 223.818 cv
218.528 223.682 220.515 223.3 222.322 223.3 cv
223.194 223.3 223.899 223.387 224.477 223.564 cv
227.721 224.558 229.667 226.848 229.433 229.397 cv
229.34 230.412 228.855 235.551 228.402 236.905 cv
228.238 237.395 227.784 237.711 227.245 237.711 cv
cp
f
204.793 266.276 mo
201.546 250.575 206.672 236.646 206.892 236.061 cv
208.765 236.764 li
208.713 236.902 203.626 250.756 206.752 265.871 cv
204.793 266.276 li
cp
f
230.946 266.272 mo
228.985 265.875 li
232.412 248.917 226.38 236.295 226.319 236.17 cv
228.116 235.291 li
228.378 235.829 234.505 248.655 230.946 266.272 cv
cp
f
209.506 207.332 mo
208.09 207.332 206.823 207.556 205.631 208.016 cv
200.905 209.842 198.306 213.999 198.678 219.139 cv
198.718 219.657 li
200.108 217.441 202.263 215.745 204.911 214.724 cv
206.336 214.173 207.84 213.904 209.507 213.904 cv
212.259 213.904 214.967 214.642 217.586 215.355 cv
217.87 215.432 li
218.151 215.356 li
220.77 214.642 223.479 213.904 226.231 213.904 cv
227.898 213.904 229.402 214.173 230.828 214.724 cv
233.456 215.738 235.594 217.414 237.026 219.575 cv
237.06 219.135 li
237.432 213.999 234.834 209.842 230.107 208.016 cv
228.916 207.556 227.648 207.332 226.232 207.332 cv
223.748 207.332 221.172 208.033 218.681 208.71 cv
217.87 208.931 li
217.058 208.71 li
214.566 208.032 211.99 207.332 209.506 207.332 cv
cp
237.084 221.739 mo
236.425 221.739 235.819 221.403 235.462 220.84 cv
234.263 218.949 232.411 217.479 230.107 216.589 cv
228.915 216.129 227.647 215.904 226.231 215.904 cv
223.746 215.904 221.168 216.607 218.676 217.285 cv
217.87 217.504 li
217.061 217.284 li
214.569 216.607 211.992 215.904 209.507 215.904 cv
208.091 215.904 206.824 216.129 205.631 216.589 cv
203.376 217.459 201.551 218.889 200.352 220.722 cv
199.98 221.291 199.358 221.631 198.688 221.631 cv
198.688 221.631 li
197.651 221.631 196.807 220.853 196.725 219.82 cv
196.684 219.287 li
196.244 213.22 199.32 208.31 204.911 206.15 cv
206.336 205.6 207.839 205.332 209.506 205.332 cv
212.257 205.332 214.964 206.068 217.583 206.78 cv
217.87 206.859 li
218.156 206.78 li
220.774 206.068 223.481 205.332 226.232 205.332 cv
227.899 205.332 229.402 205.6 230.828 206.15 cv
236.418 208.31 239.495 213.22 239.054 219.283 cv
239.001 219.977 li
238.917 220.982 238.093 221.739 237.084 221.739 cv
cp
f
20.9018 44.5909 mo
22.7529 44.5909 24.5219 45.3551 25.7548 46.6876 cv
28.6797 49.8487 30.5752 54.7149 31.374 58.2154 cv
31.917 60.5992 32.1938 63.1217 32.1958 65.7125 cv
32.1963 66.4415 32.7929 66.6344 33.1084 66.6344 cv
33.1084 66.6344 li
33.3291 66.6344 33.728 66.5567 33.9218 66.0387 cv
35.2851 62.3941 36.0434 58.1407 36.2407 53.0348 cv
36.3886 49.1954 35.8486 44.8726 35.415 41.3995 cv
35.1298 39.1202 34.9052 37.3204 34.9389 36.1876 cv
35.0117 33.7476 36.0468 31.9893 37.0473 30.2891 cv
37.3076 29.8473 37.5722 29.398 37.8261 28.9268 cv
39.1377 26.4913 39.372 24.4718 39.5595 21.8849 cv
39.9223 16.8932 37.3979 12.8551 32.8076 11.0821 cv
31.6504 10.6353 30.4189 10.4181 29.0434 10.4181 cv
26.6279 10.4181 24.1206 11.1002 21.6963 11.7599 cv
20.9018 11.9757 li
20.1079 11.7603 li
17.6831 11.1002 15.1757 10.4181 12.7607 10.4181 cv
11.3852 10.4181 10.1538 10.6353 8.99654 11.0821 cv
4.40574 12.8551 1.88134 16.8936 2.24464 21.8844 cv
2.43214 24.4727 2.66654 26.4923 3.97754 28.9268 cv
4.23144 29.398 4.49654 29.8477 4.75634 30.2896 cv
5.75734 31.9898 6.79204 33.7481 6.86474 36.1876 cv
6.89844 37.3204 6.67384 39.1202 6.38864 41.3995 cv
5.95504 44.8726 5.41504 49.1954 5.56304 53.0348 cv
5.76074 58.1427 6.51954 62.3961 7.88234 66.0387 cv
8.07614 66.5567 8.47514 66.6344 8.69584 66.6344 cv
9.01124 66.6344 9.60794 66.4415 9.60844 65.713 cv
9.60984 63.1217 9.88674 60.5992 10.4301 58.2154 cv
11.229 54.7149 13.1245 49.8477 16.0488 46.6876 cv
17.2817 45.3551 19.0507 44.5909 20.9018 44.5909 cv
cp
33.1084 68.6344 mo
33.1084 68.6344 33.1084 68.6344 33.1079 68.6344 cv
31.6772 68.6339 30.1967 67.5416 30.1958 65.714 cv
30.1938 63.2721 29.934 60.8985 29.4238 58.6602 cv
28.6826 55.4122 26.9438 50.9176 24.2871 48.046 cv
23.4316 47.1212 22.1977 46.5909 20.9018 46.5909 cv
19.6059 46.5909 18.372 47.1212 17.5166 48.046 cv
14.8603 50.9171 13.1215 55.4117 12.3803 58.6607 cv
11.8696 60.8985 11.6098 63.2721 11.6084 65.714 cv
11.6069 67.5421 10.1264 68.6344 8.69584 68.6344 cv
7.47564 68.6344 6.44634 67.9083 6.00924 66.7393 cv
4.57034 62.8941 3.77054 58.4366 3.56494 53.1119 cv
3.41014 49.1095 3.96144 44.6969 4.40434 41.1515 cv
4.66744 39.045 4.89504 37.2257 4.86574 36.2472 cv
4.80814 34.3204 3.98534 32.9224 3.03274 31.3043 cv
2.76024 30.8409 2.48294 30.3697 2.21684 29.8751 cv
.720242 27.0968 .448742 24.7755 .249542 22.0294 cv
-.180158 16.1134 2.82034 11.3238 8.27584 9.2169 cv
9.66704 8.6793 11.1342 8.4181 12.7607 8.4181 cv
15.4433 8.4181 18.0815 9.1358 20.6333 9.8302 cv
20.9018 9.9034 li
21.1709 9.8302 li
23.7221 9.1358 26.3603 8.4181 29.0434 8.4181 cv
30.6699 8.4181 32.1367 8.6793 33.5283 9.2169 cv
38.9834 11.3233 41.9839 16.1134 41.5547 22.0294 cv
41.3554 24.775 41.0839 27.0958 39.5869 29.8751 cv
39.3208 30.3692 39.0434 30.8404 38.771 31.3033 cv
37.8183 32.922 36.9956 34.3199 36.938 36.2472 cv
36.9087 37.2257 37.1362 39.045 37.3994 41.1515 cv
37.8423 44.6969 38.3935 49.1095 38.2387 53.1119 cv
38.0337 58.4342 37.2343 62.8922 35.7949 66.7398 cv
35.3579 67.9083 34.3281 68.6344 33.1084 68.6344 cv
cp
f
7.04154 28.9835 mo
6.68554 28.9835 6.34084 28.7931 6.16014 28.4576 cv
5.03274 26.3653 4.82914 24.6256 4.67924 22.5689 cv
4.52394 20.4342 4.97414 18.4249 5.98044 16.7594 cv
6.26614 16.2867 6.88084 16.1344 7.35354 16.4205 cv
7.82614 16.7061 7.97804 17.3209 7.69234 17.7935 cv
6.90134 19.1031 6.54884 20.7042 6.67434 22.4239 cv
6.81054 24.2994 6.97954 25.7618 7.92094 27.5094 cv
8.18264 27.9952 8.00094 28.6021 7.51464 28.8639 cv
7.36374 28.9449 7.20164 28.9835 7.04154 28.9835 cv
cp
f
8.70314 16.1627 mo
8.44284 16.1627 8.18314 16.0616 7.98684 15.8604 cv
7.60154 15.4649 7.60984 14.8321 8.00534 14.4464 cv
8.96974 13.5064 9.50144 13.2457 10.8291 12.8365 cv
11.3559 12.6729 11.916 12.9693 12.0791 13.4976 cv
12.2417 14.0255 11.9458 14.585 11.4179 14.7476 cv
10.3061 15.0904 10.08 15.2174 9.40084 15.879 cv
9.20654 16.0684 8.95464 16.1627 8.70314 16.1627 cv
cp
f
27.9643 125.036 mo
38.6953 125.036 li
39.2177 123.525 39.4101 122.041 39.5595 119.983 cv
39.9223 114.992 37.3979 110.953 32.8076 109.18 cv
31.6504 108.733 30.4194 108.516 29.0439 108.516 cv
26.6289 108.516 24.122 109.198 21.6977 109.857 cv
20.9018 110.073 li
20.1064 109.857 li
17.6816 109.198 15.1748 108.516 12.7597 108.516 cv
11.3847 108.516 10.1538 108.733 8.99654 109.18 cv
4.40574 110.953 1.88184 114.992 2.24464 119.982 cv
2.39354 122.041 2.58594 123.524 3.10844 125.036 cv
13.8393 125.036 li
15.2319 118.769 li
26.5717 118.769 li
27.9643 125.036 li
cp
40.062 127.036 mo
26.3598 127.036 li
24.9673 120.769 li
16.8364 120.769 li
15.4438 127.036 li
1.74174 127.036 li
1.48874 126.411 li
.607442 124.23 .399942 122.194 .249542 120.128 cv
-.180158 114.212 2.82034 109.422 8.27584 107.314 cv
9.66704 106.777 11.1338 106.516 12.7597 106.516 cv
15.4419 106.516 18.08 107.233 20.6313 107.927 cv
20.9018 108.001 li
21.1728 107.927 li
23.7241 107.233 26.3618 106.516 29.0439 106.516 cv
30.6699 106.516 32.1367 106.777 33.5283 107.314 cv
38.9834 109.422 41.9839 114.212 41.5547 120.128 cv
41.4043 122.194 41.1967 124.231 40.3149 126.411 cv
40.062 127.036 li
cp
f
23.8539 122.535 mo
17.832 122.535 li
16.4394 128.802 li
3.84564 128.802 li
4.84874 130.507 5.79904 132.088 5.86524 134.307 cv
5.94644 137.028 4.31654 144.757 4.56414 151.163 cv
4.72744 155.39 5.29644 160.071 6.94564 164.479 cv
7.26524 165.333 7.98104 165.724 8.69574 165.724 cv
9.65264 165.724 10.6076 165.024 10.6083 163.803 cv
10.6099 161.344 10.8657 158.892 11.4052 156.528 cv
12.1712 153.17 13.9846 148.481 16.7828 145.456 cv
17.8782 144.272 19.3901 143.68 20.902 143.68 cv
22.4138 143.68 23.9257 144.272 25.0211 145.456 cv
27.8193 148.481 29.6327 153.17 30.3987 156.528 cv
30.9382 158.892 31.194 161.344 31.1956 163.803 cv
31.1963 165.024 32.1514 165.724 33.1082 165.724 cv
33.823 165.724 34.5386 165.333 34.8583 164.479 cv
36.5075 160.071 37.0765 155.39 37.2399 151.163 cv
37.4874 144.757 35.8575 137.028 35.9387 134.307 cv
36.0049 132.088 36.9552 130.507 37.9583 128.802 cv
25.2465 128.802 li
23.8539 122.535 li
23.8539 122.535 li
cp
22.2496 124.535 mo
23.2941 129.236 li
23.6421 130.802 li
25.2465 130.802 li
34.6633 130.802 li
34.261 131.813 33.9788 132.932 33.9396 134.247 cv
33.9035 135.457 34.1326 137.291 34.4227 139.613 cv
34.8522 143.051 35.3866 147.328 35.2414 151.086 cv
35.0589 155.807 34.3904 159.773 33.1904 163.205 cv
33.1498 160.748 32.867 158.355 32.3486 156.083 cv
31.5211 152.456 29.5473 147.403 26.4891 144.098 cv
25.0675 142.562 23.0311 141.68 20.902 141.68 cv
18.7728 141.68 16.7364 142.561 15.3148 144.098 cv
12.2566 147.403 10.2828 152.456 9.45534 156.083 cv
8.93834 158.349 8.65584 160.734 8.61234 163.208 cv
7.41664 159.792 6.74544 155.818 6.56264 151.086 cv
6.41744 147.328 6.95184 143.051 7.38124 139.613 cv
7.67134 137.291 7.90044 135.457 7.86434 134.247 cv
7.82514 132.932 7.54294 131.813 7.14064 130.802 cv
16.4394 130.802 li
18.0437 130.802 li
18.3918 129.236 li
19.4363 124.535 li
22.2496 124.535 li
22.2496 124.535 li
cp
f
5.69634 126.525 mo
5.34034 126.525 4.99564 126.335 4.81494 125.999 cv
3.68704 123.906 3.48294 122.167 3.33354 120.11 cv
3.17874 117.975 3.62894 115.966 4.63524 114.301 cv
4.92144 113.829 5.53664 113.676 6.00834 113.962 cv
6.48094 114.248 6.63284 114.862 6.34714 115.335 cv
5.55614 116.644 5.20364 118.246 5.32864 119.966 cv
5.46484 121.84 5.63384 123.303 6.57564 125.051 cv
6.83744 125.537 6.65574 126.144 6.16944 126.405 cv
6.01854 126.486 5.85644 126.525 5.69634 126.525 cv
cp
f
7.35744 113.704 mo
7.09714 113.704 6.83744 113.603 6.64114 113.402 cv
6.25584 113.006 6.26414 112.374 6.65964 111.988 cv
7.62354 111.048 8.15524 110.787 9.48344 110.378 cv
10.0097 110.213 10.5703 110.511 10.7334 111.039 cv
10.896 111.566 10.6001 112.127 10.0722 112.289 cv
8.96044 112.632 8.73394 112.759 8.05514 113.421 cv
7.86084 113.61 7.60894 113.704 7.35744 113.704 cv
cp
f
20.6884 240.939 mo
22.541 240.939 24.3105 241.704 25.5429 243.038 cv
28.4604 246.186 30.3593 251.056 31.1631 254.564 cv
31.7002 256.92 31.978 259.443 31.9887 262.064 cv
31.9887 262.792 32.5825 262.984 32.8964 262.984 cv
33.1172 262.984 33.5171 262.906 33.7119 262.386 cv
35.0781 258.735 35.8359 254.484 36.0293 249.389 cv
36.1377 246.58 35.8808 243.555 35.582 240.864 cv
31.895 240.623 28.4609 239.072 25.8315 236.444 cv
19.8921 230.505 19.8921 220.839 25.8315 214.9 cv
28.7988 211.933 32.792 210.326 36.9751 210.444 cv
35.8574 209.143 34.3735 208.116 32.5976 207.43 cv
31.4428 206.984 30.2138 206.769 28.8408 206.769 cv
26.4399 206.769 23.9458 207.443 21.5332 208.095 cv
20.688 208.322 li
19.8652 208.101 li
17.4482 207.445 14.9487 206.769 12.5415 206.769 cv
11.1689 206.769 9.94144 206.984 8.78904 207.43 cv
4.19584 209.204 1.67094 213.243 2.03614 218.234 cv
2.22654 220.831 2.46194 222.857 3.76804 225.272 cv
4.02294 225.745 4.28714 226.195 4.54684 226.638 cv
5.54594 228.34 6.57864 230.1 6.65824 232.535 cv
6.69144 233.672 6.46584 235.475 6.18014 237.757 cv
5.74514 241.23 5.20414 245.55 5.34814 249.39 cv
5.55374 254.499 6.31494 258.752 7.67534 262.387 cv
7.86764 262.907 8.26614 262.984 8.48634 262.984 cv
8.80174 262.984 9.39844 262.792 9.39844 262.068 cv
9.39844 259.492 9.67624 256.969 10.2236 254.566 cv
11.0127 251.075 12.9008 246.214 15.8335 243.038 cv
17.0664 241.704 18.8359 240.939 20.6884 240.939 cv
cp
32.8964 264.984 mo
31.4673 264.984 29.9887 263.893 29.9887 262.068 cv
29.9785 259.598 29.7177 257.222 29.2133 255.009 cv
28.4677 251.755 26.726 247.256 24.0752 244.397 cv
23.2192 243.47 21.9848 242.939 20.6884 242.939 cv
19.3921 242.939 18.1577 243.47 17.3027 244.396 cv
14.6381 247.28 12.9062 251.77 12.1743 255.008 cv
11.6591 257.267 11.3984 259.642 11.3984 262.068 cv
11.3984 263.893 9.91794 264.983 8.48684 264.984 cv
7.26364 264.984 6.23434 264.256 5.80074 263.084 cv
4.36624 259.251 3.56394 254.795 3.34964 249.467 cv
3.19924 245.463 3.75144 241.053 4.19534 237.509 cv
4.45994 235.398 4.68804 233.576 4.65914 232.597 cv
4.59624 230.673 3.77394 229.273 2.82224 227.65 cv
2.54984 227.187 2.27344 226.715 2.00784 226.221 cv
.516642 223.463 .243142 221.136 .0410423 218.38 cv
-.391058 212.464 2.60934 207.673 8.06834 205.564 cv
9.45464 205.028 10.9179 204.769 12.5415 204.769 cv
15.2148 204.769 17.8447 205.481 20.3881 206.17 cv
20.6889 206.251 li
21.0112 206.164 li
23.5498 205.478 26.1743 204.769 28.8408 204.769 cv
30.4638 204.769 31.9287 205.028 33.3178 205.564 cv
36.2505 206.698 38.5219 208.637 39.8886 211.172 cv
40.8647 212.982 li
38.8379 212.632 li
38.0991 212.504 37.3432 212.439 36.5913 212.439 cv
33.0634 212.439 29.7446 213.816 27.2456 216.314 cv
22.0859 221.474 22.0859 229.87 27.2456 235.03 cv
29.7114 237.495 32.9931 238.868 36.4868 238.897 cv
37.3696 238.903 li
37.4716 239.781 li
37.8169 242.749 38.1528 246.221 38.0278 249.465 cv
37.8266 254.777 37.0273 259.233 35.5849 263.088 cv
35.1464 264.258 34.1162 264.984 32.8964 264.984 cv
cp
f
55.2754 249.839 mo
64.0181 258.582 li
69.5151 253.078 li
60.7813 244.345 li
55.4116 242.914 li
46.7217 234.225 li
47.2354 233.531 li
51.105 228.312 50.5571 220.91 45.9614 216.314 cv
44.0059 214.358 41.5444 213.085 38.8433 212.633 cv
34.6167 211.898 30.2817 213.277 27.2456 216.314 cv
22.0859 221.474 22.0859 229.87 27.2456 235.03 cv
29.7109 237.495 32.9927 238.868 36.4868 238.897 cv
39.3789 238.903 42.1484 238.017 44.4614 236.295 cv
45.1553 235.778 li
53.8457 244.481 li
55.2754 249.839 li
cp
64.0191 261.412 mo
53.4815 250.874 li
52.0518 245.514 li
44.9448 238.398 li
42.4331 240.056 39.5347 240.891 36.4717 240.897 cv
32.4487 240.863 28.6704 239.282 25.8316 236.444 cv
19.8921 230.505 19.8921 220.839 25.8316 214.9 cv
29.3276 211.404 34.3208 209.821 39.1787 210.661 cv
42.2876 211.182 45.124 212.648 47.3755 214.9 cv
52.4614 219.985 53.2412 228.057 49.3379 234.012 cv
56.4458 241.119 li
61.8154 242.55 li
72.3423 253.076 li
64.0191 261.412 li
cp
f
36.6177 216.001 mo
34.0879 216.001 31.6035 216.986 29.7656 218.824 cv
27.9365 220.653 26.9297 223.087 26.9312 225.677 cv
26.9326 228.261 27.939 230.688 29.7647 232.509 cv
31.4585 234.203 33.7061 235.208 36.0933 235.339 cv
38.8247 235.465 41.5132 234.448 43.4517 232.51 cv
43.4517 232.51 li
47.2197 228.741 47.2192 222.602 43.4507 218.823 cv
42.4419 217.815 41.2603 217.063 39.9399 216.588 cv
38.8584 216.192 37.7334 216.001 36.6177 216.001 cv
cp
36.5869 237.351 mo
36.3872 237.351 36.1875 237.346 35.9873 237.336 cv
33.1035 237.178 30.3931 235.966 28.3516 233.924 cv
26.148 231.726 24.9331 228.797 24.9312 225.678 cv
24.9292 222.554 26.1441 219.617 28.3516 217.41 cv
31.5479 214.215 36.3662 213.152 40.6211 214.707 cv
42.2163 215.28 43.6455 216.191 44.8657 217.41 cv
49.4131 221.969 49.4126 229.376 44.8657 233.924 cv
44.8657 233.924 li
44.8657 233.924 li
42.6699 236.12 39.6807 237.351 36.5869 237.351 cv
cp
f
36.601 215.998 mo
34.0156 215.998 31.5883 217.002 29.7656 218.824 cv
27.9365 220.653 26.9297 223.087 26.9311 225.677 cv
26.9326 228.261 27.9389 230.688 29.7646 232.509 cv
31.4585 234.203 33.706 235.208 36.0932 235.339 cv
36.2573 235.347 36.4248 235.352 36.5923 235.352 cv
39.1836 235.352 41.6196 234.342 43.4516 232.51 cv
47.2197 228.741 47.2192 222.602 43.4506 218.823 cv
42.4423 217.816 41.2612 217.063 39.9404 216.588 cv
38.8667 216.195 37.7446 215.998 36.601 215.998 cv
cp
36.5923 237.352 mo
36.3906 237.352 36.1889 237.346 35.9873 237.336 cv
33.1035 237.178 30.393 235.966 28.3515 233.924 cv
26.1479 231.726 24.9331 228.797 24.9311 225.678 cv
24.9292 222.554 26.144 219.617 28.3515 217.41 cv
30.5517 215.21 33.4814 213.998 36.601 213.998 cv
37.9795 213.998 39.332 214.236 40.6215 214.707 cv
42.2173 215.281 43.6464 216.191 44.8657 217.41 cv
49.4131 221.969 49.4126 229.376 44.8657 233.924 cv
42.6562 236.134 39.7177 237.352 36.5923 237.352 cv
cp
f
29.685 227.087 mo
29.1528 227.087 28.7099 226.667 28.687 226.13 cv
28.4067 219.569 33.6338 217.511 36.437 217.339 cv
37.0053 217.318 37.4629 217.725 37.4965 218.275 cv
37.5302 218.826 37.1123 219.3 36.5625 219.335 cv
36.3086 219.353 30.4194 219.825 30.685 226.044 cv
30.7085 226.596 30.2802 227.063 29.7285 227.086 cv
29.7143 227.087 29.6997 227.087 29.685 227.087 cv
cp
f
6.32964 225.02 mo
5.97364 225.02 5.62894 224.829 5.44824 224.494 cv
4.32034 222.4 4.11624 220.661 3.96684 218.605 cv
3.81204 216.47 4.26224 214.461 5.26854 212.796 cv
5.55474 212.322 6.16894 212.17 6.64164 212.456 cv
7.11424 212.742 7.26614 213.357 6.98044 213.829 cv
6.18944 215.14 5.83694 216.74 5.96194 218.46 cv
6.09814 220.335 6.26714 221.798 7.20894 223.545 cv
7.47074 224.031 7.28904 224.638 6.80324 224.9 cv
6.65234 224.982 6.48974 225.02 6.32964 225.02 cv
cp
f
7.99074 212.199 mo
7.73044 212.199 7.47074 212.099 7.27444 211.898 cv
6.88914 211.502 6.89744 210.868 7.29294 210.484 cv
8.25784 209.543 8.78954 209.281 10.1172 208.872 cv
10.6421 208.708 11.2046 209.005 11.3672 209.533 cv
11.5298 210.062 11.2339 210.621 10.706 210.784 cv
9.59424 211.126 9.36814 211.253 8.68844 211.915 cv
8.49414 212.105 8.24224 212.199 7.99074 212.199 cv
cp
f
6.71734 328.88 mo
35.0869 328.88 li
35.4106 327.074 36.2505 325.64 37.0664 324.245 cv
37.3198 323.813 37.5776 323.372 37.8261 322.911 cv
39.1377 320.476 39.372 318.456 39.5595 315.869 cv
39.9223 310.878 37.3979 306.84 32.8076 305.066 cv
31.6504 304.62 30.4194 304.402 29.0439 304.402 cv
26.6294 304.402 24.123 305.084 21.6997 305.743 cv
20.9018 305.96 li
20.1045 305.743 li
17.6806 305.084 15.1743 304.402 12.7597 304.402 cv
11.3847 304.402 10.1538 304.62 8.99654 305.066 cv
4.40574 306.84 1.88134 310.878 2.24464 315.869 cv
2.43214 318.457 2.66654 320.477 3.97754 322.911 cv
4.22604 323.372 4.48394 323.813 4.73734 324.246 cv
5.55374 325.64 6.39354 327.074 6.71734 328.88 cv
cp
36.9004 330.88 mo
4.90434 330.88 li
4.83794 329.951 li
4.71044 328.158 3.92334 326.814 3.01174 325.257 cv
2.74654 324.804 2.47654 324.343 2.21684 323.86 cv
.720242 321.081 .448742 318.76 .249542 316.014 cv
-.180658 310.098 2.81984 305.308 8.27584 303.201 cv
9.66704 302.664 11.1338 302.402 12.7597 302.402 cv
15.4414 302.402 18.0791 303.12 20.6294 303.814 cv
20.9018 303.888 li
21.1748 303.814 li
23.7251 303.12 26.3623 302.402 29.0439 302.402 cv
30.6699 302.402 32.1372 302.664 33.5283 303.201 cv
38.9834 305.308 41.9839 310.098 41.5547 316.014 cv
41.3554 318.759 41.0839 321.08 39.5869 323.86 cv
39.3271 324.343 39.0576 324.803 38.7924 325.256 cv
37.8808 326.814 37.0937 328.157 36.9663 329.951 cv
36.9004 330.88 li
cp
f
20.9018 359.672 mo
20.1049 359.672 19.4062 359.647 18.7651 359.599 cv
18.7666 357.605 li
20.2256 357.495 21.5781 357.495 23.0371 357.605 cv
23.0385 359.599 li
22.3974 359.647 21.6987 359.672 20.9018 359.672 cv
cp
f
16.1631 363.92 mo
16.9253 365.292 18.7758 367.087 20.8969 367.087 cv
23.0234 367.087 24.8779 365.291 25.6411 363.918 cv
22.811 364.455 18.9785 364.451 16.1631 363.92 cv
cp
20.8969 369.087 mo
17.165 369.087 13.8842 365.29 13.7939 362.921 cv
13.4682 361.088 li
15.0449 361.589 li
16.5317 362.062 18.6665 362.332 20.9018 362.332 cv
23.1274 362.332 25.2627 362.061 26.7612 361.588 cv
28.3354 361.092 li
28.0102 362.921 li
27.9199 365.29 24.6342 369.087 20.8969 369.087 cv
cp
f
11.5781 338.737 mo
12.707 339.114 14.1049 339.418 15.7373 339.641 cv
18.9922 340.065 22.7822 340.066 26.0625 339.641 cv
27.7436 339.409 29.2334 339.079 30.3642 338.688 cv
30.7158 338.565 31.0371 338.432 31.3447 338.282 cv
31.4414 338.238 31.5127 338.203 31.5771 338.167 cv
32.1064 337.887 32.3632 337.658 32.4887 337.515 cv
32.6069 337.332 li
32.5786 337.219 li
32.5839 337.142 li
32.5009 337.022 li
32.5278 337.085 32.5551 337.121 32.5581 337.125 cv
32.4922 337.045 li
32.456 336.999 32.4155 336.952 32.3637 336.906 cv
32.2734 336.818 32.2094 336.776 32.1421 336.725 cv
31.9013 336.557 31.687 336.431 31.4668 336.327 cv
31.3691 336.278 31.2812 336.234 31.1919 336.193 cv
30.2348 336.193 li
30.4848 334.582 li
11.3164 334.582 li
11.5156 335.818 li
10.7798 336.118 li
10.6333 336.178 10.4868 336.247 10.3491 336.316 cv
10.2158 336.379 10.1049 336.438 10.0014 336.504 cv
9.87404 336.583 li
9.82174 336.615 9.77054 336.647 9.71974 336.677 cv
9.28324 336.988 9.21434 337.169 9.20464 337.203 cv
9.18314 337.279 li
9.18404 337.284 9.18454 337.288 9.18554 337.291 cv
9.34134 337.545 li
9.44094 337.658 9.69824 337.887 10.2104 338.158 cv
10.3696 338.242 10.5405 338.329 10.7299 338.406 cv
11.0947 338.558 li
11.1543 338.583 11.2099 338.602 11.2661 338.622 cv
11.5781 338.737 li
cp
20.9018 341.962 mo
19.0214 341.962 17.1948 341.848 15.4726 341.623 cv
13.6313 341.372 12.0522 341.021 10.7744 340.576 cv
10.5542 340.491 li
10.4751 340.463 10.3974 340.435 10.3222 340.402 cv
9.96874 340.256 li
9.72314 340.155 9.49464 340.041 9.27784 339.928 cv
8.63674 339.588 8.15724 339.23 7.80864 338.829 cv
7.72414 338.726 7.66654 338.652 7.60794 338.564 cv
7.55814 338.49 7.50784 338.41 7.46434 338.331 cv
7.39014 338.207 7.34714 338.096 7.31884 338.015 cv
7.25294 337.856 7.22994 337.714 7.21684 337.633 cv
7.19724 337.519 7.18214 337.386 7.18214 337.272 cv
7.18214 337.138 7.19584 337.003 7.22314 336.87 cv
7.23824 336.765 7.26754 336.66 7.31004 336.562 cv
7.49804 335.999 7.92434 335.491 8.60894 335.013 cv
8.95064 334.803 li
9.05074 334.738 9.16944 334.671 9.29444 334.607 cv
8.96774 332.582 li
32.8188 332.582 li
32.5044 334.608 li
32.7539 334.736 33.0097 334.892 33.2832 335.082 cv
33.4892 335.234 33.6245 335.341 33.7387 335.455 cv
33.8481 335.552 33.9677 335.685 34.0713 335.818 cv
34.1157 335.868 34.208 335.977 34.2895 336.13 cv
34.3867 336.28 34.4594 336.436 34.5063 336.592 cv
34.542 336.682 34.5673 336.776 34.5805 336.871 cv
34.6079 337.004 34.622 337.139 34.622 337.272 cv
34.622 337.384 34.6069 337.514 34.5888 337.624 cv
34.5722 337.721 34.5488 337.86 34.4843 338.017 cv
34.4555 338.099 34.4131 338.21 34.3383 338.333 cv
34.2954 338.411 34.2441 338.491 34.1919 338.569 cv
34.1406 338.647 34.0859 338.717 34.0312 338.786 cv
33.6474 339.229 33.1684 339.587 32.5307 339.926 cv
32.4316 339.981 32.3027 340.045 32.187 340.096 cv
31.8462 340.262 31.4433 340.429 31.0214 340.576 cv
29.7485 341.018 28.1699 341.37 26.3281 341.622 cv
24.5991 341.848 22.7758 341.962 20.9018 341.962 cv
cp
f
32.1406 336.723 mo
32.0131 336.634 31.8711 336.542 31.7119 336.453 cv
31.6298 336.408 31.5444 336.364 31.4555 336.321 cv
32.3173 334.517 li
32.4428 334.576 32.562 334.638 32.6753 334.7 cv
32.9087 334.827 33.1215 334.961 33.3081 335.1 cv
32.1406 336.723 li
cp
f
10.3032 343.576 mo
10.271 343.687 li
10.3047 343.702 10.3715 343.803 10.5092 343.92 cv
10.6806 344.062 li
10.831 344.179 11.0678 344.32 11.3359 344.445 cv
11.5874 344.558 li
11.8696 344.689 12.125 344.787 12.3838 344.866 cv
14.5322 345.591 17.6264 346.002 20.9018 346.002 cv
24.1777 346.002 27.2719 345.591 29.3916 344.875 cv
29.5839 344.814 29.7524 344.76 29.9043 344.688 cv
30.2983 344.534 30.5957 344.39 30.8349 344.242 cv
31.0698 344.097 li
31.1054 344.071 31.1396 344.047 31.1728 344.022 cv
31.3471 343.889 31.4277 343.789 31.4633 343.73 cv
31.5444 343.569 li
31.5415 343.562 li
31.5058 343.569 li
31.4775 343.541 31.4585 343.513 31.4355 343.487 cv
31.33 343.368 31.1767 343.237 30.9785 343.094 cv
30.9555 343.079 30.9072 343.052 30.8559 343.022 cv
30.6499 342.91 li
30.5776 342.872 30.5039 342.833 30.4272 342.797 cv
30.3515 342.762 li
30.2988 342.739 30.2451 342.716 30.1904 342.691 cv
29.2627 342.305 li
29.4609 341.035 li
28.5263 341.268 27.4785 341.465 26.3281 341.622 cv
22.8637 342.073 18.9106 342.071 15.4726 341.623 cv
14.3242 341.467 13.2778 341.271 12.3427 341.038 cv
12.4321 341.672 li
12.4321 342.34 li
11.6137 342.691 li
11.5498 342.72 11.4878 342.747 11.4257 342.772 cv
11.3755 342.798 li
11.2998 342.833 11.2275 342.872 11.1557 342.909 cv
10.9702 343.006 li
10.8994 343.051 10.8501 343.078 10.8007 343.111 cv
10.6264 343.237 10.4736 343.369 10.3715 343.484 cv
10.3452 343.514 10.3266 343.54 10.3066 343.577 cv
10.3032 343.576 li
cp
20.9018 348.002 mo
17.4174 348.002 14.0898 347.553 11.7714 346.77 cv
11.4521 346.673 11.1123 346.542 10.7612 346.379 cv
10.5102 346.268 li
10.0776 346.065 9.71584 345.847 9.41264 345.608 cv
9.27984 345.503 9.21634 345.45 9.15824 345.393 cv
8.79544 345.088 8.51364 344.682 8.37644 344.237 cv
8.31204 344.023 8.28174 343.827 8.28174 343.632 cv
8.28174 343.469 8.29984 343.32 8.33884 343.172 cv
8.34574 343.134 li
8.39404 342.916 8.48094 342.743 8.55954 342.604 cv
8.64944 342.441 8.75344 342.294 8.87554 342.157 cv
9.07664 341.93 9.33354 341.704 9.65874 341.47 cv
9.76754 341.397 9.85154 341.347 9.94094 341.294 cv
10.2197 341.143 li
10.2544 341.124 10.289 341.106 10.3247 341.087 cv
9.84714 338.138 li
11.4301 338.688 li
12.5835 339.088 14.0327 339.408 15.7373 339.641 cv
18.9922 340.065 22.7822 340.066 26.0625 339.641 cv
27.7436 339.409 29.2334 339.079 30.3642 338.688 cv
31.9365 338.142 li
31.477 341.086 li
31.5136 341.106 31.5503 341.124 31.5864 341.144 cv
31.8652 341.295 li
31.9536 341.347 32.0371 341.397 32.1206 341.453 cv
32.4687 341.702 32.7256 341.928 32.9306 342.159 cv
33.0483 342.291 33.1513 342.438 33.2446 342.604 cv
33.3242 342.747 33.4101 342.919 33.458 343.134 cv
33.479 343.228 li
33.4795 343.232 33.4804 343.234 33.4809 343.237 cv
33.4819 343.241 li
33.5092 343.366 33.5219 343.494 33.5219 343.632 cv
33.5219 343.828 33.4931 344.017 33.4311 344.227 cv
33.2666 344.611 li
33.2319 344.677 33.1958 344.739 33.1513 344.802 cv
32.9677 345.095 32.7143 345.361 32.3779 345.618 cv
32.2256 345.732 32.0678 345.841 31.8862 345.949 cv
31.6323 346.092 li
31.3462 346.25 31.0302 346.396 30.6894 346.526 cv
30.5317 346.604 30.2802 346.69 30.0161 346.775 cv
27.7143 347.553 24.3867 348.002 20.9018 348.002 cv
cp
f
10.3715 343.484 mo
8.83644 342.204 li
9.05174 341.93 9.33304 341.682 9.69534 341.445 cv
10.8256 343.094 li
10.6264 343.237 10.4736 343.369 10.3715 343.484 cv
cp
f
31.4336 343.485 mo
31.33 343.368 31.1767 343.237 30.9785 343.094 cv
32.1093 341.445 li
32.4707 341.682 32.7509 341.93 32.9668 342.202 cv
31.4336 343.485 li
cp
f
11.289 350.089 mo
11.3628 350.187 11.4135 350.239 11.4677 350.293 cv
11.602 350.414 11.831 350.564 12.1181 350.707 cv
12.3691 350.827 li
12.6352 350.952 12.9907 351.088 13.4048 351.219 cv
15.309 351.818 18.0429 352.162 20.9018 352.162 cv
23.7612 352.162 26.4951 351.818 28.4018 351.218 cv
28.6215 351.147 28.8369 351.076 29.0341 350.996 cv
29.2334 350.912 li
29.3095 350.881 29.3847 350.851 29.457 350.816 cv
29.6845 350.707 li
29.8525 350.627 29.9829 350.548 30.0991 350.47 cv
30.309 350.31 li
30.4218 350.22 30.457 350.167 30.4609 350.161 cv
30.5112 350.073 li
30.479 350.02 li
30.2348 349.789 li
30.166 349.736 29.9926 349.622 29.7675 349.497 cv
29.5239 349.361 29.2163 349.238 28.9751 349.147 cv
28.2168 348.857 li
28.4785 347.21 li
26.3369 347.719 23.6689 348.002 20.9018 348.002 cv
18.1352 348.002 15.4673 347.719 13.3252 347.21 cv
13.5883 348.864 li
12.8198 349.15 li
12.4931 349.271 12.2446 349.381 12.0385 349.496 cv
11.811 349.622 11.6377 349.736 11.5063 349.847 cv
11.289 350.089 li
cp
20.9018 354.162 mo
17.8027 354.162 14.9262 353.794 12.8017 353.126 cv
12.3017 352.967 11.8632 352.8 11.4961 352.627 cv
11.2246 352.496 li
10.7666 352.268 10.3945 352.021 10.0879 351.74 cv
9.91214 351.568 9.78374 351.42 9.68314 351.276 cv
9.58154 351.13 9.45854 350.936 9.38474 350.693 cv
9.36964 350.663 9.33104 350.538 9.31054 350.435 cv
9.28174 350.294 9.28174 350.161 9.28174 350.082 cv
9.28174 349.891 9.30814 349.716 9.36134 349.55 cv
9.40774 349.374 9.48294 349.203 9.58544 349.04 cv
9.63524 348.946 9.73144 348.811 9.85794 348.665 cv
9.89014 348.619 9.97214 348.534 10.0708 348.451 cv
10.2173 348.318 li
10.4492 348.122 10.727 347.936 11.0673 347.747 cv
11.1606 347.695 11.2583 347.645 11.3613 347.595 cv
10.8442 344.346 li
12.4121 344.875 li
14.5322 345.591 17.6264 346.002 20.9018 346.002 cv
24.1777 346.002 27.2719 345.591 29.3916 344.875 cv
30.9594 344.346 li
30.4423 347.596 li
30.542 347.644 30.6411 347.694 30.7387 347.748 cv
31.0766 347.936 31.3545 348.122 31.5864 348.318 cv
31.7221 348.443 li
31.8281 348.529 31.9194 348.625 31.9941 348.726 cv
32.0688 348.806 32.1655 348.94 32.247 349.088 cv
32.3247 349.211 32.396 349.375 32.4419 349.548 cv
32.4956 349.714 32.5219 349.89 32.5219 350.082 cv
32.5219 350.294 32.4917 350.486 32.4297 350.671 cv
32.3564 350.891 32.249 351.1 32.1113 351.289 cv
32 351.466 31.8086 351.671 31.5576 351.872 cv
31.5063 351.913 31.4609 351.949 31.4179 351.982 cv
31.2583 352.1 li
31.0468 352.244 30.8217 352.381 30.5605 352.505 cv
30.3291 352.616 li
30.2055 352.675 30.101 352.718 29.9941 352.762 cv
29.8149 352.837 li
29.5468 352.947 29.2827 353.036 29.0073 353.124 cv
26.8784 353.794 24.0014 354.162 20.9018 354.162 cv
cp
f
11.5063 349.847 mo
10.2173 348.318 li
10.4839 348.093 10.7783 347.897 11.0923 347.733 cv
12.0361 349.497 li
11.812 349.621 11.6396 349.734 11.5088 349.845 cv
11.5078 349.846 11.5073 349.846 11.5063 349.847 cv
cp
f
30.2973 349.847 mo
30.2964 349.846 30.2959 349.846 30.2949 349.845 cv
30.164 349.734 29.9917 349.621 29.7675 349.497 cv
30.7114 347.733 li
31.0254 347.897 31.3198 348.093 31.5864 348.318 cv
30.2973 349.847 li
cp
f
20.9018 357.522 mo
21.5673 357.522 22.2617 357.548 22.9668 357.6 cv
24.7519 357.483 26.3222 357.223 27.5112 356.848 cv
27.7104 356.791 27.8657 356.743 28.0039 356.687 cv
28.3164 356.561 28.5981 356.44 28.8349 356.308 cv
29.1601 356.132 29.3007 355.989 29.3554 355.92 cv
29.3281 355.884 29.2788 355.831 29.1909 355.764 cv
29.1435 355.729 29.0937 355.689 29.0307 355.651 cv
28.9023 355.565 28.83 355.527 28.7588 355.488 cv
28.6479 355.429 28.5434 355.38 28.4306 355.332 cv
28.3291 355.283 li
28.2719 355.261 28.1562 355.217 28.0312 355.172 cv
27.2539 354.89 li
27.4721 353.528 li
25.582 353.94 23.309 354.162 20.9018 354.162 cv
18.4917 354.162 16.2163 353.94 14.3242 353.526 cv
14.5361 354.892 li
13.7627 355.172 li
13.6377 355.217 13.5219 355.261 13.415 355.306 cv
13.2627 355.375 13.1684 355.418 13.082 355.468 cv
12.9199 355.548 12.8286 355.602 12.7627 355.651 cv
12.435 355.932 li
12.4682 355.963 12.5991 356.113 12.9492 356.303 cv
13.1958 356.436 13.4819 356.559 13.7944 356.685 cv
13.8935 356.723 14.0107 356.762 14.1318 356.803 cv
14.3193 356.866 li
15.5024 357.227 17.0752 357.483 18.8369 357.6 cv
19.542 357.548 20.2363 357.522 20.9018 357.522 cv
cp
22.956 359.604 mo
22.8867 359.599 li
21.5283 359.497 20.2754 359.497 18.917 359.599 cv
18.8476 359.604 li
18.7788 359.6 li
16.8364 359.477 15.0805 359.19 13.7002 358.768 cv
13.4912 358.697 li
13.3432 358.647 13.2002 358.599 13.063 358.546 cv
12.6616 358.385 12.3081 358.229 11.9985 358.063 cv
11.1596 357.608 10.6479 357.044 10.4751 356.387 cv
10.435 356.247 10.4121 356.084 10.4121 355.922 cv
10.4121 355.472 10.5756 355.038 10.8857 354.669 cv
10.8813 354.667 10.9321 354.608 11.0151 354.525 cv
11.0586 354.473 11.1631 354.354 11.3154 354.238 cv
11.4282 354.138 11.5385 354.063 11.6264 354.007 cv
11.7358 353.921 11.9477 353.795 12.1572 353.696 cv
12.1933 353.674 12.248 353.645 12.3139 353.612 cv
11.8667 350.735 li
13.4023 351.218 li
15.309 351.818 18.0429 352.162 20.9018 352.162 cv
23.7612 352.162 26.4951 351.818 28.4018 351.218 cv
29.9458 350.733 li
29.4839 353.613 li
29.5517 353.647 29.6215 353.682 29.6919 353.719 cv
29.8589 353.811 29.9931 353.887 30.1167 353.974 cv
30.1831 354.01 30.289 354.087 30.3921 354.165 cv
30.7544 354.443 31.0078 354.738 31.1665 355.055 cv
31.1806 355.084 31.1997 355.121 31.2187 355.166 cv
31.2563 355.223 li
31.3193 355.46 li
31.3589 355.597 31.3818 355.76 31.3818 355.922 cv
31.3818 356.036 31.3691 356.136 31.3496 356.248 cv
31.2431 356.772 30.895 357.468 29.7973 358.062 cv
29.5337 358.208 29.2085 358.358 28.7544 358.54 cv
28.5581 358.62 28.3335 358.693 28.0849 358.764 cv
26.7568 359.183 24.9975 359.475 23.0249 359.6 cv
22.956 359.604 li
cp
f
13.08 358.552 mo
12.6318 358.389 12.2661 358.223 11.9619 358.042 cv
12.9458 356.301 li
13.1958 356.436 13.4819 356.559 13.7944 356.685 cv
13.08 358.552 li
cp
f
20.9018 359.672 mo
20.1049 359.672 19.4062 359.647 18.7651 359.599 cv
18.7666 357.605 li
20.2256 357.495 21.5781 357.495 23.0371 357.605 cv
23.0385 359.599 li
22.3974 359.647 21.6987 359.672 20.9018 359.672 cv
cp
f
28.7231 358.552 mo
28.0092 356.685 li
28.3164 356.561 28.5981 356.44 28.8349 356.308 cv
29.832 358.042 li
29.5161 358.229 29.1538 358.396 28.7231 358.552 cv
cp
f
15.2065 361.639 mo
16.6845 362.08 18.7465 362.332 20.9018 362.332 cv
23.0576 362.332 25.1294 362.077 26.6191 361.632 cv
26.7085 361.597 li
26.768 361.574 26.8276 361.555 26.8877 361.536 cv
27.1806 361.436 li
27.7173 361.234 27.9902 361.042 28.1147 360.933 cv
28.0512 360.879 28.0048 360.846 27.9531 360.811 cv
27.8989 360.775 27.8427 360.735 27.7793 360.703 cv
27.6855 360.651 li
27.6548 360.633 27.622 360.611 27.5849 360.595 cv
27.438 360.523 27.3198 360.477 27.1933 360.43 cv
26.4253 360.144 li
26.5844 359.146 li
25.5263 359.363 24.3217 359.518 23.0249 359.6 cv
22.3979 359.647 21.6987 359.672 20.9018 359.672 cv
20.1049 359.672 19.4057 359.647 18.7651 359.599 cv
17.4878 359.518 16.2866 359.364 15.2197 359.147 cv
15.3798 360.144 li
14.6108 360.43 li
14.4843 360.477 14.3662 360.523 14.2553 360.578 cv
14.1826 360.611 14.1499 360.632 14.1196 360.65 cv
14.0258 360.702 li
13.9775 360.728 13.9277 360.755 13.8886 360.784 cv
13.7964 360.848 13.747 360.883 13.7041 360.92 cv
13.6992 360.924 13.6943 360.928 13.6894 360.932 cv
13.8076 361.037 14.0713 361.222 14.6338 361.44 cv
14.8452 361.513 li
14.9756 361.555 15.0356 361.574 15.0957 361.597 cv
15.2065 361.639 li
cp
20.9018 364.332 mo
18.4697 364.332 16.1142 364.027 14.4394 363.495 cv
13.7422 363.237 li
12.8149 362.858 12.1909 362.395 11.8686 361.834 cv
11.747 361.598 li
11.6518 361.375 11.6118 361.163 11.6118 360.932 cv
11.6118 360.772 11.6338 360.622 11.6801 360.458 cv
11.8047 360.044 12.06 359.679 12.4228 359.385 cv
12.497 359.32 12.6079 359.236 12.7329 359.152 cv
12.8164 359.089 12.9668 358.997 13.1176 358.921 cv
13.1294 358.913 13.1416 358.906 13.1543 358.9 cv
12.7505 356.387 li
14.2841 356.856 li
15.5175 357.232 17.1157 357.49 18.9048 357.604 cv
19.5078 357.65 20.1567 357.672 20.9018 357.672 cv
21.6469 357.672 22.2959 357.65 22.8852 357.605 cv
24.7124 357.489 26.3071 357.228 27.5112 356.848 cv
29.0547 356.361 li
28.6494 358.897 li
28.6645 358.906 28.6792 358.915 28.6938 358.924 cv
28.8169 358.987 28.9375 359.065 29.0571 359.143 cv
29.1972 359.237 29.309 359.321 29.4072 359.406 cv
29.7441 359.679 29.9995 360.045 30.1196 360.443 cv
30.1704 360.62 30.1919 360.772 30.1919 360.932 cv
30.1919 361.308 30.0664 361.678 29.8296 362.002 cv
29.769 362.105 29.6328 362.262 29.4765 362.397 cv
29.146 362.706 28.664 362.995 28.062 363.238 cv
28.062 363.266 li
27.3628 363.496 li
25.6777 364.027 23.3227 364.332 20.9018 364.332 cv
cp
f
15.7422 363.98 mo
14.1582 363.392 li
14.4692 362.542 li
13.7422 362.532 li
14.4726 362.532 li
14.8457 361.513 li
14.9756 361.555 15.0356 361.574 15.0957 361.597 cv
15.7422 361.841 li
15.7422 363.98 li
cp
f
20.9018 359.672 mo
20.1049 359.672 19.4062 359.647 18.7651 359.599 cv
18.7666 357.605 li
20.2256 357.495 21.5781 357.495 23.0371 357.605 cv
23.0385 359.599 li
22.3974 359.647 21.6987 359.672 20.9018 359.672 cv
cp
f
26.062 363.989 mo
26.062 361.841 li
26.7085 361.597 li
26.768 361.574 26.8276 361.555 26.8877 361.536 cv
26.8886 361.539 li
26.956 361.514 li
27.331 362.532 li
28.062 362.532 li
27.3339 362.539 li
27.6474 363.391 li
26.062 363.989 li
cp
f
6.20024 322.906 mo
5.84424 322.906 5.49954 322.716 5.31884 322.381 cv
4.19094 320.286 3.98684 318.547 3.83744 316.491 cv
3.68264 314.356 4.13284 312.347 5.13914 310.682 cv
5.42484 310.21 6.04104 310.059 6.51224 310.344 cv
6.98484 310.629 7.13674 311.244 6.85104 311.717 cv
6.06004 313.026 5.70754 314.626 5.83254 316.347 cv
5.96874 318.222 6.13774 319.684 7.07964 321.432 cv
7.34134 321.918 7.15964 322.525 6.67334 322.787 cv
6.52244 322.868 6.36034 322.906 6.20024 322.906 cv
cp
f
7.86134 310.085 mo
7.60104 310.085 7.34084 309.983 7.14454 309.782 cv
6.75974 309.387 6.76804 308.754 7.16354 308.368 cv
8.12894 307.429 8.66014 307.168 9.98734 306.759 cv
10.5136 306.595 11.0742 306.892 11.2373 307.42 cv
11.3999 307.948 11.104 308.508 10.5761 308.671 cv
9.46484 309.014 9.23824 309.14 8.55864 309.802 cv
8.36424 309.991 8.11284 310.085 7.86134 310.085 cv
cp
f
284.853 11.3272 mo
285.088 15.817 li
287.402 59.9459 314.236 68.8477 315.377 69.2052 cv
316.574 69.5802 li
317.77 69.2052 li
318.912 68.8477 345.746 59.9459 348.059 15.8194 cv
348.294 11.3336 li
343.812 11.6183 li
342.937 11.6734 342.078 11.7017 341.258 11.7017 cv
332.513 11.7017 324.373 8.8751 319.482 4.1412 cv
318.319 3.0147 li
314.877 3.0147 li
313.714 4.1407 li
308.824 8.8751 300.683 11.7017 291.938 11.7017 cv
291.1 11.7017 290.226 11.6729 289.339 11.6158 cv
284.853 11.3272 li
cp
316.574 71.6759 mo
314.78 71.1134 li
313.584 70.7393 285.477 61.4234 283.09 15.9215 cv
282.738 9.1866 li
289.468 9.6197 li
290.312 9.6744 291.143 9.7017 291.938 9.7017 cv
300.176 9.7017 307.796 7.0855 312.324 2.7037 cv
314.069 1.0147 li
319.127 1.0147 li
320.873 2.7042 li
325.4 7.0855 333.02 9.7017 341.258 9.7017 cv
342.036 9.7017 342.852 9.6749 343.685 9.6222 cv
350.41 9.1954 li
350.057 15.9239 li
347.67 61.4234 319.563 70.7393 318.368 71.1134 cv
316.574 71.6759 li
cp
f
290.145 16.6646 mo
292.501 53.8766 313.778 63.253 316.574 64.3253 cv
319.37 63.253 340.646 53.8761 343.002 16.6661 cv
342.409 16.69 341.826 16.7017 341.258 16.7017 cv
331.581 16.7017 322.437 13.5694 316.598 8.2887 cv
310.759 13.5694 301.615 16.7017 291.938 16.7017 cv
291.353 16.7017 290.753 16.6895 290.145 16.6646 cv
cp
316.574 66.4361 mo
316.275 66.3424 li
316.015 66.2613 290.29 57.7208 288.084 15.6598 cv
288.025 14.5372 li
289.147 14.6095 li
290.097 14.6705 291.036 14.7017 291.938 14.7017 cv
301.443 14.7017 310.364 11.5597 315.801 6.2965 cv
316.092 6.0147 li
317.104 6.0147 li
317.395 6.2965 li
322.833 11.5597 331.753 14.7017 341.258 14.7017 cv
342.139 14.7017 343.062 14.6715 344.001 14.6119 cv
345.123 14.5411 li
345.064 15.6622 li
342.858 57.7208 317.132 66.2613 316.873 66.3424 cv
316.574 66.4361 li
cp
f
316.574 41.1388 mo
317.757 41.1388 318.89 41.6285 319.68 42.482 cv
321.419 44.3629 322.544 47.2437 323.016 49.3126 cv
323.336 50.7164 323.5 52.1998 323.501 53.7232 cv
323.501 53.7706 323.501 53.8292 323.601 53.8292 cv
323.602 53.8292 323.602 53.8292 323.602 53.8292 cv
323.633 53.8292 323.648 53.8287 323.672 53.7623 cv
324.441 51.7061 324.87 49.3004 324.981 46.4078 cv
325.065 44.2325 324.756 41.7633 324.508 39.7789 cv
324.342 38.4483 324.21 37.3975 324.231 36.7125 cv
324.277 35.1988 324.901 34.1388 325.504 33.1134 cv
325.651 32.8639 325.801 32.6099 325.945 32.3433 cv
326.659 31.0172 326.789 29.8971 326.893 28.46 cv
327.09 25.7428 325.771 23.6314 323.275 22.6676 cv
322.659 22.4293 322 22.3136 321.261 22.3136 cv
319.927 22.3136 318.511 22.6988 317.142 23.0714 cv
316.574 23.2257 li
316.005 23.0714 li
314.636 22.6988 313.22 22.3136 311.886 22.3136 cv
311.148 22.3136 310.489 22.4293 309.873 22.6671 cv
307.376 23.6314 306.058 25.7428 306.255 28.4605 cv
306.36 29.8971 306.49 31.0172 307.205 32.3438 cv
307.347 32.6099 307.498 32.8639 307.644 33.1134 cv
308.248 34.1388 308.872 35.1988 308.917 36.7125 cv
308.938 37.3975 308.806 38.4483 308.64 39.7794 cv
308.392 41.7633 308.084 44.2325 308.167 46.4078 cv
308.279 49.3028 308.708 51.7086 309.476 53.7623 cv
309.649 53.8287 309.648 53.7696 309.648 53.7227 cv
309.649 52.1998 309.812 50.7164 310.132 49.3131 cv
310.603 47.2447 311.727 44.3639 313.468 42.482 cv
314.258 41.6285 315.391 41.1388 316.574 41.1388 cv
cp
323.601 55.8292 mo
323.601 55.8292 li
322.423 55.8292 321.501 54.9044 321.501 53.7237 cv
321.5 52.3502 321.354 51.0157 321.067 49.7574 cv
320.652 47.941 319.684 45.4322 318.211 43.8404 cv
317.387 42.9493 315.761 42.9483 314.937 43.8404 cv
313.463 45.4327 312.496 47.941 312.082 49.7574 cv
311.794 51.0157 311.649 52.3502 311.648 53.7242 cv
311.647 54.9049 310.724 55.8292 309.546 55.8292 cv
308.663 55.8292 307.917 55.3058 307.603 54.463 cv
306.758 52.2066 306.289 49.5968 306.169 46.4849 cv
306.079 44.1466 306.399 41.5875 306.656 39.5313 cv
306.805 38.3355 306.934 37.3028 306.917 36.7721 cv
306.888 35.7711 306.461 35.046 305.92 34.128 cv
305.761 33.857 305.599 33.5816 305.444 33.2926 cv
304.542 31.6192 304.379 30.2379 304.261 28.6056 cv
304 25.003 305.828 22.0855 309.152 20.8018 cv
310.002 20.4732 310.897 20.3136 311.886 20.3136 cv
313.488 20.3136 315.035 20.7345 316.531 21.1417 cv
316.574 21.1534 li
316.618 21.1417 li
318.113 20.7345 319.66 20.3136 321.261 20.3136 cv
322.251 20.3136 323.145 20.4732 323.996 20.8018 cv
327.32 22.0855 329.149 25.0025 328.887 28.6051 cv
328.769 30.2379 328.606 31.6192 327.706 33.2921 cv
327.549 33.5816 327.387 33.857 327.228 34.128 cv
326.687 35.046 326.26 35.7711 326.231 36.7721 cv
326.214 37.3028 326.343 38.3355 326.493 39.5313 cv
326.75 41.5875 327.07 44.1466 326.979 46.4849 cv
326.86 49.5938 326.39 52.2037 325.545 54.463 cv
325.23 55.3058 324.485 55.8292 323.601 55.8292 cv
cp
f
309.342 32.5489 mo
308.987 32.5489 308.642 32.359 308.461 32.0235 cv
307.864 30.9151 307.753 29.9757 307.68 28.9498 cv
307.506 26.567 308.767 24.5582 310.968 23.7081 cv
311.481 23.5089 312.062 23.7652 312.261 24.2804 cv
312.46 24.7955 312.204 25.3746 311.689 25.5733 cv
310.298 26.1104 309.564 27.2887 309.674 28.8058 cv
309.738 29.6803 309.809 30.3106 310.221 31.0743 cv
310.484 31.5601 310.302 32.1671 309.816 32.4293 cv
309.666 32.5103 309.502 32.5489 309.342 32.5489 cv
cp
f
119.9 241.591 mo
121.751 241.591 123.52 242.355 124.753 243.687 cv
127.677 246.847 129.572 251.715 130.372 255.216 cv
130.915 257.599 131.192 260.121 131.193 262.712 cv
131.194 263.441 131.791 263.634 132.106 263.634 cv
132.106 263.634 li
132.327 263.634 132.726 263.557 132.92 263.039 cv
134.282 259.396 135.041 255.142 135.239 250.034 cv
135.387 246.195 134.847 241.873 134.413 238.4 cv
134.128 236.12 133.903 234.32 133.937 233.188 cv
134.01 230.748 135.045 228.989 136.046 227.288 cv
136.306 226.847 136.57 226.398 136.824 225.926 cv
138.135 223.493 138.37 221.473 138.558 218.885 cv
138.92 213.894 136.396 209.856 131.806 208.082 cv
130.648 207.636 129.417 207.418 128.042 207.418 cv
125.627 207.418 123.122 208.1 120.698 208.759 cv
119.9 208.976 li
119.129 208.767 li
116.7 208.107 114.187 207.423 111.766 207.423 cv
111.195 207.423 110.654 207.46 110.131 207.535 cv
110.299 208.82 110.017 210.481 108.482 212.313 cv
107.754 213.182 106.666 213.197 105.872 213.21 cv
105.45 213.216 104.924 213.224 104.788 213.378 cv
104.743 213.429 104.523 213.744 104.649 214.93 cv
104.787 216.228 104.32 217.051 103.905 217.512 cv
103.288 218.198 102.34 218.587 101.226 218.614 cv
101.23 218.706 101.235 218.796 101.242 218.885 cv
101.43 221.473 101.665 223.493 102.976 225.926 cv
103.23 226.398 103.494 226.847 103.754 227.288 cv
104.755 228.989 105.79 230.748 105.863 233.187 cv
105.896 234.32 105.672 236.12 105.387 238.4 cv
104.953 241.873 104.413 246.195 104.561 250.034 cv
104.758 255.14 105.517 259.394 106.88 263.039 cv
107.074 263.557 107.473 263.634 107.693 263.634 cv
108.009 263.634 108.606 263.441 108.606 262.712 cv
108.608 260.122 108.884 257.6 109.428 255.216 cv
110.227 251.715 112.123 246.848 115.047 243.688 cv
116.28 242.355 118.049 241.591 119.9 241.591 cv
cp
132.106 265.634 mo
132.106 265.634 li
130.675 265.634 129.195 264.541 129.193 262.714 cv
129.192 260.272 128.932 257.898 128.421 255.661 cv
127.68 252.411 125.941 247.916 123.285 245.045 cv
122.43 244.121 121.196 243.591 119.9 243.591 cv
118.604 243.591 117.37 244.121 116.515 245.046 cv
113.858 247.917 112.119 252.412 111.378 255.661 cv
110.867 257.9 110.608 260.272 110.606 262.714 cv
110.605 264.542 109.124 265.634 107.693 265.634 cv
106.473 265.634 105.444 264.908 105.007 263.74 cv
103.567 259.892 102.768 255.434 102.563 250.111 cv
102.408 246.109 102.959 241.697 103.402 238.152 cv
103.666 236.045 103.893 234.226 103.864 233.246 cv
103.806 231.32 102.983 229.922 102.03 228.303 cv
101.758 227.84 101.481 227.368 101.215 226.875 cv
99.7187 224.098 99.4467 221.777 99.247 219.029 cv
99.2133 218.562 99.2055 218.076 99.2221 217.502 cv
99.2563 216.332 li
100.407 216.549 li
101.271 216.713 102.069 216.562 102.418 216.175 cv
102.627 215.943 102.708 215.595 102.66 215.141 cv
102.506 213.693 102.707 212.711 103.291 212.052 cv
104.012 211.237 105.026 211.222 105.841 211.21 cv
106.295 211.203 106.809 211.195 106.949 211.027 cv
108.088 209.668 108.433 208.346 107.975 207.098 cv
107.59 206.049 li
108.675 205.782 li
109.658 205.54 110.669 205.423 111.766 205.423 cv
114.454 205.423 117.098 206.142 119.654 206.837 cv
119.9 206.903 li
120.173 206.829 li
122.723 206.136 125.36 205.418 128.042 205.418 cv
129.668 205.418 131.135 205.68 132.526 206.217 cv
137.981 208.323 140.982 213.113 140.553 219.029 cv
140.353 221.777 140.081 224.098 138.585 226.875 cv
138.319 227.368 138.042 227.84 137.77 228.303 cv
136.817 229.922 135.994 231.32 135.936 233.247 cv
135.907 234.226 136.134 236.045 136.397 238.152 cv
136.84 241.697 137.392 246.109 137.237 250.112 cv
137.031 255.436 136.231 259.894 134.793 263.74 cv
134.355 264.908 133.326 265.634 132.106 265.634 cv
cp
f
106.919 228.453 mo
106.608 228.453 106.301 228.309 106.106 228.036 cv
104.443 225.717 103.933 223.67 103.438 221.235 cv
103.353 220.816 103.29 220.381 103.239 219.867 cv
103.185 219.318 103.587 218.828 104.137 218.775 cv
104.698 218.731 105.176 219.123 105.23 219.672 cv
105.267 220.057 105.318 220.443 105.398 220.837 cv
105.859 223.107 106.296 224.869 107.731 226.87 cv
108.053 227.319 107.95 227.944 107.501 228.266 cv
107.325 228.393 107.121 228.453 106.919 228.453 cv
cp
f
113.437 332.457 mo
116.044 332.457 118.506 333.471 120.349 335.272 cv
122.191 333.472 124.653 332.457 127.26 332.457 cv
129.6 332.457 131.869 333.299 133.646 334.799 cv
135.197 332.883 137.363 331.769 139.626 331.769 cv
141.128 331.769 142.604 332.259 143.884 333.169 cv
145.246 331.051 147.254 329.819 149.432 329.819 cv
150.731 329.819 151.969 330.246 153.058 331.063 cv
153.058 319.674 li
86.6733 319.674 li
86.6733 331.675 li
87.8271 330.369 89.2075 329.819 91.2002 329.819 cv
93.4096 329.819 95.4336 331.077 96.7959 333.242 cv
98.0986 332.285 99.6098 331.769 101.157 331.769 cv
103.437 331.769 105.551 332.843 107.103 334.755 cv
108.873 333.283 111.124 332.457 113.437 332.457 cv
cp
120.349 338.341 mo
119.572 337.386 li
118.061 335.525 115.825 334.457 113.437 334.457 cv
111.239 334.457 109.195 335.343 107.683 336.95 cv
106.795 337.894 li
106.107 336.796 li
104.901 334.872 103.097 333.769 101.157 333.769 cv
99.7119 333.769 98.3496 334.372 97.2173 335.513 cv
96.2016 336.536 li
95.5986 335.227 li
94.6176 333.093 92.9731 331.819 91.2002 331.819 cv
89.6953 331.819 88.6821 332.12 87.6391 333.706 cv
87.3359 334.166 86.83 334.441 86.2851 334.441 cv
86.2851 334.441 li
85.3813 334.441 84.6733 333.734 84.6733 332.833 cv
84.6733 317.674 li
155.058 317.674 li
155.058 331.957 li
155.058 332.832 154.345 333.543 153.469 333.543 cv
153.055 333.543 152.661 333.383 152.359 333.092 cv
151.498 332.259 150.486 331.819 149.432 331.819 cv
147.663 331.819 146.075 333.028 145.075 335.137 cv
144.477 336.398 li
143.475 335.425 li
142.359 334.342 141.028 333.769 139.626 333.769 cv
137.666 333.769 135.85 334.89 134.644 336.845 cv
133.952 337.965 li
133.058 336.998 li
131.564 335.383 129.451 334.457 127.26 334.457 cv
124.872 334.457 122.636 335.525 121.125 337.385 cv
120.349 338.341 li
cp
f
107.925 343.301 mo
107.925 349.884 li
107.925 350.122 108.119 350.315 108.357 350.315 cv
118.433 350.315 li
118.672 350.315 118.866 350.122 118.866 349.884 cv
118.85 343.001 li
118.702 340.092 116.306 337.813 113.395 337.813 cv
110.484 337.813 108.088 340.092 107.94 343.001 cv
107.925 343.301 li
cp
118.433 352.315 mo
108.357 352.315 li
107.016 352.315 105.925 351.225 105.925 349.884 cv
105.925 341.95 li
106.051 341.95 li
106.681 338.44 109.741 335.813 113.395 335.813 cv
117.049 335.813 120.109 338.44 120.739 341.95 cv
120.849 341.95 li
120.866 342.95 li
120.866 349.884 li
120.866 351.225 119.774 352.315 118.433 352.315 cv
cp
f
121.748 343.301 mo
121.748 349.884 li
121.748 350.122 121.942 350.315 122.18 350.315 cv
132.256 350.315 li
132.495 350.315 132.689 350.122 132.689 349.884 cv
132.673 343.001 li
132.525 340.092 130.129 337.813 127.218 337.813 cv
124.308 337.813 121.912 340.092 121.763 343.001 cv
121.748 343.301 li
cp
132.256 352.315 mo
122.18 352.315 li
120.839 352.315 119.748 351.225 119.748 349.884 cv
119.748 341.95 li
119.875 341.95 li
120.504 338.44 123.564 335.813 127.218 335.813 cv
130.872 335.813 133.932 338.44 134.562 341.95 cv
134.672 341.95 li
134.689 342.95 li
134.689 349.884 li
134.689 351.225 133.598 352.315 132.256 352.315 cv
cp
f
135.721 342.599 mo
135.721 349.195 li
135.721 349.462 135.831 349.618 135.871 349.646 cv
143.316 349.628 li
143.364 349.576 143.447 349.428 143.447 349.195 cv
143.435 342.3 li
143.326 339.446 141.598 337.124 139.584 337.124 cv
137.57 337.124 135.842 339.446 135.732 342.3 cv
135.721 342.599 li
cp
143.371 351.628 mo
135.797 351.628 li
134.633 351.628 133.721 350.56 133.721 349.195 cv
133.721 341.262 li
133.82 341.262 li
134.313 337.752 136.713 335.124 139.584 335.124 cv
142.455 335.124 144.856 337.752 145.349 341.262 cv
145.435 341.262 li
145.447 342.262 li
145.447 349.195 li
145.447 350.56 144.535 351.628 143.371 351.628 cv
cp
f
146.579 347.678 mo
152.202 347.678 li
152.238 347.592 152.279 347.446 152.279 347.245 cv
152.269 340.314 li
152.174 337.251 150.704 335.175 149.39 335.175 cv
148.076 335.175 146.606 337.251 146.512 340.342 cv
146.502 340.662 li
146.502 347.245 li
146.502 347.446 146.542 347.592 146.579 347.678 cv
cp
152.418 349.678 mo
146.363 349.678 li
145.302 349.678 144.502 348.632 144.502 347.245 cv
144.502 339.312 li
144.582 339.312 li
144.982 335.752 146.95 333.175 149.39 333.175 cv
152.046 333.175 154.144 336.23 154.268 340.281 cv
154.279 347.243 li
154.279 348.632 153.479 349.678 152.418 349.678 cv
cp
f
88.3471 347.678 mo
93.9702 347.678 li
94.0063 347.591 94.0468 347.446 94.0468 347.245 cv
94.0371 340.342 li
93.9423 337.251 92.4726 335.175 91.1587 335.175 cv
89.8452 335.175 88.375 337.251 88.2798 340.342 cv
88.2705 340.645 li
88.2705 347.245 li
88.2705 347.446 88.311 347.591 88.3471 347.678 cv
cp
94.1865 349.678 mo
88.1308 349.678 li
87.0703 349.678 86.2705 348.632 86.2705 347.245 cv
86.2705 339.312 li
86.3496 339.312 li
86.7505 335.752 88.7187 333.175 91.1587 333.175 cv
93.5991 333.175 95.5669 335.752 95.9673 339.312 cv
96.0366 339.312 li
96.0468 340.312 li
96.0468 347.245 li
96.0468 348.632 95.247 349.678 94.1865 349.678 cv
cp
f
97.2519 342.612 mo
97.2519 349.195 li
97.2519 349.462 97.3618 349.618 97.4018 349.645 cv
104.848 349.628 li
104.896 349.576 104.979 349.428 104.979 349.195 cv
104.967 342.3 li
104.857 339.446 103.129 337.124 101.115 337.124 cv
99.101 337.124 97.373 339.446 97.2636 342.3 cv
97.2519 342.612 li
cp
104.902 351.628 mo
97.3286 351.628 li
96.164 351.628 95.2519 350.56 95.2519 349.195 cv
95.2519 341.262 li
95.3506 341.262 li
95.8432 337.752 98.2441 335.124 101.115 335.124 cv
103.986 335.124 106.387 337.752 106.88 341.262 cv
106.966 341.262 li
106.979 342.262 li
106.979 349.195 li
106.979 350.56 106.066 351.628 104.902 351.628 cv
cp
f
114.547 347.876 mo
112.243 347.876 li
111.355 347.876 110.634 347.156 110.634 346.267 cv
110.634 343.963 li
110.634 343.075 111.355 342.355 112.243 342.355 cv
114.547 342.355 li
115.435 342.355 116.156 343.075 116.156 343.963 cv
116.156 346.267 li
116.156 347.156 115.435 347.876 114.547 347.876 cv
cp
f
128.424 347.926 mo
126.12 347.926 li
125.231 347.926 124.511 347.206 124.511 346.318 cv
124.511 344.014 li
124.511 343.125 125.231 342.405 126.12 342.405 cv
128.424 342.405 li
129.312 342.405 130.032 343.125 130.032 344.014 cv
130.032 346.318 li
130.032 347.206 129.312 347.926 128.424 347.926 cv
cp
f
140.637 346.534 mo
138.721 346.534 li
137.982 346.534 137.383 345.935 137.383 345.195 cv
137.383 343.279 li
137.383 342.54 137.982 341.941 138.721 341.941 cv
140.637 341.941 li
141.376 341.941 141.975 342.54 141.975 343.279 cv
141.975 345.195 li
141.975 345.935 141.376 346.534 140.637 346.534 cv
cp
f
150.225 344.271 mo
148.647 344.271 li
148.039 344.271 147.546 343.778 147.546 343.169 cv
147.546 341.592 li
147.546 340.983 148.039 340.49 148.647 340.49 cv
150.225 340.49 li
150.833 340.49 151.326 340.983 151.326 341.592 cv
151.326 343.169 li
151.326 343.778 150.833 344.271 150.225 344.271 cv
cp
f
92.0251 344.271 mo
90.4476 344.271 li
89.8393 344.271 89.3461 343.778 89.3461 343.169 cv
89.3461 341.592 li
89.3461 340.983 89.8393 340.49 90.4476 340.49 cv
92.0251 340.49 li
92.6335 340.49 93.1266 340.983 93.1266 341.592 cv
93.1266 343.169 li
93.1266 343.778 92.6335 344.271 92.0251 344.271 cv
cp
f
102.073 346.534 mo
100.157 346.534 li
99.4179 346.534 98.8188 345.935 98.8188 345.195 cv
98.8188 343.279 li
98.8188 342.54 99.4179 341.941 100.157 341.941 cv
102.073 341.941 li
102.813 341.941 103.412 342.54 103.412 343.279 cv
103.412 345.195 li
103.412 345.935 102.813 346.534 102.073 346.534 cv
cp
f
120.17 345.144 mo
101.626 345.144 86.593 342.139 86.593 338.434 cv
86.593 339.517 li
86.593 343.223 101.626 346.227 120.17 346.227 cv
138.715 346.227 153.748 343.223 153.748 339.517 cv
153.748 338.434 li
153.748 342.139 138.715 345.144 120.17 345.144 cv
cp
f
143.664 332.013 mo
142.663 331.04 li
141.956 330.354 141.164 329.872 140.308 329.609 cv
139.78 329.446 139.484 328.887 139.647 328.359 cv
139.809 327.831 140.369 327.533 140.897 327.697 cv
141.697 327.944 142.451 328.326 143.149 328.837 cv
144.462 327.21 147.232 325.08 150.714 326.049 cv
151.246 326.197 151.557 326.749 151.409 327.28 cv
151.261 327.813 150.71 328.123 150.178 327.977 cv
146.868 327.052 144.505 330.239 144.263 330.751 cv
143.664 332.013 li
cp
f
133.546 333.445 mo
132.652 332.479 li
131.763 331.519 130.646 330.787 129.419 330.365 cv
128.897 330.186 128.62 329.616 128.8 329.095 cv
128.98 328.571 129.546 328.293 130.071 328.475 cv
131.226 328.872 132.303 329.487 133.239 330.278 cv
133.835 329.54 134.529 328.91 135.285 328.425 cv
135.748 328.126 136.368 328.262 136.666 328.727 cv
136.964 329.191 136.83 329.81 136.365 330.108 cv
135.54 330.638 134.804 331.404 134.237 332.324 cv
133.546 333.445 li
cp
f
120.333 333.822 mo
119.556 332.865 li
118.86 332.008 116.995 330.04 114.667 330.262 cv
114.119 330.314 113.628 329.912 113.575 329.362 cv
113.522 328.813 113.925 328.324 114.475 328.272 cv
117.033 328.019 119.055 329.45 120.327 330.733 cv
122.186 328.818 124.168 328.093 126.236 328.575 cv
126.774 328.701 127.108 329.239 126.982 329.776 cv
126.856 330.314 126.315 330.646 125.78 330.522 cv
123.695 330.04 122.114 331.625 121.109 332.865 cv
120.333 333.822 li
cp
f
107.393 333.372 mo
106.705 332.276 li
106.049 331.231 105.191 330.403 104.224 329.883 cv
103.737 329.621 103.555 329.015 103.816 328.528 cv
104.078 328.042 104.684 327.858 105.171 328.121 cv
106.116 328.63 106.975 329.351 107.698 330.235 cv
108.58 329.501 109.586 328.92 110.66 328.529 cv
111.177 328.341 111.752 328.608 111.942 329.127 cv
112.13 329.646 111.863 330.22 111.344 330.408 cv
110.188 330.829 109.128 331.528 108.28 332.43 cv
107.393 333.372 li
cp
f
96.7988 332.017 mo
96.1963 330.707 li
95.7251 329.684 93.185 327.027 89.603 327.98 cv
89.0693 328.12 88.521 327.803 88.3798 327.27 cv
88.2378 326.735 88.5556 326.188 89.0893 326.046 cv
92.8076 325.06 95.8613 326.993 97.3134 328.781 cv
98.6338 327.786 100.175 327.249 101.754 327.249 cv
102.306 327.249 102.754 327.696 102.754 328.249 cv
102.754 328.802 102.306 329.249 101.754 329.249 cv
100.309 329.249 98.9463 329.853 97.8144 330.993 cv
96.7988 332.017 li
cp
f
192.704 50.3272 mo
190.444 50.3272 188.606 51.8009 188.606 53.6124 cv
188.606 55.4234 190.444 56.8971 192.704 56.8971 cv
227.056 56.8971 li
228.606 56.8971 230.555 54.7974 231.192 53.9703 cv
233.82 48.9464 245.596 48.1934 252.41 48.1934 cv
252.722 48.1934 253.001 48.1954 253.243 48.1983 cv
253.243 42.6358 li
230.896 42.2735 227.756 49.6065 227.727 49.6793 cv
227.477 50.3106 li
226.792 50.3272 li
192.704 50.3272 li
cp
227.056 58.8971 mo
192.704 58.8971 li
189.341 58.8971 186.606 56.5265 186.606 53.6124 cv
186.606 50.6983 189.341 48.3272 192.704 48.3272 cv
226.19 48.3272 li
227.479 46.2486 233.046 40.1143 254.268 40.6563 cv
255.243 40.6808 li
255.243 50.2559 li
254.207 50.2183 li
254.197 50.2179 253.521 50.1934 252.41 50.1934 cv
244.138 50.1934 234.68 51.443 232.938 54.9488 cv
232.843 55.1021 li
232.553 55.4908 229.926 58.8971 227.056 58.8971 cv
cp
f
192.873 49.2745 mo
190.873 49.2745 li
190.873 31.1407 li
196.165 31.1407 li
196.165 48.5182 li
194.165 48.5182 li
194.165 33.1407 li
192.873 33.1407 li
192.873 49.2745 li
cp
f
199.458 48.5182 mo
197.458 48.5182 li
197.458 33.1407 li
196.166 33.1407 li
196.166 48.5182 li
194.166 48.5182 li
194.166 31.1407 li
199.458 31.1407 li
199.458 48.5182 li
cp
f
202.75 48.5182 mo
200.75 48.5182 li
200.75 33.1407 li
199.458 33.1407 li
199.458 48.5182 li
197.458 48.5182 li
197.458 31.1407 li
202.75 31.1407 li
202.75 48.5182 li
cp
f
206.042 48.5182 mo
204.042 48.5182 li
204.042 33.1407 li
202.75 33.1407 li
202.75 48.5182 li
200.75 48.5182 li
200.75 31.1407 li
206.042 31.1407 li
206.042 48.5182 li
cp
f
209.334 48.5182 mo
207.334 48.5182 li
207.334 33.1407 li
206.042 33.1407 li
206.042 48.5182 li
204.042 48.5182 li
204.042 31.1407 li
209.334 31.1407 li
209.334 48.5182 li
cp
f
212.626 48.5182 mo
210.626 48.5182 li
210.626 33.1407 li
209.334 33.1407 li
209.334 48.5182 li
207.334 48.5182 li
207.334 31.1407 li
212.626 31.1407 li
212.626 48.5182 li
cp
f
215.917 48.5182 mo
213.917 48.5182 li
213.917 33.1407 li
212.626 33.1407 li
212.626 48.5182 li
210.626 48.5182 li
210.626 31.1407 li
215.917 31.1407 li
215.917 48.5182 li
cp
f
200.407 26.2686 mo
208.165 26.2686 221.596 26.7398 228.528 29.731 cv
228.449 27.9156 228.159 24.8463 227.151 22.0958 cv
225.935 18.7813 223.296 16.6397 220.428 16.6397 cv
220.446 16.6397 218.228 16.7257 214.938 16.7257 cv
207.18 16.7257 193.749 16.2545 186.817 13.2633 cv
186.896 15.0787 187.186 18.148 188.194 20.8985 cv
189.41 24.213 192.048 26.3546 194.917 26.3546 cv
194.899 26.3546 197.117 26.2686 200.407 26.2686 cv
cp
230.495 33.0699 mo
229.046 32.2218 li
223.172 28.7823 208.582 28.2686 200.407 28.2686 cv
197.156 28.2686 194.977 28.3531 194.956 28.3536 cv
194.955 28.3536 li
191.199 28.3541 187.824 25.6978 186.317 21.587 cv
184.634 16.9972 184.787 11.8199 184.794 11.6016 cv
184.85 9.9244 li
186.298 10.7725 li
192.172 14.212 206.763 14.7257 214.938 14.7257 cv
218.185 14.7257 220.368 14.6412 220.389 14.6407 cv
220.389 14.6407 220.39 14.6407 220.391 14.6407 cv
224.146 14.6407 227.521 17.2965 229.028 21.4073 cv
230.71 25.9972 230.558 31.1744 230.55 31.3927 cv
230.495 33.0699 li
cp
f
219.209 48.5182 mo
217.209 48.5182 li
217.209 33.1407 li
215.917 33.1407 li
215.917 48.5182 li
213.917 48.5182 li
213.917 31.1407 li
219.209 31.1407 li
219.209 48.5182 li
cp
f
222.501 48.5182 mo
220.501 48.5182 li
220.501 33.1407 li
219.209 33.1407 li
219.209 48.5182 li
217.209 48.5182 li
217.209 31.1407 li
222.501 31.1407 li
222.501 48.5182 li
cp
f
225.793 48.5182 mo
223.793 48.5182 li
223.793 33.1407 li
222.501 33.1407 li
222.501 48.5182 li
220.501 48.5182 li
220.501 31.1407 li
225.793 31.1407 li
225.793 48.5182 li
cp
f
195.166 24.837 mo
195.083 24.837 195 24.8272 194.916 24.8058 cv
190.08 23.5636 189.051 17.0738 189.009 16.7979 cv
188.927 16.2525 189.303 15.7442 189.848 15.6617 cv
190.392 15.5772 190.904 15.9542 190.987 16.4996 cv
190.996 16.5538 191.864 21.9571 195.414 22.8683 cv
195.948 23.0059 196.27 23.5509 196.133 24.0855 cv
196.017 24.5372 195.611 24.837 195.166 24.837 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (Admin) ()
%%Title: (1603.m10.i305.n022.S.c10.151277060 Teeth, dentistry medical line icons.eps)
%%CreationDate: 3/17/2016 7:54 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26BpGi)`ra"-'LUa"U&:.[`Pq3'c-j[=9fH^noZC,99]O1S$qfA('Y3HRkR9M$FGF/u*e$Y`FB<S-J(5eYk]A@4n'K^fJ
%k$0:Cm$L8f0jOK]r:,7E$dT`<EIXc\hCqVQ&EYP\$9NOR1ee,6:!^g_j\B[FMVEd>?DeS5qk[&oe*F4"8jB(omU^JA:SQX"\Cp6H
%Pq+bfg)8BhCqGIf7Ph2hHECkBoC<(dm6doOV@U)-!W5W1s)>RRT`'*hJ:U#@1toXFU>@1]l+b25Hgs\&5NkOg7]64H!>[8'Hee7B
%gl;(01q&i/iP.g+Qn-4tdBGXh5'*_<HlP8i@2"]B4'dO3WKmc0RIm*pro7p/O9"?kb9m4lMOjd#T<4WSF1@juh(n\4E<-S^aG%[#
%W*l4_!$R7W8>P00h!-em5toa?=`,9-O8nENA7:i-._+hLH-aYcH]FR+]prlc=#7d5U9'gGps2G-f4s_V*7a)@R*@s9Yi#3dbaRSO
%J.2P9)`Ha5Rs&9AA?uOWnjL.WeDhmKWN'$g&P]B^-2eT*%\hfO495BI1l"%$X1?$-cX%&be`^Y)>\AphG.M\jT_"HR\nhR:%e.d`
%5X`rmF!8c"j\ZhCO@+1l1FV"r#-b[TfZ2+e"YSTp2,5(We`?ene[%rcTNf*!?1Fh2jT>EM:$2WG?RYr2OTOBl6/7bn2m(!G99%D[
%r6'N9a2.#EFjuEi82n_CImG^&;&+Z>gZ<)[+l!J7R$k^1`Lhdm%o3Z0Z#0F+H2'H0nTUrXTsfr1D&],$2EnNcITi^IFfskP=NpC+
%S*+37cbj4`=/j81_[t"E+dNGnLT6+Q((3J\L7dro(+YZS=K-sR9-ns`.Ue`;"eSgFSk%<]'eE1\E$ZP^&",r+II^=<.\GIoRd^h'
%6bMnI(.5_[[epPr_V\H"Oi$"/]-IV_7_J4LIRBq#2`AXnihd;:r(X]]#6Z8XfIPF87tAPi2>iGF.M[WY=e`_gV4!WC.f@Ok)1+i'
%LX2aUrb:kBWal_@_.&3Frl1g[+rPHN-703e?noSsc8:`>.jL)L)o!PJbQmoI$m%_0)iGl"pmWXpfnG:+,JZJh0@8W'-cr@J+YrGi
%(_]]nL9Y@oB^e,@m[;gqe&Fi;&!fKa-''7%<1Pc,a+tu>`a[0XLa1B&/)tP!K*XedalQE`R!dZoF1PmpaY]1LB^j5$bS3rGjP2N`
%H$i;4m[8o%K9m5rn`/S<1"ecMcOKAbrXjcq6"S@(\Rtt`',C@P<`[YpFeH=1?6s6I=@s'je"mI$:8I04S##,Gfp9!GZ[lVLjJ;'u
%,]^D8aKfGrR&c[Q5sP-GW(L"d=;F,!J,.-)pq-CG5>^0Y)5R9&O72[aop:/[JA2=TdX**c$3bmSrpijiaPYNTrdj@r15"(`rn6)f
%n*2S+(s.ico/MO#S*--QbA[:pEO;7!j&X<g=fJo3+fLW"G_gk:6D`\.?-=n=diuX[+$U]UK]<`ENdm_#O,jmo<Ns&365]^BI8SH7
%2oEsUI^pd#&"9f7)T)"t2Q"2S2<kNAe)9oA4B0d!7/4)cjDj-;q3U"_i@]jd[LCidr5ZK*.U8C^TZU)R-5g8E0f0lI!0"gYT9p6b
%*W3`L6ooQl^a?S+"@H6%bN5Gun[Q0qLoSoK?Oi:>6(%0UdptL9P=8(,ADTb%1]l@FNZSp6E.lIA8/d?MC-#<o*3<tB8&Xc4h(boh
%mq!_OR`g0egPGC@kn>;G,a<7\m!)(TX;8<;M7Z/+Tn4dca-3ASPlr#SOJTPI##\]]s"RVNTMAO=^SMd9E+b+U.nGiN!6Y^B8I<6t
%5ut:NP7X_1:%<07/ql_a7W=#R&gp7_q+M$MMS`CgQ')@<8s#&@o!Bj+QPA#5UCqT`7I$H?$)EC"@EJeu7/C%E,tYA2<:?",MN"Qb
%3@62Cg]4?B,ohK/I79KMJ5\n4%0"0EjCbEOl;%mFR3m>#V8-,BZ]%+8=^;='Udd[NQq+q)O3L4a+<p^dWgf$gMP:?tPkmob>uJ7/
%O=jB$TB_j6Q@3hh6JHiR<=8\*8gm>3Q?]<??&\jM,a>2=#lU=PW/ne:LHkBX-*:e_`Ja![Qo7jX(b0c:=4B:AFL<YoP[Gl<W6Z(!
%@O=t$,KV5D;jK\oHQgWFr)[Vt3?J!%N^jMLM5"\!N1u1b$>Pets0JSFFDdCs<b>KLG("D!N(VDtUlcM7K9B2klP%]<c;I#p-:eVJ
%Hn$'M?"GC`;TbEo?!&gH6;Y4gRh9Oi7k'rAAY_2L4i[X2@;Uk"TY-G(I:@:W#X3)Pe.E-dFXE93Z"qI5]%Kp;jE$W2lQ"m)g+'u(
%h?ACl*%8>BF;=5d!(sGLAXg^gTCR5[PsGo.`Ik1D(K3ZG'33Y^:21i(T2Lpe/S4ZQ?+A=/.#2nt&k+Yf7YVpRJ\0ENdX)Yi_3apQ
%m^bZ!MOGTQAc"St>EDa.P=_OCRXN(J[#Hj>M6[aV+<>'bgC\$4Uo#_*.DN8gY$f=,k'+?a>]la2Tt6H7fITSV5kpO7T?r.SE4j6<
%0cmanVGVb4'BtlU<@;LBI\a,F0!M>%:_((#GVa&(NKr%Ms!jQAfq`-K-UE*=*tmI#p+'f.31P:QjEO)c9dNOY(eG^pMW1_UP:*Jn
%6Y1SZP;4Z8F%2$MH)A)H4;:g;Q.13(,u4*3dNY.$8<UPVAZ%Y*rN#o8k<i+8&JLJD./?`=b4NHe-*idQ-)=HjDMVtXX0J5C*RiCY
%O;kHPr%I"i3Km?D/#Smp]pL(NK$m2r`MLC$j!7aIcj^$IUf="uq%2tFWg)'iBu;MQkQ]N.'7&3s#V-8$@u=\s""B[0O`;Zhn^Nr'
%*!$uj0k"MMo*IM&(,jN]Bu7<IkIdcj:qVY''d9e,Lu^YZ4c)H0M1nMbREDR0QBeM2p<$Zs:ruSiRBVYrS+LOX#S8>2DH>BPE=[2!
%8d.K%-n:)fFDiN=)9&&$"nuSlX?)MLJh-fC,`:)g46tY.F]ZtMA8nNr[1HFJIL9f@;oLSVQ)4)n7S8OH<RanHY);57j<ni/Ru6+f
%EEO%.,A"tpBf?@51Z]!*="/Ms4Fo3/Y1QW`l^<q^7T6RFFI6`@75^3Af7eO[bK=]Nk>8/djfjT]8nqrpM3AX^'A!n_P17@k8Os+i
%:=Ou^DTA))<-bfrZ9cFZ'kpi^1f8EYBhbC%.NK\XN`hgMU@L'`TrSR#:T/jkqmb9e+O]MiJnB\]jj?DK>"W1fON:Njc)uG[ju4$*
%#AK5b\$OS^T8k%iW`36$WJAmb9oR:r<@&#!RT?YmV_a*IJdE0,^la;7hCc[0SkjAqb2#jX"c7?T_rWN'^5L>rm2RT+U\l]X-:\1s
%abD,05r)8D:Br-gW5p=l7@c,I@dBhTebdo,B+b]MR8G'%DV=Y-Lsj;m]+e:+<RO$(MN1Lu3_PblA!mI460V3X/<j4O3)Z\S7$XQ3
%N/H&)'g9*>ld;bT'dRFL=@VU@8\QV^Q+g<UYNpI.f-'1=0nbu?Cb+hgc"UL\0Y+2:-f(+u@l6HG6IIsAIEE#K4`)cEPgU^GVb<7R
%9q!O)'5i#9mEZ,6Guds$1au4lSk"lKN_6[I?6ZTg/SCsRkNXroALgbn=u7CbOFE\IBWSYmLh)1>nhtrc^/F!*rL#]eZElr0oMAo8
%0$OE#7uHV3\j`Vm3Gdg1-j?XG?b/_0(0#(\<X/TG.*aj;g>[_T.4(OM?Idl/`*"N>O\(M'Ca)"UITboe6K/<JoXkP"<Q7q\6:*:N
%]%i5_]V>b.<i#B[S,QL3JQ`qjW!n:KlLg:]*n=UHEB\`0qMZmW=&U"PD/;YWFbp0=<8a)iS">"+)5W#PdUX6C.Z)sFMSr5GN2rkD
%KZ"[oE+prReVC@aqW%/Me'hP_f8oRL_c&=g&['3oF\=+HK,M!@.k2XaJ4#<*6u=9pPg$c-Em'P7q,K3;PV/<$$T$2<8s9TdVe`q5
%+%Wf*`3?ONU5Yq6/$%@Tqdl*CZ*:N0&Oh#@Q*bHq@V*5pc76r^bE4IhaBZ`q:?:?Z]=lLeZ>[m!E6'A3(7MakdTcY(\'O4KYbH&N
%JXBDqarRUK4^7PX3p1W4i@8gfEf/B5Q.28(DC05JS8#$'N9FQI!G+Jb]c&t88<aD\0mJDAr)]SN%J=,pJulqS@e)u((Sm+U@!T^u
%QFKX(g*o[i`tqX=.I5,#Ro!EF7A+WdK"&"a78poUS;DTcK+cp>;#H;*ZUPg.P#1C(OhOheCXT\L2RHI\*g)8Oe'i=,^P'B+ARVtH
%<)&JFRT$7CMK!SJ=\iY.KXPo"Q2'Y:8FgmP-VtS[kS2EEKi04G=^THIrhWn2Ps62-4MjXg/J2^FN-1/WG?*$(DJElf0&%.pE#*#H
%,2I5VEsnR@)[8^'RAf=Hmp:&V?00Ze6>>tZmO!mI`6rd'!q:</2#S6\eJVLe?Sdi-(rXgKXf,eONW+Fsk(30A6C*++$Nomm:)Me(
%8N0'B.;9RKH<9f-@4gYN,fWB@]TP-$[6U1J8`=NV'@VV?RC/4^2+99ggs`_F,hCk8`gccW8N*Sj4qC`)65A=?97)*@K%bLa8sXZ6
%7p.t3<&>Gu+smJ)F<ug^5!=o<W`#\E<T6+I]j349)^1kHH)6)n;+/jGU-_9(KI0s%*#&!IoC*A?'O?DZT\M;>4\jF.)@9t'FFKIG
%V_B!RA6hY/(J6"$A$IYhBWmIQARY8-Mp`s:*0m+lj>"!</Z.PcZ?Pr94t2*K8U/)C8/<`/W0IcUR<`(?.q4Qo`1<65.akI*AY@UI
%KF*dWBr*"h./0C!Q?4Q,P'M-Q.E@jX!n1VTQa!Jn:e;W/?"keR;r/j@%6XT__O$nK^22YJ'N_/Pe=+5gT=%?fd\P=+Fsmu@VQK3R
%<)Vs`f8M\_LLUt2NUe5+#>I$$)t>54/o7u^\6iTj/9P-@YQB%7o3VFP?DlI:&PppnHF=n+L>>)hMuj"i?Zi#.UQ#K_rqO60r%'h_
%D%>O`<j+=GDRYZgJ,J25U#%eeF)U*mT[R]S-a)WUNkWDt#J!8a?'@A675\`\^*dL_;5=$HM?YTUW#+Xl.Fb2tno'ijjnQ@7CT.LT
%]%R'=DK`Tp_d"feMn@64*VFIF+DJ(6p_05e5UY)-(5rLe1US+pqHY3O[6eFog:sG6p?7C:qLd`LhQQ:[fn*u9h5CP=D)@aOV:93;
%)tg_M?gBS01=<M`BV-4M_4ofEY>4NpkIhp,l53Qf7eb6g61&d$=TSJ>)W$GXVn$7mDV+al8boEU/t>7_ASJC`!Q@f[;>7Fpb8#BA
%rb:endqL/2O*R>hUd(VE=>M0?K=KOiBeqs9HPH]R4"U".>\Aq@959IP#p.Ai09S#Yo`f*@$RGSs1AcPi_"6*r;'oo1s4KHu1`QBo
%d^fqA"j(K.RdpC'rZKL^iq@.E\8a>t5>(,b^t5=/DsrDPh7HtDGOHGmR.^DDeEY1p=gT3prGeSA\hUZYC^ac!i13mbca)^,:SVf$
%A<nP9<KlhofN?sa/h^RG>toqnm_@QZ/N:I4O=SH9ga[\us0DL$;ig0a\P^6HMc&s+'p$pdMgr4)D0WQ!<!:Er31p_ITO=JFMakn>
%:)hH(05a\p/%;enVCd(L^BQn7D0WR(/3M"UlpI!(PB;pOUZPC;q>5afmARuMY\P<)[%d%G!t%7?LOs5N6/jP.r!\C;Emp#lC"t[.
%*FurT(7Z("L$ccEZ[3T2RTC`aW+S@$$V^tr%QX7:62mp)3[WZO-ab`QQR]\5%@(YVM1]7*BF*I*/\[Z7>jG"f,`PS&Tlt'uciB^!
%C39;O%M/SPRI!o;8KikqFZ!XA\3FeA;)bf=`2m+uE3Dao.-ej<?Mn:=>aiX?NKg%LEn8d.[>1lTg*$5J'*INR1FelP#&[a*n>hgb
%HuPA!d)LJoq57>P)XWGp0P01He>-2_^GG6,i[p2;ZXB"(Tul87i;b_\3o.:^5pVm"'if@mnj5'5T;&V"iprR.6-dX'"'@"ma18U'
%-oVkhbX8pT6Y?$Y3G0DUrGR@0a1VcV_re!pUH]:Ok/#ifDU7kkP"%5Gb@T%oo2omfKkMONrTj7&A%?k9Q]4q0XW%hrAOBq\j#Q9L
%`H.H/RAG/2)#kI4pJ7Q1kHA7+5W=Vkc;AY-OUdmMs-Xl-MV2ouq9RtRpBUA3r+CY"(s`o&l,>%:"`-WFI_QK&M\l!CFSj<#k,4fi
%>1KN4.][3%)sS+/)`l$[rHN8f)pP*,bGL]2UVeE-lT6pl1F_E[oN?,l?]EnOn^m$EED&nYs(l;h%>o1ii\K:`^,*E8@ch\e0f1ZP
%l0&Y)a&+GFY=7,(/QI1-&Oco:J1$,sW)r8kqh(i<L$?laR2CBBFp'c(mWR=S[1H;;Ai/FJ`[gFh5>sl"rQfko@bJnY`d]b:nXk[8
%(qZ>.HVhtQMHK_'_q5d"=quM(9KG<qcS)e?C1->Y3\o%.e@Rd5<K:eC!6rN6cFD^R'lXVER<nD<BhP!oY;&"R`If__r)7/\R4TF\
%j)]B@:o%TQKr,`CM\:jq*1Wu<4O:<(rRh=-4pqjD(*)\1@iT,9#ej'NH<)f60B:n\N0M!6hTjB9O5E!Uq(A:HQ98B=rR=uI/L=>e
%3&AhT-D-4#R=\-sV,!pkm)ALE1+^r"cY_HjEuS^T_boB!<,W2O:dc(h=>5,TOtJ\/93/aRN3Y#7cW#cGbJa><I?;4ghsC!HVg-Bn
%"p\TE_iU@a`bs5HXL[nj;WX2*jO.:YrB$.t%G22<PTe(.1J01HWP0f_>$31_<Wmf)GJVQ8`m<5PpnKC#jK.Q",E#bgUW;@Ml*kA.
%dM[3Ys#4TfVcJC]`UM+H"U,^EC$R60lRqtSDLXmnJBH*7j\-:BrEH7=KEf`==AuuaZ'SmAZZI+ngMq:!DUPRSZ7L0jX"l.%$5jUC
%YE.T:.MK6Kj[R#>N+t)]MWSL"SOo$oMP.Kg95QHsko=9Ubfl$r0llj"gprJXlJpDce&O!LW@U$Zl@%r7e1\O*EKWAcKSP+c?D]!F
%>JD1i#h`fZ-"LJdBpXi2-Y*2"gHML#dr,">43&3t,9>5`g9U(tBhm"T?Xtk`A6aMF8`3"I8YM;5TJWI-c<h.f=!BS$ISr]p)soW-
%Yg^6#2/=j,=Z-\(743dg#,O*=A9#gT;m#SNH_"1QKg<U(Kh'Yj/,GZ".=dmALjBpZ$8+=fPhM[O#'Cs:C;\WlP"cZ?D4hW8'O&2;
%!qQhfea!Zlb@h[(P+iW="W;QgT&kte/iD%t,&0&?RJ:L\GE(Mb>g0VrgjkqD[J<R^kmGeC9ZX<20BP>nVC=`VUN`H^DUqRI)uR.X
%9F>[k[<.]BfOf"S8er;5("4u!HVlQ.Q8>f_V08'rU1BFKl/.D>,?/Ut`gZ?bRI<T?2lt8O0?TNu3jfp?(WH:ofSbna]hc>$RdW\5
%)Z<^K8UF;i1"N^)a%bBJP(h@s7I#Ba.a9O4WQ?u`f+>;\cK/kLSsO/Hf6eoWn!8jaR>B`]MFiid7bqERfKLk8*@-ET3(#N\p+&f0
%F]NDV\S8O8s6c@s-E:1OGK\38Y?aZ%H#pZbJHU&-2V2_c]f$OMD6jJ/\[sbDf;;]Q`Q4irXZ"dGf@+JUB5R(<c*c81X5+JlVQU7G
%:1/Ksg.7BX"TRj=k"I?,cGf#D@cYkS-j'e<@Pemr;)-dAr#I_?S'fR"?[Qa/11uQ*S=<q#+4&qQVL<hqfh#U0J%&5Y,5'qrkJEGP
%o?1>bL<<N%2Z#GBQoT641306"^Ps62>D(8kG7>VSDU=F'IM_IO\Jh00\tS6jhMT`pfAkm\qr5*YVU4VJd@d#og't1NUemOfpbG2Q
%^6i')fM0$KA_LCaUJ.kqSsd:h2sXb's$GL)`D$$@\;btnqsZ\LDPn"/_9OaPldKK?(L1H-C$O$1B9\m"=)/T^E5pMJ8lC[]?45Pa
%Mp&9f&kotO\=U.#H=[Z\)M?L>4NO7kBBln%)03u7(Wi)*#o8tA*%kEi:#Y#(0\"<s6Pc@[S"Ru<_;V-UN@>k6Rq!^VE?X>12KjPt
%Dgp,Q.b9*!n`=obp##TAmsP(X^A`KNf7-BVi!Q]"XCY?r1UH4j,Mu*K?h9hlq9IT>InpV;?h9fuGA+_Q42q$Bq3pc"c1bSU8)X/e
%R-!u[1SY.laPpmqM4+3n983SI5do0VK9+g5_I_nF9FAD(EO4?olY7-'NK_fl'NhNs*Np>7*3Cp6e&NZITCHJ!WR;Ffa>948@IG&G
%n#U3!MeBCidq0*P)7&MNOCci]Z_&RSA\*'5MrXLL)"MpRdB5E'3bs4'3mDoRer/j0SR0g[E.)Aj5F^i^k4u?/r[aIkS!ZG;?[YT8
%ZoLccL/jbR$/[KbBXG&Yj/jF+:=4P0Xl834G?h"u7@'H_R\nl5.'\Y9e3s&.PW<Q^$?pA7ftQ@'CS9=,2sZ^D%7qLiLO>;,&cY2M
%5+sj=%#>5#]1/+QI$L\&3AK74^UrEb?40&!AY+.7-XPqlQg:@pdO^o5&Qosn^W[?Eo>Jg7nM3nQbS)Z$`66Xi9?g,hpfUc<T-o`_
%$)D>HA7#I%o*j'sAWUf`!V:*OdaTYak*Je9UF'Y4#.mam_Gni4We'LUpSM:$gp@kPgt57HZ<Rel^LUe7E1$>l-F2S!^NR`;7#g5$
%\qTC;:?Bu0aQsD\gc/'86CSq7l#9Oth)N\u@/=NcSmgA7^O9gFqpM:m['4tgIi?j!J),o^n'!F6b!;cuWVe4=OY^6mp-83S[:p;G
%$nmL>B6[?('q,htA\m=Lc'cH-mg3b*j5YSN5W7oHoo-aP1FheDD\\n?bjWnXr@c.js+EsVAQGuN$r#F"r5NlWfpS(MKJj2Mg9Trq
%>g8sFm.CM+FZ(MN3)1.ZRnUlDJAbfSHD[6GU>3\KZ*PQo)J@fdQ5#i'3\$21'<[Fgk:u+EN7lKdGk4&;<'.n3%EN$i_-rqUR--3d
%H&R"iA"L`N\W\epA'@7\"!b0=P\Ka@4?g@`n_%n8WXY]bX%jn_@0NfX-"2u!-Zkf'J']%^/kYT.Jf?7bctI%&W$#)d;TRBDA56aV
%oec4WmXmNWqJi>JrtrcC>*`Q/V#8.Xl5/n<S(\7,g;DJOW/s5"acKhRRRQFA^Nj5@eGbH=BIJdnR/P3RDWEr<7R"^/:'R7?5"B8.
%mFZE^e&ik,<,>I"bjQ"0h]"De2s@_YotPfid-jU)*"70a_^:cK=\]=\S9mRXH.C@bn'%s?q2H#6UCsD+p>o!DG-<GF9`&ETj!JX:
%b(RtiD>$jSqXC6.Yk&$P)n)Cn\B6Cm0./;FcZ0*4er<j00Q-<96AD%1s%P+pP5a].Q9/aB-5k!<dgG\[DB@'IUUbY,2im,#kG#Kq
%:=_Or]*Zm?I!aL.SssCUQf/jA)%Gaa?oAPYk2G)XS=>:To5O,DS?ctfJ:K6k'%7oM\Mkt5bCn(jKllcESbbo2b+`&%n_?ipkAK@'
%$od@o,T1'Cs7Sd6.;$2!IH][73G^L$YJg?fbk\pbdj"D4Y*(l5>pqF[b3RYaO>3/6F;*G0IKfW6;)>5CXlUDLksi)#i9+jPFCB[g
%Z^E+4/]peFmkVUkIV.(q7XSf:N%2nn1FYaOg?AI@95palK:>kcVVRX=c4o\7&F._eQDL(IgLg>2H(!R&3\sCqL3V/"?\pl3WQ#?J
%HO+.TSMn/:5"d"Z>%:I_rH4RnXE7CRH[bcGj.mnZ>%*;$O!T7i(1i@;;Pbap<JE).rF,.SWl8,g8f,fePGZSC&C]HggSVXm=7O4'
%pm*WhXHf?D+PI^#2Yp4E29`EgR$=,Fqc%Hp!j?3?#$h"q"!NS#'mb'N]t%pl.<t:.brpauZ`2F=!D0i6L')e:b/Eem?n:>P2ui;h
%g@;Q^<)mP`.@U-%F._ZGcR7E_1-Bc<VTpX%C"oeo2+pm:lcjW\:ST7u0<i2WC*7klGktFU:"u9WobrJ3<h/FQ!&M$CQQ[P6];U[K
%#o8sD%N1eqZ]"OtUi::M)i#tBIl9Tdc[s&'f3tLpYij#GDB/[,T5s3+AG.I@gW!sYB62fe*BqWQgVtd(r3+en=j/#7?T'n@:=%1T
%O5E!URH02"*BpfPLX26pVp&W.Eg&.g]id"Bs5!-kS"qL$nV`6-&N#j5?A"ZmiEK-jJ'#-e=k%J(c4L#8qij@K`gAr%&M@4*(6$eF
%31P)\kN-9\2Vi--L7[eE=_@A7\E[Re1,STHA1VB_=/Z%\N9-OJ9?,7O5-TDj;eRt7aTSJ`EDd9aekNaU7#5G_rU:^k`70,:o,W#'
%Xq*:X,FfX*E'6?Cotk3NGm3rtTq8J2]g%O(Pt(3hV0m`U"e*D!iB_RMKa]c"S[<DTdbofJgT7Bc<9X^)PKL+8gRCblEg)kAn)oYb
%9kUf73L`a3c-2Z\b_d(i*'teY*XP$o7IC(oQ8^6d+jVAKS7KBC52*E*iCn[Vj*K#Ce44HKeAjE2"5<<HBJt@$-CDaXkIMRP<q>pi
%[`.erNSp6Y6!>[QS&XE!]:QYDM-qrf%UXA4]?gmjA$[`E`V?7Vet;m1J$6HU/Dt0Qbp!#ATf8CTJ-ttp;4K01LAfTVbGZGP`4ar$
%Y7>'Tl=#^FQD.utEPclp'KtZ%ROdlS=?@PpGi_4D0*VPMUkeO\:qL+_LquM)HpHG&9T/m/%/Qn#pZojAo!:Z$Y`C_ppH]j-Zo`cF
%ko0uki[<Z>#h7QE@%CB7-7#qpNE3M+-\[N7%fVVqK(-PL&OQ3L=5J'%cO"X]_6[tlU;FPV=@%HZI,Apk$U0rdDn.KLYY<XVl%A;T
%\b?8D7d`$XrtE.1LJQe.p(rf<pG2L-Mik(?!>"p$7%i^(%$5Xh,9,tH*$Tqj<3N1PDUaUMK:%eU4X+\D_k8/7SmgPB*Resi6n`XK
%_f3Oj(I.:Q"8tNH'!+>\`8^`FOJ(hCJ,J2AD&i']hpMC$iphLg`/)uRUY;,LDR&gN-jTc9^qU\HJ]kuah4gW9K)>4CW!^&2f]G<\
%\]@"r=AVW^E;sS:W7/\^r]a[kNBf/^5n(?[W=<&Cfp&64ctMBW708ROnS?;>!^O*8@ieunje-R%kPhSqISha7RA5JR9APGY_o6ui
%ro'JHYJ57W0*-ds_3M9N17E[glcbRXW6rU$HX4=1'$:8IpZ'(?U.GQ0l,B!d!nhapIC4D.jdMao=a]<g>r30soN*feIntkn4gp'^
%CieFJA5jnta>1@@T6sTF[:+R3C&LN/0GR\r:\CjhR2npOHS&"mXXq';O3eh6)[_HL4/`&sEjL8g7]h/e4?#otqo=1\^NlFU1$LV9
%[@<r2>pjP-VOLfCMkfEGe"1F!VaPAT4%>UHY/]bLS^B9KT2U?,m6\$jK\hu-AU790%7In1GRDgh_Roo#n5\+PHZ_%P7!j4LjRE?&
%;s\TY_sF<X!-bF]*tNO@NK^ElZ8@s?Q);Qr+B?OOBR8_/FLW#ml)%o0X`tE-_:SMeK*hSD_;)#JKLmM^dn6q]O[?\1ll8I=]sp.?
%p>pbAKgS3k/iMb"IaI>ne[eL?gd?Y+pbB(brcI\ZbIHCG[W6_7^XF0['O?;V@G<V[8Lb!n[UD*rBnAIcmC8M;mD]$KOOGCgdnRD(
%CkoQfEW7l)(\J#QYON],o4e.oX_"<.ljO-TiS^_.L7#/aj/YZ:P@8PGkB8rC@96(fW4&F<WJu55OVai6!NL:2]gSjBd<241?$4J^
%W"o!O7U]0#d8rHUY^X&;:pXN]c4u(d:4d"=g'")q=X84BL7#[W6ojLS&qmWt@BLPl@647Ef!$$+<3d,dKt.5%=m/=<4@9Vg2<n"#
%l.EB`/'nVn]tmPnlIBrt1Om]%$?77?<u13Mq1gJY*[si@0.\IXGckho(H5s'#'jcgXlh4X.YKFATa%`61l.jQR'Kd+--m(fUg_BB
%V5X?*eDF?W2cG^!;"agHEsM6mKA:(P0o1i.c,N"0;/VK:bAQ+QS)OX35N=>_d6j)qc+aKUYG?le8=!!es%=7t9ek@fPWA&K*uLFW
%d!"^7f[n1b-Y`]b\(PH8\H*g0VPpC-NS9"S%Kn2C'!u>,Gr)YmCH<t^=,+tsUukku2K1c@]h$RAN:hYTHkm0aHF6\0R]*jp<+*@Q
%:J(`SEGrIZ.]Ycu^n;IT*]'eULs[=:3bO::iFqR*oID-_H5PVbkGn'EEH=gkIVsYfm/k2tF0nK$g\EYnFaK,A<MQKM)dQiibZ=WN
%m!Ss-P!ec).&<m886IPE#qQ-E!CeQ5e)6R9e!7T$OlK@0/?iE^e#UO^1"2FmH.<e.T1`HjKjb[KJ8U^oR2sc!JV)_C7J-l-B%3sk
%4*7I`iEB6O)JG^WOT:uRQ0ui>D=6h!^GE$YTsneV3`EKqm>dogY0j*a(E6@0>(<9hAJRK^a_9@(KF93FRNg5g;2Za]^QRNi]bLL;
%/%[#OAj7Rr`^RiVPa9^"REDbM?$XUU>TDka<8!g>QHeD=iN-Xh(7)[l>hip\H?%oE$'m2f!QDQF7ZrTD7qm.3<(lpk;'FN5pWcY8
%W%hsSW'/Et",i7I^3e9hb9*F+lPq#03LZ.trPJ--W-?fW=5FoQS94A?ILK+Fel;0n[P:$fKAH[>&^?]aTR4gk]'9fpq)YuR</dYJ
%)rE7`(Zi$fif^V'H4-fsZ^lLYh>3D=ne-[,3GqI*7Yu/P&K2"5I\h6$\p<$K4,6X5:V?mkR1Cr%REAutk928(BRqe\2o4n'<cZRO
%Af<%`mV,%uI'd-B`KuLu@3DQBgsOGQ\Ha0ZmfHP-qX'NY3T!>DP^""2\sdTn=@X>6^T+ilEp%[tMG^<m8Kh%Eosim=Bo`XF7SAnt
%*/X%(V/9,Pc>fTsB.4\j=\2mK+BUZf+6QL=p@>>M'0WcpXj`#=+(-4:)'2m:1&4>He)cb0]m@EA6cUJkj)U*E49caHg?JQ+V(BV%
%,7!69Q-C>Aj=f[];+N>0RDss"k[\#Jg6DjA]E6Q2XkTrU]L5b>Tj#'X.5+&^!CUg^=hbeHR':2Pbs2b9n1k-f?H$ai7kRf`=KIRQ
%O=k*P.`SJm'9#T,!lkfi"!p:f.`/a%T^C,-)::m>=Q$4eeU!eS<Frb7>oW1kc;itPg?,amqo),$.-gIYS%uBUEM]3tPof.6>uauc
%2&SM!D'TukX-$p@XH-n^*$)Knq0MW>mDjpl^#Mlb;UpQaqST'r-LGfZeH^1pZ1POM7h'QB0:VT_^)`h6Qn,_['F%eZSmT<$=:e/%
%qhisn-FO^:#`dMX:p>Efe`0t`)7?\J4MXe,%HCCZ(u*n<0n5_]s1=ar-O!J(Fei..S6o&Hosg_Dj$J99"bh6O;G?-5<Ya]fb8!I^
%i*G1iVQ6G5luk\:::GD7`h=%DbGLn(e;'AM4&DY)Z9e-&ejN?<#[BmR\ADP9eU.6'k(S[5&)4M83/\0$E&lm[nKXg7;7iC[d4Zql
%AZ/IAkq:RsIrDBTgYOK,B'=N`<o1J;ODBF5V`T^pV?%$48=%E7N@Q8qA$sn6978WsZ84I7,/U`5>E#PPJh3PC16>SVhW)VP]\@$s
%VSOpX(T\cQK&;#tQ1'[JE&>))<"G48Y9.uPTYom/m@Q8Ii97VqXrJclIXR#R&R[/hT6H=(_0aN8X_1[>Q)*/Or#I_?j5+c<Y2k'(
%BD`B/h+"jk(IfhO:U2=,p0"^d!:gWSK9:_'\'K*)&NlCT:F?J3OgJRVC*s3`*8oI$=%"eOrOYgK_"jmMU(A`:gYkYKb00NHIH;SO
%Ctp5UkW6Y24,L4CM@E.@_L?3G4)iA.QTC\U=E'l"h#$_WrS?N2CXN$UkOuT[jl/aJX*)""d_>CeEbfCZI]3q@qff_4cSiHuWuGuc
%T"K0:Y#[dEJ%<rGf)3[foeKW'*TrGkoZQ.8-VMJ8NO>tcLE#PPh>TnDKs_!<CogWTojk&bKAt"Zf@>k'-f-L6*^?WhoD/82kPD40
%5<t!Q\[&I)J(ts,^OI[n+.&<$X\Q87S1lpNoYe?tXH]9fmu$"lpYS7qj^[?HdFd%<qVe^Zp@Y?0KnE;&mDZd(j]9-4XIiM,Com@%
%X[hKLKjeP4X*tK5&A9RN%X3Zhj"Km!@WS=?IeC3q3[gQq+3bKg^>1<kbj(7Kor%QAEC2GDId-1?f+*2>pS5B,hnE)q%_ggPln@71
%o,um[oc\DjIU@J%gT7rh(JC[OiS&Td_7oZBphK'JUQ*_#2jI9'I/)dio/ijc[9@[,T,NbKO/o26[:u^1I]mbcgM5d7o6R[PnFZ^#
%n'U<,Tt5aB#9rYFA*s)k%Gc8EDng*&g9pg[7uq#[Xn]$ENuPgJdQb/J^"Tpjk\SdCR]MdHpYQ&6r;3c!c8OsgNRCE%PAIs\]XYTg
%(RtDAMfJMg?.^QBYMXW7\J2W"=Jib0ah./_06Oum>(9cVZt^W;q*OI4BeKHY:V;I,E*>GNn%@7h,h8+<f`Q.q0^.8;eM+bnH!+I1
%f'cUV4o3gKDEN=9Q!0k*d#E$eHeY5IO.K>%`M`BQRkM:!Bkd/X[q:&m[Xj(g)ipRQfj(i*:JW$iL>G("?`S[+op',F))8M-;flS0
%:oa:Q)8[1I"EX,'*gV[(K"8@Jj[1593UT+S]T:qD>2c.PrDEB8ji*;*.(Xo;kT.?^^&G*\pnVkJ=rS0!n((e\%P/Q%T\t=qE!IlC
%5An48p2lZuM4$<AX^BCRCI'c6HR:--6`5=E^KDqI6G(Wt7o/QS^#N84QD'em6hA^[U@\A0AY[j=IH.ECI.rk;.<$4h%qb=id\C8!
%r&RHp2!R-d-)l-0YpnmKmEstQ@\qj:MoKg^'n1!;%;tBdGLY;J3uHa**'>;OcVnmq2Drq+fmhnkKs1[/Bg;0J_C2C<HXU/^][qR.
%3q`21DB9\]&'Jsr[q*FhO4TPW0LZUp<4<3icV<E0p#U*,'\O;uo(I8l&mBfu2;%rVH;W>j>'sI%*Bt&Co>OS?;Q@2iO<tu(%pR#M
%p\::og`'37Ik3cF\FXrU&C:lF,MjkfSLqe,fB[QY2R[V<qQ=mg]VFS'n7cU@e\-AFL6'oU=!KP)gP0[ReEAhR;Ou"'G-)!n[\#"]
%f&G5,/Wf51#KUF/+$G)Pn[\#Zj>6!V)kJZ]+)VMtl`J&'\*)k<`oG#F2fO0ER9)@mff@`1Ha"Mj2M9WMTpt^F`ocH;,2LM?c7>r9
%cWbf.'0cmaCM,m"aW<uLRLuUbH_9_-6!$7a?eB.;+6qro8'aF8hKSn2dtdb9M\#]%kXO%bZG>G=JU_U9<;gfEVG,(KHfa;)rN@Z6
%YZIeD5.G`-Lk#PE`unRRdE#8.!a+A3AU1ZJ&&G>bFZ,QrC6*q-YMXne^VB[0a^`YoVhP)GNHV;KG[3i#DIJZ[nr"=1Q7M9jmK7c-
%fUP'?F8:HT)[jXIF!Hb;ogoIi+$=C&F>htsXn]NS?LF4O?f)RaHaiE\=qC%M/X]h>l3;]`!h=-l2WCL^VrlE:l"L3G!o9Y&ED_>H
%f-4tN'%Ne]hL="$NDCWpoq[?U_M[,J@=>]G]?B;!lgSD.'8rreL;rci.49NYZ.(;S&9iaIVVB`oLArNuYsq0$34h!o)?aLO%2F+A
%LahAC_a4DF+Dd$@;r(7hUK#)rO6`(F8toaXqe:X[V)<WmLce\ejMEl;-=m!am<(aKI3NCRc+8ppR_^A<c>Vje(mt]oAn3[,'%0E1
%:5BI\dM-t#Gc@mr<7:H*)?b/GT$SkF)"5meiBbqj">B1CI2/81Q9@"m"r=?gGU\(Zj]mA]L%K]8\<6tdMEFpAA)WtuF<(rrkU%J5
%it4ruZE0qXGa][K8_'Z8,JD71;$*]d9knF8.-@AC8;tD&O]b>3\=9E/AlXCVKkO'FAgOoELeF.jW/`EZZqMBf1/8c$Ef#`]Nu;Y,
%"OYea*b^db?=5tLThdcS$*M#:2Lc/#r4=Nh@9@1Zp5VpTJA_2W4(:D]#B*tV.iY@2#2O)IC`NR[gdP$1=GF!qeglN.K81C]`pTs!
%Rr@1KPI>?(Y3'5-T#,.XV3aQ(`jgSj)R.AF[,B1;+eX*Xo^7?-pu'VTiKh7PZ!&U/B6TtHP`SB!&VUbB:!e0'pm]H"a%lHLdiXV,
%:%9nim'ZTF'_VddXj'AdQ,WCEAn<2lkfT9&msthl\;0HI#<rPWV;a+Q2T"cpV.]s>.XG`A>W!&1?`Uln/,5a/n!0O>*e#'[5f%mB
%A\7Hkh.uYV`Rs#uS8IqCih#WGX'QB3q<*,<>3%=I/M<)7aQ8MW"h*RjDna.Cb/^^_q^[Z^:Z,,hr[>$-DHjS7>okS'(b.g1HF0Ib
%'p7NAr-`"O;Z?[`YgiI9XfNPP(/D[<I:r[bSp^/.]m9oR\#e@3iSj2`^Sn#kTg``U/+E$L-Ad@&jced2:Uu84p60FQ_!To1SNcmH
%>%p*E]IN%o9r_0kEX(<kYGc+PFdbK)]?b-tTND"#Af7Vmqgq>GO^&TAgj?p)Y2j!b=VClJ'cs/\")Y!q=o=us.+KD>^)]BDb?H(d
%@u/ht/]6:_?B2JkqUU;F,;G/8Zq]6D\(Ba%2ikC4CKJ[0KDHpQ,)*@:&jfW.?e=b;>pNd+jm/7gG:K*LiAYNqC^#t*esGg-Hj]dT
%om-*#mKR(jU%M#'!eqd4$Emh(^TE_BeE$eOo::5_Il9FC26&<i\gija9hne4cZ!boVk7n05'jMWGUWCR9-0rbs.Xc3ne!k\]>mNg
%="u5s[<Q:H^82kr#m4\FhJ*sB;dLW`5H;@%#)-Q5s4(B_#O7R,`81@W7o/#35@b90rl3ZM&%<_#4M@"tI&F3`<W<PMo=/FM]X\d*
%4O>?9?6!-'1>X`K5b7W@Zp1@S%UXjGKl4Uod)JA$o<<!OD61F]T@]6@QJ9'cG!+RY?9!0CI=NA>RmuN2L(2%G[[cRHd8UA5e!cQI
%nO7h8-:JH@)!e;8'Os4iKY1QQ%Eg9W.j$eArfproN<I5q"<"fA@(3[I.D$\(7o)<rH$I'F%+tW_h5VgA`TlD2OVI!@M>)C"cL9;M
%2ca:65>,hDJTn`S/r=BgYi'Qr8#K3jH,$d28U<U-3K:e&6^%/^kdJWpKfXYVfL<u%'jEaqd&a)!O]P:tB4ubtEprZ[+$K7V2%ujs
%%iNO%Hfmo'Z23lYA*s'EdE0Dnqhj5ElYd:'_^!AmUD7-CqVXN3`\i)qMAhBac4=YDLEG-jEHe<Q5)+9ZlJ+[m<ISrWo![i@J(q%G
%JE;-(GOs0pIjlH]PVGJ:\^Ymb/@ZXQ:RecJk(=7!8n9_R(=#1WL:@-\b,`"*KB`Z`A%6o8q!3hW^#a38f\Kd-ZJ,'l*5ekmH\ca<
%Gs,u9*j5S$<$-_Ho(c#AE:%aYZrcS8Nu#t3afUOE:M[4]JFbWL"@q:3]_Up]P(:A*URu^KpW%;cYnK;<H"J*t[k6-"@WHJ8YEk*k
%Q>m=,F8"".ZF]X9A$$]=kE-G>BPsKA+2%#(]W`(b=fp;:I[i(^EOfn=+7E9'Z$05.-q@mS);GN,C["?!@s-sWP9s"*2Wo=A<];)O
%hL>Uc.DIG#*GkX5cQIH.V8hP^rJf@M6KC<&hJ\ZcQ/4]!gdY)n)h5Ouqc)FTmHk[[GLk^-m!l]i$]Kr4]!D,/Bf1;3\M=^+ZC&]q
%YhKP(mD[nuEV\\@(WTnMk"FVX2'/cpfH%o]NoLW?hP^#OG8CaOak&J4<^(]UDE3b034O0V^N+S^hEG?Bkk!rgmt2OT/^KW&CTr(`
%I(0I<XM0'mIjuEXgq/h\RA\e2]2b!C'"h(QPq9\!^48kJh5QVG?bgm@fZ*8cV7^p.->>pjDg5=84=L!`hFZpY/%,H&U2aTRZjRJc
%;@f)J9*^=.#'&A5gS\['lVG+%9N5i:NI,0hLl5p?#LA=RLYHa=4oXg'c\/@gs&,sMk!)d'BA9U44PB)b!pFKCcosY6"=YJ[g34Zk
%p_^"h<mBRRX3-&*]7[tY%q],5p$mrAol@_\/u;T2?u1aooQSSUPW!-=h"c-YC*K.KIB`QroW%MrHlP=gQB*(F(;f@GhKl$FCu;*0
%l3Pi]$fHWplDr@UkOONIlRV>>=g.Rd/">\k@V)sOG?`AX]1"CV#:nZk9&W@h>NiZ[mARR7:),X1*rpGtm%In5QX=Rd`^JF7,cr^/
%G<]%bN56Z2I/Bj_lf"!5EUFdI'NuVFp,A)RVh*F%rG_9-#GD'Is&C\$D(LVsi<_QH<>N&JL%+a+X#lU;m`YRO6Iu6$o.E5[Y_sSD
%-'Z8.JksPXU4pC7^ON.\J:Gm'esGt=`cm'3mVQBqq(n8h[*K-7S[3pS=F@HcfK]4a3lN)8QdK1:8<X#d]_paJDYC,"lbW,-fJ^tN
%cg)EM^F42!G96%CeR]ptgn+_'QO6!@\,SiH#WQ0l3SNBe]X>!:,ljf&)et'3e]J\9JW7;&T?pI`q9\!<bAr'pFBrD5-f.b!o'jJY
%#MtTL!0P8jPL_;:iir,WXQ+TPhrqT8\Vd:cASp\?MY#/8RVp9[p#F3SMlfgJBk#cITC:]jAmt_<HcuMejkW*L[Vc?-2$[mV=nbE1
%T$#nd2t-,+aBs;-ZWl'(^9Ps&(q3T'DDh8ua,2Gc@ahB*Has\olkSlgY%+3,oWhf:1OdWGUCi0MQ.k@tkLoD@jUU^lqm%)fgV-s0
%4h@QEm"EhETB,7;pFtD4D'-PaCRP6p_\EX)nKCTeZ\Lc\*T)=2(hlmFhg>+T=7-O0ER>X>+V]NY>RTAe88Bp[Fdh3((;G@Vh'd3n
%?Ot<*(DeU3T"</s:PEE1,*-GZE,YW>m.r^pYE&-gX5f^SiSjLue<0Wo$EkNmK$CC)9O0YC*tF7s:L!-0@NhuW\#"8PqWdCoYk%1^
%eO!$;PI:4I3^Z&jMjcLgM.]F3(h]JV<kMcj+5cD@nHLWNO"6"1r(=Pi`n.%#R$%A8J+`-&I9]Wq1cdShK=24aJeJlhqtE1Gq<l3o
%+kZ&jE$#-@HJ?jENW+S)\'$FrJ,)s%f>$0CPK"3N2[@S#E>LIRk7qq.B]i^Ql<#uukj-p.b2M:%Eb49[I#q[^o132@ZB9.E/m.G!
%jjO2j>h[p.(`[q[4?=n'/"a?G)C(\%;.<FQ-&.mhQC*t4RL\-OJ4l<,dnf9o.YZ]<mcr!pY`m?ZHJT/ggaguKd969RA#8=kgRI`q
%a5cR3,c+($p-JEH.qkuX6ElupNEMGsdU5bUh2hQO[q@4VnutC&S$0X;\\DCPZjSP'U)lEFSuo+J$b']CaV.Koqnn&tg'kie;)J.G
%G0t_7_0n52p!rViVE..sK0+\5Jp_JDH_'F\n&^UqB6msFA1l_GYAPt@.GfZf<_K92M-aSL5<"[;:OYER?9WZWmt'+SH+*D)YksCo
%Ag0\\:d:?jO]d&?l?p-_a6UEfp(SL@VkC8$r$^!\P*E!>H?"I?[I1`]Xfm8r^0.HeR#;M]^YW0E5JM>WkW!P?Y3EXuEEjUo;-Bjo
%X!<TOKosh6pHG1UbK$/,O!rC42Xr@UIkea?o"im2hu-`'naSo<=9,fEgu#1BDgr4>T%O@B^%?]SEk(abFVL=@TnCV8Lac+YoW<4U
%>.K]0kWrt18HW7:X3g[i?bn<=468,T%sLoEhb"Wb5*+R7<$Y!<gTSFPITa4r[8;/"9&_1RT\eMLQ_-LRj6Bo/#Br+B7n\!YQLN1G
%._r1@pMfg:d?.X/jiG43)f&fILP:ADIgD0N*<Pbrjf$NT`"b-jDT,p5XDP%eGuO@igBV?dbK1P.o)eg6N>:+bW/f[p#\%9aE)(\X
%S!A>)eZRWkPeV>oI-Z(()^jLYnqW:Wk,mb)b%\I/h$m0:ojG#Mn8*U%/2_<n\rUn'k[EjKfsnZL-BmoT.QoU3A8'eR@,T;W(8b:P
%9`+iQ;&]Ye>OopYTh9'hiTQ<7!e&j@7`g,PX#;L]IbJZtLNJuZe'%]Rj-&H24Q>MCh/_WHT\!kj`$5L)b3h_HnTO3ia8'SoZE1]T
%-$.b6IV/&S;=)7LqLHV'7$U26iWMQ@GNj+0e2[0/@i(%.Vf=rH7D1Z>3/r"=J7Yl*&+C4iIdXDg\=MqUJ)W:Qm2XF#"0*_]$b&4\
%U-:b?RmH/\(\ujU4uEb`qckf)nB]B6f*+XcFkXC9hS:Kq$uY\_C:&&A2V6,d/@(LmNfs\$J5U:3_1l]EY!FGgUKfV7H9^q3Pc3>R
%2JRVB9HS0eLB2>&bB-9O29%e;rd]Sf(j5"D%B.\#%GPN?lZ`=0hF)?L1.06m?DDkd\HFoAQ)Hol(E^>-`.)?cEPA?KO_e^FXR,/!
%&!r9-Y3RL5%OmAfCU$D27?\2[(Q?-Q8r1sCR@1C]NZ29N/ra7g&:p#1>qlI3b#\f+"Wd!H0(7+Vc*?"(QB8"h`ZI[4"+/^8GA=%h
%:+Is7jRXspkH882Hg9^=QXj@&QGaPg9a3LY>Y7k[msf$sa*G[sQ:XgB-"pOAN,`rad:h-S,*&/LXOf@9ei1<OZ)!CQM5sE)4):,f
%!M(^C^p$*rrmg8(V=_"RH<3u0!'"RTFUcf"o/u/-RgX2IqX0]n=Bi$$G.Rs+!E;Y\o]7Rf!i_8\YqFtsEBLUf-diAmS`I04oqk*E
%cn$A;W:`2Ad@_EVN-h>Oj'9m9)Y[o=HT@tEFdF4s\Rbshr?@9P/U!Fo/Toci3b?!1LZrXq2_I6?PPt'Eb>h3(=QcLW8i[hT6.\)f
%Q5J-4MBkBN1B%Kh;&tq`2S(CdI&pe!/gVHWkTr?7d1PV?p\%nj:RNJ\U&g#RX:5d')EL?gp$/Or87Wb2dZ:#(L$QiQ7L)8!*1ljd
%V`?Di&GS^0V"fMP!V1g\Qel"kR66F14,oRZ[?9*=1l)Z;LTR=pe7`G#H%`CABGUY\n,U;.-V>BB2],e;9+e'6;efY(G3og$E,%K%
%_&i/D7OMWWCN;iL"mr4*d=]d^*jPDe,m!2m=gSQsknTZ3r>;SK03U=WoP1S`)0rj:!kt91ceA>k^#OeT*l#5*'^tk6hgUqKXWU-;
%ZcT``XWIH2Iu@8eB0OC:gD#1UfZ)a+rFWYM!BHK1K[Lk1)i%8f9lbS!%eL=i]L/k>HN2S=s#8I,IlN[r29NNs(teVX*S3&O%pu^(
%3eh5*MfrpSFm+fH2Z8U1_!aS3quS*)Yk!6N=h/*W3q%i1Qtq\8<Y9*/D:e86W9oB9^c+pi3I0M$9EobcJLl'0j_@VWJ3Gi(j;m"F
%W17Mq:2\_lK=p.DIL%\qha`ct%kPc\\cHp=;*c`$qQ9u*]t@t^d$th9h8$gDm<n+@^s-(Qa;+*TB`P[DkiC\E<]"5UVMQEWn%1KP
%?uVkJKQXs^Du$*/(\F@N`sq_(4?m`gTptK$F7QJNVZu;b4[UUH;#l^:g7u0(-;:kMdf^dIKG<MR`3Z3e9L-L]1Z:[(D@!q1JNdEn
%cr*Pt!+B.Lcu;<!<RApYQ6?SR^1d\jc$P"1dgrfDJD$kRd)'cr*hVE.*8%EbG9"U(WYd(8/A.em5[]CrfAX;!cj(pVn,Naf)'PU=
%":0UInu,atq@@PfO:b14Okn`OJH^T@OR`Zs4_i5sBDAJV!ne_s[IHk093-0:P7!cJa`b0u2oI-IDD2,3#g=,Z!'jrG*R>,'WWc=/
%HOMb?/#7colQKlU%'C&g@_4>dd-ql_JCngHOO90U!m+]7(Bg.l7@fhAd)LO*0HXI6EXL$^)-VtN5b4!=$45sD%eU3.L34LR@,N3)
%I!d:YQ?'W##a:Y2:f>F:7`1^)D9p9.L@6k<%8>n\JXHWQ;n72&,hYutI1QW%+ER[$)NY(&9DAo&@JIAG8m`cD%T'uo0io52^hC-]
%<L-TG6jD-Zomh-@!D1lss1[_&,@_.TGK8:.W2KcZHlZd[@`ollla-Znoj$C;7.c%dTa@A77;;g*^p>8,!`6cYQDVb+/RS[!q^uRg
%S79eI((<O$lSL7[^EHAo0b(F6O<DTF71dLZD97A>ZXD_/]NY]C_XKg84>.*h5?e2">..gddpU0#W(R4f"9]iu6#)UZ#U(loT/_h+
%c#I<m/o\?49/gs+FGAtVKGR77-IGp3Ee+"@cuUgSGO.1D!_]O%(I9Z](^)(p"eZ&47oMa*6c@A/eTk@&gin](^7=1L(cgi#Zu8-I
%4&Aq0g-?<-,\f]!Y3D^8JjEOjcScn2bEnS@Rrgj@as<\^\ua`8]_EXiT](,=@guE@]7G,98JFN7$M0%P)+HM6"B#HRPuT+AF;<FO
%6C\`'J^2Z[:1u?d9%Md0%Am2s/SWl>A;3:!g^n(R5U8WP)CHU>T8-hrk0Ke/oM)&.,)k4U6)!NKFtgfV@7%l<>im!07h-8U/I$c'
%[*^qobQgGTD!7T:'\rtpBTQNI.O)t,=iEHhR0,u7^Fc>mT`I.U^_3>TE$r@gX9mJ7FA3Mjh_KTq9SbWk0o'R":l#Q[:GDO98P"G!
%W]YpehrX;`F<Tg6&U?9M)H6us6d,UH_ZP&(3l8<Geh;d<Mn5UT]S.-JofOCfKGdl%_[JY>!Zi7n0Mltjj;&\?$IZUOku6M;0Rs1V
%cKS87ku/_,eE0=g_'%NiBDLUZftQZ.[*3JgjT@eW\AW&G>i-pB6Y.i]5G09(@TRI]P\/kKWLbuRU^[naB=NL&74T1)rmNS+?Us<K
%SMWl2oZ74FOa"WJ]5F(c!"+PloGKqnci,1aSJ.)"[V](635MaLHjOC#N>#PrCTP`+^HcEYO,pf.*!5&,cjc0:KX?<jjk,Gd/XtNO
%#L&FnAtjgR3BQ.R0\[h:=XK7A!81%XOs3jcDBb;jDRM(modg_BP"X[X+&L$i,/!u^CsO.7EuMCF8UWj7#+%(j2Fjl8c7O8l9_jor
%!N>I?\e]ms1nDG0Fd;+2g6sAsEum;IWZXi6@+r3S,`m&>?0N^c7pD&Y[2YN(dauF4J>5DHX"/@DL86f^!X,39q>F-Y$.SX>/!Z$1
%:OjNRf/7]g"8:T\*%tlpcIjq\EY%(*nUGKPIBN>h=tdA[+SYk@Fr3`A#274,'n.@l-9:'6@A,Bc#il9,7An$KB(l]q<0.W#M^>KV
%KXh:H:k*L?:aDW=%((s`egB5,BX,sirCLP40"HEGV.e5W:r)H5PQILf>3n\(/p^R63?`*@$2JO+\V(7L7!aGe!"HS;0*j&EFh-F$
%M^&DONGu2q8pCA:/%D:9ZTO-0@B^SmP&:P^ZNT@,fO@Ef50Bng-CeY/,Eig7LnAEu[++<dY",EL(ZguOg*fWnoG;/!9Mf,gJMRg#
%*!\:%Yu%[[->Gt).1+K,Js.-E+<SI>!;XL`7?@sN]S9ELoXh(P`!R?]QnGC9QQ\9,+sn3oT/q\S+qu/mCO6JtdDn-Y@n@g(<WYQd
%,!b?&Pdmk23Y"M/'=8.@!B/_$ceCk,igMQ5#>GrE9dZ9&"$t:Ck[D6adb'qK^sO9h"p:G#8;p.%31FKbZf)LP%"JX*8KcB!cqVOX
%"p,5N6Ol>"VT$K0f_63s=u8'XB$_rkGebrnTCA$R:7"?nU`]h*q7_iA!EO<h7c>`!kQ-<@l5)X820>7b-k]M)B&'=BNrah#d!+)3
%[u,ut'.ZQ3H_,b654m,p3<TE,Dh^@_2Mri,*7-guKs&KC`e*9U:hLKY@rm2%L7'ADYX/Q1"IVAY=6*#Y$MZn1Yts9jQ*IsJ^nGus
%R=cUjj\&k/\%R=6'VNX(+F9q.J]QH`cCfah!M`h=aP^Nc4q,>AH;`#l5t!$V[)C0jP3mc39MEOd,SI$6FJ6TEMLub]ilSV\i`VXu
%dh*]un/"]PmkF21=7BHS)"^qOS\T]g+#(bA?s8[e4l6nq1J$R:,'/fr@/u<41-Ob]Gf])%UN!_D(bg)"OCH)D'1i;%%0bcl#'qDn
%!fDOhJUHTIkgsnnjBIdmP">d:B<RIF^]bX?L+l<;.EEL)7P'J[ct@!MWe)sGM0D3@6$s+M$6U9m=-d;/_`mG&[0"c=^kr]^aDSi!
%ZPa**@8]D/nq:>"5X*\Q9ZkBlrM&"$6p\W>Tn8f7`_TtYJa]gKO6cZ+G-Hp6-HPq8[^7&c(CY&1+OCkeGtk=c0h>1j'ZAS<kp<s^
%:e"_UWsf/PfaK/Y;Ip%4BAI.c]c_8c6//?()#Fk!!&\ZiY#)g)&]KF^lPpq=Zu+8;"T4A"KUc*c&TB]@isnbC4qJXb1tO]%2Y+;3
%&VMT&@Ta1nCfEtgA/I,S7J4GS`<!g[>gR[GJMH[EJjRsF"L?A]MTH(3O!Y9Km<UBZ[V)qX7i1%SBF[>sfZ[k;.jU>GR\@o$A1a6c
%K;8ps86US"9^:K2Unc,=!k:7abto>f,n#WbI]cM\(c#MUL)WaMDqG)I/ZBlD!ksjH9@NIbp]NqW!9ONf=$fS9ZJ+k3,-unP.#+:&
%/KD8/EZEDkHGD@j0r$9PR;%F)"V.eQgW0PcNf`POJnTpZ""p6#"UEsn`(u!l0\Egf`B\Sj.&Qo5J"bear;jI&]H'=lPlaE$l\uTH
%]d>QuGid@c"9t?@=&9u!f(02Y)/O+WmTU51kU'pZ;uhuu6>^+Ofao!\Ta&JaXBn.^j:DC+GW_Pt2$FZ8'W0"YU`'G`)Qp;FPT`JW
%lS6@tl%;GWL*1*!8*D(2fj[,o<#-e]W%8XW7rF9FM+*oe(Y"D/)l!I:5u?Ws#i!u<BgE#h6WOaP;P/@a!C[oOd%O:&[`OP5881JT
%'ssWc;`pOS!H@sF\7&,7+XKQOp.*J9H,?JpKep1+k`m#6[O0:mS5e)J8V7!R$iLR;>#JXn2X+AlK*!<n^m_?;/C%nX=N!m7im2:8
%]YZ-`,(H1V\rp&hO[r7,!<Xi3$AeJ&_RW"i[g?M"Fs4$A0bo:f?njT+H';L6"9a^qR(T2_!R3`=[!^2_']emG&WUHF(Mm>B"qOX/
%pq^S"(M[FASB(]eRq"L*(CHB8"KMan+,.?3.I*A3r2oI?2SdN-1u-E>kk[:F4a-XT3JY-JbU$XL!HSR79>JbB^i'edgg3A9XCYe4
%D6XWP'I!jMToR#@:aW>oKXA_=^m$l,UX4!kp;R67:"^p'!c4!l+u7;_!eqs7`Lp![S7)\>7I]MuKe=\h:G@Nr`0XWd-P91bJV\M`
%T9T\rGpSM86-RO)?k4F#>8YD8/g*JR=pAlH&0Qo&Qj.Rpk9t;%Ne</h"F;](fHHL.$K,J_Lb')D4j4ZR'uaoM((;V)DP5=7Yq>G>
%_(;YGn[]8e(6/bWk6XEBfaM`Q'G:`aDMGr@io$:QO2lH^5-'!7N)JZW9V_tL>t[T@-9:9R,nQb++65&I`D=D0KF5.-n?+M`]7Z4O
%ok016!C7`u#9$\]Ag>A(0foE/OFf=mR>(tU&.13@kX/2aJHF5hJKY)IBSd6c[R`.3(),E%L%F4@:^%(G35f:",Jn=(SK&83i1qLb
%\16\s/"e$4_o8g@F`#2KJ5E%5c;SIm$l@?C2^gC>L*X)n*K.;-KH`3u*4=a+&laSkZ5lTfF^.O7+pgU;Z7VPJ)IWZEQpOQk$6V!P
%'8)_p98O7Bam`0@"e673/Q:_oP&)[eNUf5p:EjRUAS>bH6=MMWZu>WP84SJb6A%)'aH7ZYoE*lV7-52X?C"e;QPCqe6He?'JX0`$
%rB-tGng4R*,[/Ar7N%l\DB^"'Pf8m*75N8"$3AWb"dJRd!\3gYF0e;p)MX`QY&j3'1:7-0SHPc#JJRPXO]V0()2SXO@U\.&%@FZ@
%jb@'o]n[OC9?])AlOf!l7KiN.Y+t"?.65V0.MO#WFp7F@`71$aV"JYj(`7dAgEAWcPfH7-ig"Cb!l8I;&gnuBT8Y,.)]iVj;=#j*
%mEi]9pc2mbdGf#1Fg:.;[(*V$m\-tplknrZ=QD9s-G(D9oOn:p^2[!4UW#s#Q48_nUKpF#`/ZooFHDJ"9VRgW7?2$VeR1XVbk.nf
%E6i(QJOraL8O+SMg^+[=V&3Yf5XBBOXc#N?3mg5M(>Se]?ujcI1fU-G\kkdS:I@iS[.32)"ceEf$uW=gL)SRYpRMY3?rl,UKB,Q\
%Qo7h_lLF.lejUF3OfGZW:n![_9"5gLT1K+'m1tj)U(\QCAm9m7Z`V+JH<M*k&_'o.W&0fpeZ#g'\4t_S]oVA,@No&J:e4f>'.D*<
%BN!a=b?D:D8A"FIm"2rM+C%M!IH`fBj)*IQF-p=Q1o]'0"I2kpPY`>/74dYsW9P(N@B?.`d6QE!1oMD&C+_g?4DdP56]T^[rWVD2
%g9Zl+&Yo\!`tZrE73_s>Pms<o:2_bH,ZjpKaf';""_u'(o>7mlXZE;V9h4Y?"6hYjTfd.n3Jj9WYHMR)4DgsOj3^,e0]Mm7)k7D,
%2@'D4&oS)Y1)b6E6:$`pC&d<NmE?]>7K_Tu!8`"&6Z!sAiT0Xn5i89%U34Y@;JL^jUPZq.*F#R9qq2f1S(BpZ3&IQRY\Hj@FcIdt
%7TY5LWH1?Z??2AtRe)1@(9[,%6&IEYP]eVDXgsVAW`M+sP;Z6=9bXZHj/SqV)jc!d>&YQ4O<T_qj\]g<$.MqXFtu_RW:E_Er3n@?
%D<Q0G2J`pEPD;4(MWD[W__u3m$+4FS5Ap8&0iGsn!eZ;*&2)CO)Np/S2F.e2G:Y6-GSo&Z6%]0&"Fs1%E"M**A':[g*RL&-iQ^)L
%X91t/>NF&e5.1YMYsfn2Ett:F$J(Ti#6j%O>@9h"^nAS9!oboPE6/ko9ekPh@agW[eV0&G,V[9*Mut38*BuDf+.#Vf91KEhFO0Z'
%oEdq0U=4slVQUXI66]a-<b1rE.Flp\K'M'W&@#.;_9oW(%r#_KDGo1X7XO'u#KPs9!#?S8'@UFqkZ?^t%@2I5GFsV[SFV7<E'0io
%!D:C,Q>rBQm<h3]92!-H=H7Ri,09LL=F@Ba7+;Z?_@8GGS#/j=UV4mpGd>0VM0bIM@Gt^:5ub81)%/hOk7KepbToJ&.Rt';#[YNW
%'J]iDRuuCI6DS=3#4@f`)<0YID$9B80a(W#+()p&FL6IB)0[(3+nCgE%mAm#=N^h;e=p''"<R:n(oFBLZ<1MI71g_]MKXepR(W(t
%H&Td,@>APPBu"u/aVU8u_8B3m-a[0G5a9U$I/TOB@HAhT);oYd_;ka,NrW+Sf$M5f:!V<$'XqF''Vj/-6[d^/['BhBGoMTTda;;3
%d4Oa?)]9^$Q0l+_Wa$[l+Xoe]m)j9:-pk".4/`h@Kar%Jf*EAU0cY7F,!sub&Ejc3+Pu[jVA5qgG"V?'#G1;5_];&^UL8VTYu3!Z
%g8?n?pKJS+TX/6DnrCS?I1bDa/otKBhip!8MptQI%A??R,Y_h=1`1)q9?@rml4M&_65\/E:JVd,bcZUe%UGs*DWh`g'B'IAD1mQf
%;%`<6o*fD&Q(WkQ*+.;XF@mhN;O6@5M:#T8`IP[aRhff2^pcuHC=,U'(0s&%Mb'"N+AcGWV1eg+j0"3KNS.t*5<_GilJ05c+?1d5
%1-9Su-3saL"u=uRPB]&<"=\BrU)=<"[!SB(@??4ajragg7gr>\F+cTjBK9KAFAP4P%QhI#ku8DD"OJ.(-TY+X+PP#]\Db"*cBQ/c
%V?/kqB*E>T9L&0;<0e+m<BcJ&7.tK!MTsQe/0@Yk3hbn?E%l/uZals;b.^Ma:BX8Ag_7^H#YKkLkr:L&$9U<%L-h&VlAt_bA.<JJ
%l@KkVYcW"`e)IrdW/FCr"?>.\&5jou[(qDJq:t^9V.%@]:Fm.EoC4T[?i*_jBKIIh&dQ9EW=4$$%m"luTuDJ34bQJr)5%+PIV`29
%5YX\I<p2_DAO?&OGiT&pI#8Y),AL.DKJt0Hnt[+JSY>8a-b<M[O^bhXqf1)"*Ku#.Bh>^MdP:Ej/4+?RSQ))'UehP(ZT.g6E3Y;r
%;jD?*/2^+Lgth5L,:(+SNhL1OZpW0VVef-q@62d^Fa>eXkc=K=VpCclNEE>IZd==VF?50@Tq1i!.A_]!!$n@%i@+>e4Mr7L4ZpXC
%EC%^AGf$*HgaZ(m*R0#+$)"kiF??=4?rbo,W8tu8a848*L<G%#)s[!MSV9I1.C?f@:DE'19kTi5;-7N5bf<r+n;4=;*==ATV,H:b
%M\)JeO3N]`k/<F/97[^=85SONZbf*gT]<.HXeLfMo85!qlf3/1l8MSi[-Y_39<*&TfE44;omO+'XVhA2A&AUO-KL]!q+#`!Mkd^f
%)mLQi4/AJ0aq:(33mll!^hO3iiEF,Z)!u9-Lhf)hMOWf^>I8?ZCCp&EI?5[KZmOm2NKHM-Xm$s(7,o34`Ehb<GRB>+;,C6!54F*#
%lfhmkOA_MQ!a906DipNSeA_L+0g*,[%3u-&,EW,o3\k4XbmC,)+b"-W-]QVdir4b\961.UA&21)C5Q=B:k>9mC1P,-&@`Q+&?bSX
%c3V+&5H#UT3kaUg?G0\H.e+'q8gU^1@]uT9@Z[CH'SlsWjtB#Vl6t$Q"M`)CE,A9f^DMlZe9HL1,kQ*`WC:;A`+Mg^^Z;f4N5;LP
%LRr[Y=g;)-eV:3>c61Of*"o;^'B1G4IOn4sB\EVk4=qRU9`^N&d:'*eE6Xj&^6R9bD''a8lfnYC-7u<co*d!;[AJSPG0ti/G0us\
%nl6K(4_R41[#7BV9tScC)ruFIl6`+,E`.<6OJZ;]:t@7&F&KW?-iQNA9/;p(G#9qfO/R&Z5QuarG#;d@[#5.:ZqCbKP-6_jon1i!
%VHq]AlKT[`HW<.9&ClOG9!jK\<SA`&A;-\fO@hkZMPa[D8>q+YWC:;A`1N!3RD)%]PgTtSUC1B[K82Bim)=_am8T3Ebh2Lj:B\Ph
%/1__nTb5=$%6fk^fu`ABg:>.GrEr3(*/JY1YX_\EB$a-qD49rg>RhInoePu&`79:^'AK=--_lgV.'[OuZY)a:UH"B/H_5+c\4ge%
%:@qr^cuAfF.WE%9MSq,G!LG3%hM+DnB\Q,q%$Ia#Z8qQAX\e?qTcA<6I:^-qK#T1`clnX[AI0t5AE8-(695PNFpLMTgB]fZY%WWL
%jsJ2WRbV#0G(If(EMWl5kXM%-?X.fNc1?4881dGBLusL6:q2\n\]#;O(#8@h\1YgVTfAngS822X6i^f/G,Q4qbDp6VLmt.cInUr=
%>-C8RnEiuX^W+6P5+"GA4L%I;^rrR9ih"=t[S/e;`KLskbAjbV$Z+'2OPu'+dNM**'Elhf'XSl@jP>DK*dAmN'#(ZrQe87B<R+Lk
%Z":%7]]6m`*PH7B39lP5OV$G,dLm;H&3&#cK[3B5o^)&lMU5T2[#<CqMT+aQdfebQFHeUib[ajB4`Qoq64mS=mEEN7H$gEP%Ulg!
%PK2$)K1'G[SS+6e4?q%!g+G&3nuc5&%2)LlO?5"a^rD'uH-M\4Mc@F6M^G#ag[$1VA35%r8\3h>OKF.->Z^+j#o,(b_csi$e2E<!
%AST+MJF2kM:k8jc!keHLOr1gD+3-50I]1X`m!!L7(,&*Ega>Y7"%DMHo;CmTD&uuSa&[N3>r@\-ZO.]^C5(Xg3!.M#7Q0X1UnaQL
%Vt.cl+B.3O.lfek^(%[CcU>U8e<P+a;q.'h%i'67F`M/:2*jBp=N\\-=%+4@QsaEE-lE<&5n7XTf1AHUG!t]K:[ldLfhI8\L03&7
%[(a8Dn6>V?K+>b(Cj>I,jqGj]d/b,44Du;!=aUH-91/#4.p1`.^(nZs86b+'"OD.Q,NU*:bi&A;`"mb@(%NPU(Emt5e(d2[N/A(L
%Jqb5p:"%^>HVZ%6(#5B$dQpL\Fb`S>2K9[X<YhkY$@UVqCq+T\g-EE-'=t\lQAr'+i=->F[td7.D=>IBY+C9REU,$0$\3&(-rB_b
%>.RHO\4mZfAe:i_JHNa?4CDq7*d.j@JhCme`GSt$XOtSZ*e9'2-4E&Je(DV["$Z*,AIr`;`*=m?25*/4)W:!/J/t5*$,oABL[I5+
%C>h<&4s'Phs,1b#^jT7n<t?\$62!c?j-lZ9#?XlFro"h5UitqMF\oHG&K`c`i#7<5J<3!#b,.81:lL/0nG3RI>O8"tZGaR^]YP(*
%%:+.i/:iOFLM#ep$JsTh=)0cBF&cTRWZt$^"g*%*JM$:/0eh@@8'Q$@";8dpn?<Oobod^uSLpWoN6B6l3X(;uAn/1NGc.9KGnT>i
%(';_QiqW^4n$K&6D\P%mYW1Kgi%`09.+,.Pe=+FLY;g"Mn4@l[GjQ@-i.Wh-3LU0/-\n7G\,]69\;]nsf7aO_+i@K2/Vf!'B01]R
%"$A0pdN31-/]V0bPgU2fN^HH<-LR;A;stt43'u=hDd\_G2e[Pc!?;E1k6m)3];_JWgTe`sD"+GkAo/45T)pKUdjf!d=2a(k2XD,:
%%5.7<;*L4q7K`+L`6#g:-RF;t<DCmWGUnUNTlZ/8)ocC92@F=/ml/#kL'TO'RM1>kN]^h3$`/om'%ab7R=,kh'H&OA)qP3(mjgX?
%fF'lV&VMKtEWSFDk0gsn";i+9UE&c_-[:j]\#kMik`1EXi?<5HMP<aLkh8A9kC_%_iLMG^l82mua*0peR$A1a4riWf]#]UGGDD4B
%#:-.;lSHJr%6J#9jRAi+"boC@Cp=S?KlL("94NYMT5Lq1`MP#u;hlp1-?r%.e.Jl>5dQD)C"Pa99jES_GTu[RK"R4s<p&W`S@l4:
%[*@k=1IS/tCg6Bk>)!e')`4>7qH]UOoB<J!T=("1D*ri"gF#1_[@ulQ(+5"]SZ]7i,s$8_R5h]F#GP%]E]B!fJ7IR/4lY]OU/)U#
%/:2J/[^:eRp9'2,S)8_3(>`YTFs=`p@<('+(JF"-&A1?]'$'mrT\?L7ICr`EO;?U6o/5_OS&2WAKgJ5s#VQrZiu.%l@09eU+1-'e
%MaL@g\*+;0>S/oJ1Lc*AYb/FHKs&]f^Bq"e%0i.[/[b\i]*A@Y]f'SP#M1*_NZs*N)3O5rL<5"d'H*ne!7a(Q](c=R2S`T]JRfH.
%jT*nG0h!;+ACBU%["CP\#"?;CUbe(q'nQn4>Ie]IOt@lLI_tD/&EK%QNe\q"&Hm^6ROhq4O_Mku3"&!lLsX6$Gn[p$`UI!q#dT-u
%7i29I4&u!O!f-=JR(`msA1l[=7Ic'DSt!SnRmOc./MQj<^a=M<$P1&CV&]hqS)?>t_C'&k9c(;gLN?sM:<^)9&\_0InIVZR;foP^
%\lkE&6Ed7IAkF\+9h4aT]dK0?E&`*^04\(89S+X)'-OkT(+nF=+%c@p%J8O3jlau23PIU&kG+JO#&9X7024aZ]Sgig>S0nZVEA4@
%mA#D&f)dmkdMONfI8^Aps3aa.mNr5hnR5Z],el5dL6ptr]O3eA+p`'XpW/qO+E(3in+NWW(QEqu@]'2:m#nu<]1@V,M7[$6ftfok
%=e=7h^pL:4>1OB71,*uoQg(M#K*;e=-(okZ_%Q*b>DsQ_#P=:W"U`>3V<H:AD(u=c8Cb7mlmYFpr#@deEB4h.:7Iaj3o'(0S0KEM
%r#D'C9t[W0e3cmh$Ii4MV1;*=&,3%VA$u[s3\YRR(YuQUpGCQN!"*FWi4X`cGl&CcI>6K*ki`_8)n;r'1+0#1kb\@*UmcB7XN_fE
%@>bN+E#UYrWOR:#O>$q[/:rSI+_D![!N)R;ZCBk;2JuI#6l><F6F&beC!K=FV(.8#Kq2Q*ha07R@,tc6ME0n/8%]9o&DfA.4_THi
%DRFI(D0ecT+OS%/a<rKXZR;b^!=Wf:b].uK..1T`XXY*pM&VE_FuAM8.]*_Qj#b->_-N%F,6ER<GQA_R0+DmP%c&n+Q6\DO,Ri4;
%B5%G._stfeFB[;YZ_]8p2l2FGNBdh60ek\N+eGaPd)eROiN"bR$8i+G=()GQOT9AK=AC_AG@&b/=kTFe:-:'pj#S)>.2g*mUC:BG
%a48Y8L?WfdK-ntZkC(b@`oI7)4[PD)R@'^f0EFg,(JOe%@tZ?MJjMHS(_#@h#Q@JL(WNJ8-`WT!\tEG00EC4(.#ee".\Ql^Gi2^9
%CPd&B$<#lnS8K%gME/0k,AG;/X\@J&\OU"ul\B3Ge[Pb#<FaW1.Ki3;Oq)Rq!f\@s<KK:<daC*9O(phuB'#j96"2Br<FL"a//4kT
%\.eJXiW]S07MPtf5sWP`$>qfAKb3<i+"(EJ?m72Pl=#cjnY&q04PS'[mqNX`Yh>tOVaa!@?HmUe:B>1lmA)&RGQbMj`>o.<]A\qm
%aJ7bEK-*'ni/XmNVXWWc8]$8lCrU`#P'lGl>T--/l%l,im8'c2BH%!bLuGn7J<V6`<\(;"aHjtD9LBrrBTe.eT[DmK)J.>i.870@
%Zl>YabU-Wu85>,R$%b8Yg(co3cI+A_RsE[ZdD!cg\0h6$TK1]UIbY;>*kbYu[mH#Ad`0e6c)]0a/Il+I&gNrX6)]KM/F\lG]oe%f
%R]u$F<OasU,nNsa#RpK7;[LEk`,n4!YEA]*K3["EMr#5PW0[2^(oBa&5l<5_MHt1bWtWpP%Y=C#TUm[-2SCCEGDpljR5;RK"h3jI
%.slN)JHV8576Xa;2i[#)q&W>^)Ff@$`@lH$b,TiVK=j+hdlAG%4GBtpdd#7.JY%Q&,ffX_#ks=e(lR-$9YQQ#6&*LjT)AWU]uuE^
%96MU>Dh.kL'+VA-B'/e*[K8$G5QK4t4m8#)Lb;L*.`hld[@k:d=c[E;ISSZBD_d6='KEZAqmmkn\&YrU>jGfd</TV6$1Q!0[pYP2
%VK0G56pLRp!MPluD*7Pe,YD!<Ob^<\6b&$a+HH;)IN(CfQ!`GQX"_<nES!YOKSoNZ%#-UEl4-@W+Oj2q_LbYe0NBD1;beqt'Kg$k
%]3A,\6Hff<M00fYN5s^TnS\^M,LH-Kd3`"b(-Y@SZ[p=iQ`!J;M.tnLC?$-/e-[Y]?=[=KL_g&<^RJ/2!J.$\(Qs`1+&"ko8qK,,
%3_a#X'EN?e6A"0h2mMT>eut4eP=ae44Y$XcVl1joKabk]%"'M.:q/.8Jiq4Q0V_XmnNi?I8+OiD/),*fi%_cL=O>DPDa-bIST?sF
%>7N&%S:eY-Bb*!oP-n"2^2k*qFU%_Yh28M,Tk$S8Qj`R!8oW(Y>rS"gmc.mYLZhIDURWXt(SY0LY+L=c+Disp\O@8[4!9p,"0u/"
%;F[$/[R!6K:n9t^S!K'$@m.?oA`*,kKf*mV=36?KP]Kg$$J^2_!#Cq^&p#]*!>(JBI:'jpbPaAr^P8Z%_3^;hfQO/a!r/"%&??jf
%@aqer(j/7"BNLLS"DLk]GD%Z-($kIPrg%NfM<fYcX`8Fp@h'K/PbM-q>Xi]4"m1Jn&+Lp,EJd\DH]N:uQ<j%f45"eoI0dW<V8TR@
%HYAQ%n/"#'8GW'R<$VUr;KXL;6%GrI%,#c;ITUI/5Cd#]72XX#4V,AI$%Ir"6hD@jD=@d1PlU(@\S15QYaWHG2WW7/b#9Z@G$!k[
%#&13i#[mrVB^VT._4gg6\8=8B"\;[I3EM]*Pi]q2:h&A`Wa-1]@X8]^N_0H"4@;2'oVV:8#Xa*RYgqe5F+?_UD0rGSAMHAs@!&q2
%$'s0C&E\*_6nKnkGg^:il8C?bP+F.9\4.#ffY!::bCmNV3_eACg])3'9d5dAQP@X?4K!%md1;$S472*S6-)P^[:+8*EH=hG-&X_b
%8&h59)uC"F#+#Uj1r2oFHOUTZq??nnn-YOW*u`A+C!Ei&R(#)'p^^mW]<4L6>Teq'XbK<WH@P"4l]VfV"9O5YG65TUQ7>oI](U=[
%\/uAPf=fe?5l+:[D&Y^Bm;j6,:F>,hdjb-)F8uWnluAQ\\bmeRM\JJb1[a5m=d6HCJ4!NC\%ZGje'[Z$`nGJ>P?jPI^phC]ac7rV
%HaS^jPX]4#<4k[!]p?ih]!1qiHRENl)]N+3RNG*E9Usj/e\&+Q8Qg9O2,lEgmkm3kXNW`;ICj'`!^H\jf<0fbR`0)oG2=S>2&GpX
%ih&:hU?aQsCYjMt>d<$.hdeq&A<1[V?a_3p.I-<?8q)hDB.%YS!/?b>6U*jc@EOPgq#SaU;*=Je-Jh2,DX?AcMgJ6!i9E&I=kU1i
%r"p2t`,[SJhL&L+0<=R/dl"ZT)Vb;:gPR:=:>M]k9IjW\!rYg<i`2:#%&O;cRXe=<'9@Be<>%rELbM@u<6J3jO75]?%8bJUN0p.o
%f!h]]SX@:,])k@=hAA*qGm0*[EDa;Y[ggY>)[l5=hK]/\I7TqG=PakHBI[8Jb@[+ol_dR)0?pA,g(HlX9k--$^@EmjT8-Po3kRJ?
%b_N)7W=epoRg<-47gn'4UqkaG]ijI(>QnLMe5OTu6=r=JfHD03as-Mq*QueQk@Yu5`Z6S9%MVGEhb?Ig$<L)3G^@&9M_`%N#22@U
%5P&`s]WA-B:Y4;R&V_had<%(V-Z#bLf(Ose:UdQ<cqco5ZUs+DGR#5.-d3'hG:6<<T!4E0)ddhjLPa(_Q?$g/ZtYUj.lC=jqoLA%
%s4KjbjPq=DG5U'2LkI.Tnl8NcG:<CZE3INW!Y6X2XT3$iMWB?LF=8q=@bO<Do7>&En.f8YpLf50H)AYtAHgts!n,b\DdH<+lQAp$
%c24r6Fh[SR@GfBCOe;N3rmX_3gQOp7]:uRf'QK[V3B&BT`_C%^!\D9?GYldNIKc/)&)Bl,@KrS'+D9pk@L@:npL28iDG*,Ool!b7
%W%&$#&(*<<clS>VA"t_OEJ]j07b>=uS'D)nBR:V2I+^plN9'_[8[7TjkmQt6htJa;:CE%c"4;bPkSgUjEW)<=UASVc#,/gI\.[[E
%bo6#3&jCpq1@jl^D'm8Wg0)K*0/.Q?cX\1bC,X0W`/afA6VSGW5G%#0:5\@1WM8I60H]@I9-R+q9NH7,ba0,inkH.B_Dk,k9lH0q
%>A(\aZ'W@jd&__(?hQ,:TuN%,#Qc"52GR$MqK(i/WecFtf*A;`^.E(&c&`R^,cO)5U@:IdqJ^)27)V%ad"M$X22/jk3V4XZL$cY4
%HcdCT;_XUZ>O$ITN`l)g4e(*;p`[S>cZJ4qOa@o)h@CVYBdQVJKg3/,9NAX\93cAL:"-k\msCC#87:1;1fhQO8*akkJ*JQu*\Kt:
%l>S_F4eSoq;W=Y]!ZeOkcJ90SO+Q;h=uuqL4Q=aO='^'-fU02)M^^bdO3i;V]-J/J6c+YtMcKo6(PU?M76f97S\h:/[sfaRBi7Ta
%3]ZR\&H^1c)]Ql%;rf#)lWVlK]h@)E=gg'#J*/fcJU/?ah`&A93W2RO/E(tV@:2+q3ghU';C7]U2_lrSU,ETDmZ5#jcRh$L;e[S*
%rE;rqHM72HHZ"YLR\4QiI[tL5A,ir2Zp",GY4q8,f&ZK=YFiG7&FM2/o_]Pb9`1iN$8O,N]\,ibMmg++V!&?j=UB+!!GGP@ho[,b
%9C3//1g`5o8&ik\UA_Wl1gU`gOU9dL53)<_hgUsn)H[J?ArB4>W$^1Efak,g64*sSY>3Sn67Kc['4!<P[GAr9<)O[ZE/J;n>uF#+
%;L0#lWtgq?:P8)/J\D,ZgrP&E=Br($9+(l*,-55:caI4]iOY#e$Vpk5AKdgG7/N@G;sjOF<mnNFg8^#U0fe>0OOt6_5m^"UbUR<D
%iBA)=&/\WK87koWOJsKf:!4Mo_he.OpaeR^l+KaKEj]mNr;mZ[5nV\sSF`bKODK<HHnq!n(u<`S_otITK4"r\8:UIEUQ3d%7U9V4
%O60m9aB);>:L>O1Cn<PM242(Y>XP1t_aJ&4e"G88CBpZR]C^/b%k7=$/aY)<+Mo%o!"$FXUdJ8`U_Us;9ub;QB9*%L_ciN66(#``
%`j-R]1P,VrR'D+0%$Ssq5Lmqh(#c2Y;_?K:Cm)hZWNdH\rg@(Zf+*)^9"WM=EG$RK*u[Fb8i,VW"6YFrX:"G4e<PMP`#_qhhC3Mj
%&?oO1e.!Ek.:J:B#\IopTnK4!M&4eVaf!!8FBV!JSgXqSYRS&K168Yq?N`bh4Bj*1B!%2?hkcHrKTqjQ+f4B6-7Hlrl]Do9^8fM#
%`\3X@]Xce>E8%j2I0(m@O\$9;JuTiGlVi*b&otfuhrH8DnqFClgT(e#b2.hpU"]<k$B%/Z[g/nV]>a)dg>Xs#s7P)adNAS&=2`0i
%]omGn5slb5P,%k7Zp@&G-s0'@2/.9t3@:RHEXh]/=g+M[-8:au0!&FCFEsF9Dne.ID<Z*iM:n1*5>-r.C3,Z=l/5F093I-0Nq\:n
%b8K`c_4(B#[Fqg9g[ClgS2_t,GPH8KmDdA6P5k6F9"lt2i-E_N'/">1#,?gXHpK!`+.Dbu:E379*i+?0oujb0rf<[gKE$=EJ_+u.
%(Kj&.m+O;e'2L@7Ds:L:Th;8@ELn#EA3#s9C.-X:BJ*`IQjeNpZCur)JltcgYp9V>#iT5J>p\-<VBc:jq9Tb]p0\ADRVE&Z`1UcL
%)&*,K3$jug)`H<)iTqhD+*2TkoIpCq+S"9D[p=&2iiCI^[L9o\6q`@gA3Al`0HjV>4k8V2/&'PM^b9/iYb&''kTJ8)W*iOZSIeLL
%Hh[e"Ao^K+B^kS7?u3rg]i\DcMMejSe2u0AY`RielR70PIQb-V&`)2_KE.5T%#$Om]K4+D!P?*#2p^0?/!*.ZW9&&c.kuBX=gtt.
%e@X*L6_iK,EK-u>Tu1=?*+P78<L3SN9!is)!coQIi5+[""e\T4]X-(oGdSI,nBK?d-\u>gTYgu\M8=9P9YO/ROgogcM"(]&lg1]!
%Xe;4=J^J&c`_q"\aLV'L9FS>*(0+pQTOJ8g1kM6K(8-)/EJ:=SGR#KIT`T+\:TW;jX]pM_bKW<sA4#d)&\n1+nc.HEm>%<I$;K;N
%1e,:'-5>D.n=`-B$W.SP%r-%nlP-eiST^?5Kh0C..-FDs2oFjR%%*ssPmb\s9@sm<D@!TKmT>THa$HlO&ja3FJ#S<L7;#.Vek`@^
%?Bp?>M0cW"OAY^B,BC;#T%9g"$q,CY0Bd5]0F0_g7rO8@L%0e9)s?N!_i`gb3+hp%0uhZQK/AcrO/g0J%9p]MXENQV+u4sJ[P\t;
%V'nJV<[8#TlgTUb778A&KDBTI'>_8CEAo-B5AJCWDkT(:Ls/_ZKdB,aQLTjW3-E*rk>!KQ\4JL@65>/o4Fk'Q&KN!OW'3A>7AL9\
%-(inq0h##m9&T-#-<Q/,atL]9LR*VWi$gX_;]]nmP)*;g<'DP":-2KLEOseoga1X6'?M@>C94eu<qa]Hpo0rfn:>Ng?;/R_IrFhQ
%Se8cbf?kN%gF0T"`4h#HMbZPG_#-'maK:pL+@[I9Tb^m,PLK@PkIjS=cngOC\#/%\V,a^AJt`9%8Ao9&R53'cAHup5o=dC3C*W2J
%(eQp8ICZudU6sr7Xg;t8]!`'D;Ok%21RLG*3!-PeaGQs,mMhK=;qfF"^"]7i$9d;baGpLA3WnL<o,*sGZ1N#?[9XA%Q*jo?W\%D8
%9rUG"C9:/)Z(JT3OTe`1c=^"tKJ&6VNE<fOSEQnse'VT/c]OiaGqK[:PKIf"AnjOL5a+QhGTA!QGO,_7AI&.06fUBj3Y&#!Dhb$F
%mblitdW]\tf\J\!D%@=T!L,c!=jZdNM\u0jB5hfe;+ds>/D?0G@O(qlZ55AS+2N!D$.pme?nlp/,?HET`'aiL-#5Ng/jNNdAF6$2
%^64'U^[`PpIM17^"mH/HXpBO!8mX&?jNPR_`F@4+n^^)&!S`<a1XQoNI]YonS52oa[5`fKfBY<&T\',e;!Z&:Fo,@2?f]C:_kMa\
%Yn%mEoR8dBf=ggI\*6/+`S;dQ/;E0"#g%kK6j9g*>mI=8inpa9Z2p,\3H,Iom[7+YaoWgH.cO]`XY"!*7u;)^@\ep#9iB?N(%cPc
%V_76Z6Jdlt)[[?G@ZXDXI*Idjo2B5VOK/eu/jqg#YS9Wm64(nE;H96.h-.>K8\g#c795ZdAd>2BmNTLM%dI->0F:t^_K'H9ANDr;
%X;2\$Li@`-dLX&Gl5II>`ESP#*FCTA9u'U,$_ES;S2b[j,6p'Hr=6=%<$_R@C1Y6i0L!d3cr($>in6>6@6oKgO>/MnM*pVB?U7"N
%=pshL%X*.cFA@?`U<MZ]]862Fgfmf.DAQb=lHhm8I3r_Ic:"rY"pu7B'`%!M]oj/pW(u#gmCScDBNK)dBjYY&1*S8S\[PYY=aD(^
%$NZDhb5TB$B[A9B%1QJ\)1'!9&>e1#41ds#NDPo+C7c-eg8?fP]Jka]atnDPhO>B!0822fF?an"R7,Vs'3O7#='1V!IcmsOi3E'6
%k]"O.'furlk1='s,b<Jd^)HY\*B!J4Y3k`ja[!Q5:fp]kc%`,OcZnhL&1S^l[WU9I-1-[TT$h(I@XYAC5nBP9*k>5f^nX7)0K%ue
%[=E9p:B/a.UPanUdo<NKeJA,@Q$\f82eo?0bEk&l&qg@?"[p;ODY<\QN*P[.U*>)7`dq;kZHAk,Nk1c([Ua7)!JNX$Nj1";r9';i
%`Fl<*Oj&1c>pni=j5,kA)Bb>"_VA#JoCs5]\q]2Xl+<a.%Co!7.crArd@I>:j7k5`:Ld_lK;*jJFI$3CGPkc:J435!Mj?_"'.%Q#
%kQm,kP38MaJIC\3RL4eanG<PlOT)-$MZA`iJZ,$X?Wi#A!ZO7XA5ch0L48i5U9>c+a!>RN>M$BoVQr$h87SBN$lcIpa^94orG*Ue
%,>$cW'O*Rc#Y&.4YCr0)9lW"t6)b;'D.jfUd(_\?W#j$Cb>\4-MtQLKjIM73/W4RBCTaBq'I_tF\IWE1Ta^FG9f.kAJst\O9AV=4
%EICl`rDKH)M_48+%cb\a:-N,FUFHe-80Jnb4KJ<--GF[qO#jaChp"b[(hERj%B-;+g)dmI7b\<F(7dA+G2ZlMlhXpU'T!o])].-<
%/5s1c&?m9I^PsuNag43+8'O^JD:=6p1qaVuXXkO$l/,MAikDt+V36^p)4EKm)UOR[ER?mC2MG`MSJtMlDqJPg#L6Mm#Y<[^_0S'?
%.\uDI^,?2N3YG\<kFhL%`/V7^<MS:?g4fl'QWEjoMB[EL`+i5kLGj=*Hh6RJNm9W<@3.L4-`=WA?'AO$1nen[/TBLpdUf`8c"%"9
%<SoGSVLa\3CWK5Uq')&X3A$MS.Y;[.H5YNS1?!E\c6^92?(.@M6sNp]4@!U7B]<pM#(Sa<hbP'N[bL`hH9&'UJ*ci80h7HGqkL]T
%_PXKBogQsNk(p]^+\@UVb!SKk$Z6tnpLTGn@+aiN"j2s)Ug&UJ"AKjJ[U\OB`L;!O`Z>P_9DXM/^C'b-@@HRMi7lC8Wb,a0p9Ws#
%"F\b;_C%>@ALI;@!N3_s%n[Q>aO"4OWJAEM8NEp=ZK/r4Nk@>Ogk_"5dnGCqHDrp]Xm8:c#h$/L>1AFCP4eUWnO_MMqNo,J[2LVP
%EtAc=l9C6R:I9Rmel*(u\6Wf3IMeR60K,I@\3ZhYn8>*0YY/f)"59<C**&gV>?'9LXdI*Tq9[XPbV*2PiIb8%6,+>kf^0BiNZ;cL
%^aiEo?$HEkq#5>/N7Rad/o'b?_B.RRq?jNlN;E1W0F;fjrYcT-P/fb2ciiH8UHD`tH7FYY"9Po'el^7$(!e[(G&ho\g@G'C1ckAq
%N;VbhfX:7@pZJlnbjl+3p"^kqViE)r45QO;H4r$U7_AGOrPE+BL\AF&Go<8@0bZr3qC/.;7.!5^2A-h)0b$I399W;C:f2K16;%^F
%nMIQ39tX*B+#3\QFOOJl:pOU6oo(_Q<r@\$+-,tb4f7%A&[Hs3i?i2i75%<2DG0+K2s#3k?H*&T.\(m2C9.E4#_([eMuma;\HqV>
%^W!T(e[NJ8io?Hf]UjLfVX4hL<8;A`K(2YcAUQ7UCH\7Z#1eenHOM'$9/QDucAY%DAmc6kgMUTU1KqR*.3OA@)jO/V%oJ?n'AlEY
%b,&2)d"QYkql/KX2(fIn[AF_3b@JqUJqHXm[1_W-DKuX,J5gm_*GI'Q'iKgiaHi1HfXAdI]B,C#Q'*/$SdsVJJ2.)$^_\.u^+oa5
%1."q"l?GVeRjZL?a;PkLa3s9#@Kl4dVK7D+6HFf(dIE<R]fm0`X:\(#M=gN+49!GV0:6K*XRthK/bln_k/^UGG+D2H5VnDP37;2G
%S^S^"V'O5M73@52V.#NmX]#=86`S9r*p7Q"L[4eX,W\,7_s^1srTFXkHrqD=AtAq`aI55TO>:4>iEun1;[hpLBMXJF_\rl5.YVKm
%$7%_,V]qT]emQ:%q7l,4XSHmdRq-J/jSd(u%_0=Oc+@Y7^HLs#6:!#-M^P1,M4:$l$D"9VI^g(NhG0n)FFT_AeYSc8gGoQ*2sLA5
%+B_L;s%=*<^LCEF`cWI&hjV"b^>.U_=Pu6'&ke^XY&8Be$LV:GOAU?RAD3R:=<W!rlXUdTd$$hJn[+*7p%4bWm(,T'nsl>Jmg=_0
%/p,ou8G?d@UoH\i.&QKcF#^1I&!$f'r;GNjj1ecB*8_"c+TqZSC#HUTjua6ib.VD?*35Ou^niJd1s0^.^;boArM8)-=*RLaNO!'N
%7.Mqt[tCSf>=u"eFChRE'FUQqmCjW5=Al'K,<lZ@ZtBhfDAo7'-[K'Sob\K#n>c/[-WF6[:J)&:<p"PaK&g8"[A."8;IRcAUHK5,
%ld;2rh;/a?6#uM!$eKu8T6r63I;Bb/m4j>e-V0fY$CQUi>WlWk_iu_3pKOFN)iaLI,H\/]l+>qLrrT.L^I202aeXR%JHp!bKr&+0
%P+8$&Ilo=cr64@JD"GiSK.@Fmj0=Fi@@-DU2X8>a;C5QqGkI,[6q(3\4A8k)N;VWQ2Uj-.N&VpLOT?kc".NUM07k*ipg=(p*&npH
%(b'Q[h,[p5,'AL5*ijr*JH`h19PlcUgf#B3?,acBlQUp[ea7"r3/m4]odH&G2(0Q[:ATPXEbGTimpkZ.8k-^"+2u'Hqe/SPIlc@6
%dogs@)ArnFD%J-0mg"Rc=.L`uhe.q=65k5EE+;6.-LI-?Ye#Q7N("DsL99h'c,u"%Tb>$Ps7=#dp@nrG+(]m21O(GR7dO]<[oEHI
%QuiXh-8Rjs/+4WhC4MfqO5%Akg'ruD:p!+mO%!@8KE0<U^bor]q2/Q%.b'<nK4i)U8.+NI`]S$9ZJ\TuUdWNS1<#'W'@I)1!Ut^"
%Y3'%N@MM#&)UWua'!&%/6]fEcJ7\u[27O$f.^IS*oBP:&f2G-S)$&Tg!KsE#Zl^<)\>cuI*5@;%Ac`PV_juSaisWEd\k!e(k$Z%C
%$o=b@#R!Bs`EGDYeY*;1JI:H_6@c[U@Bd2e1.5#6#Jm&8@^dhUS?f.:l>1;@BQVJZ6Tn?+ibXM<hRTUR?Q)-u15N;#%:+.T;=rn6
%O@:Inc+:upEU1g#1H<GBo3hn*$IE9^^.\ZR@,o3S@XF4fHlM?R`?F^7^bo?tR]jaN"6L+2q>6t^*KZ72;9q)Z/$q2UNrhLVY$OB9
%Hig9"c*b^.^m?G>,+%7uV6bZ26o<M!V8JAU&doWQaGe8d`T+T7Npj\4n0F;da4<O`)La[>(1?K3?bC5@=H*a-F-f)!%'ia,Y'g^A
%MZ+0]3,#qQSO!^!%@'_kJ78i$_qpH.?0,nrkG;6Ul-RJmJh@C<ROoE1WH%9c.Xd3,,70K&;d:mg5>L61BW[:nV#l#./)Vf6Y+]sJ
%irDAB@on?X+e)'17>LRAf%W61*a63LEZIr@_^scnE6orN.54O.d.<U5p#WBoG7$tdSDA@,cdRQ9[##lfR7iYf*s.qJU^lCT*#SeB
%oOXI-RpV#J571a_Wf?i:.r/]26Afaa+%(Tm6D^>a,r>l5VhCm8kScUC/Dsc^ka*GX/;BPSl=5Pk+E%MnBK\(@n=(G8K&rM@86'A>
%(e5`0'TbV[Wb"Q>b5mO/o9eK*<SVPDECsRDP74(8UiK)=iX8?I7<Z5J?uP<uDH:<#d7juB5j1s%9g[l,nO#b'd57gEWgEd@/>'_i
%e0N(:$`=U7YF5e&73Mdo79@u5]7g6/TnZun(Hn(-63)R$%B`=Alaa05&r==tj+?#SaL+0Y,$q1]Dh?$"mJ8O_iHY.;j45BX]bBWt
%>Mh%oh-(A^L:H[l\'O5_b[:&\&Q^Wh;/A?+cYKIT+/AB;3$"9^-?D/:YK%l-(rJDfjqJqf5lH^ga-05:9(QQ#]P6nTah^na+@.Mo
%HstPPWHYTOnVnq<C&,26)5tO"N7H-[DV`lj>MJ;o'L^I17e+d'CZfq\e\E3[2B\LXF7q57N!(nt3Q412/2haPU4hC343"T#[V5o`
%mX*\Ga(E]+bFla0jh>)&K$cUnQmBk,CggBr4-SC&&Nr-m)A=q8`S@Ab=-9j8DGM\<Akn6JBi@gj?%r$K@D;A]0tQs;$(d39J!kZV
%J,_sC"c0^ORqW5;m2MB-0`RGp%0WJP)JX@a<2Yif#&I1-XC<'A8F3'/U)K\b"=J.s?ic<UFND-D_,H!I)_27c3Jiu_Cr?9=TRm20
%Wid[<&Zu"*k&Rbc:ThaY/DCTpH9lmEjkk2/U=DR6_aJ?FZYH\DVKlg@Tlhl0M&o+Wi@DNDp$J#;JX`rXn%0ac3Aa0NF!b&8B?T)"
%':or/E29gD$?d,6\bMr*\6MSiJmnk!T7[rRJYDXgCSHt95P+MK'c&u@Z9TMYaR5G(fmB1Gmn"JrYf2pi6XpT5BS=)sVCmI^[HQ2]
%A0U]-d/o@C.ICMHl+;cd9$gOc[^JA8X>!aZTJ@'TF_HRY!Iu[?O@ciX)5sW*i'q,+j.\tN2o&.9jH/O@[9s8:@2?s"Jl4:Q=!D3K
%HsclUolG3)/:pN)cj<_S#EBSN!)USW9h\1^2k:FAU+Qk-B1TTDZ8ggu48?hYiKXmt>\Q@\[8t>'>JO*P"*u'^hmW`;:l+;TX<@/]
%ZUe)0G!bteY?!P)m#)-uMIf<&HY<q$J9;[VZ)ga1f,@b^GMtQ9a4k._^!gt=U2[s@c,\ZS!35Q+\TYi4(A5sMDn\#8;GiUdHtP3s
%@`a;l$jooKW:%qeaCHB!fX1BX,[pV.Q4jj46PBAS0e5U^#<Gl`4tDZW65,sW6rSnd5Lqh!@;8D=dYU02G%GpGKJJH-jOBFmh.UNR
%oDWXNOhNFU:O7HOEhto;l/kWSbT;MTEi(^qP/s-L7j#YMN7"^e!k,^-I@A33m=,<U?qg=LB.Ire?RJO6I^Q??3FUsT?2./^4t#;r
%!m-,8^;<KQ5R5>HR/b+t<^k7gs,!lfns!_c-aFi&HoV0DP&f:N%1`HfKn<u`!#@[mbd]"^!%ubRU_CQ4a3TAbP?n5R"[SH$fL83O
%6B7iX+HY_q+VrH7-u&Q=q>m^7O5-&mok*atG2[HFiZ#cMcp3hOq8jFTj$dTGn*2W5hLJ(%4uAMeXP<Bo[NON0B<X0'BQ#mXqCr[P
%#s"Sh+'!1%%?M.WH>":9+h7nd<n&c)&qUIQR`r%di-TmI$HQ[fB$6umYu)8BA'*kI#Uc=dDDF&(Zql?XGdJJ<)jWJ#TEGUWd1%"2
%8C#$(4O).Z@3BYM0JF$sO7Oi3P>4St:*p=35Vd!p+UqD-?-7?Ka1pOQYqq-UbnHcq]KPde"eiq()PRIr]*2B:1VP.$HEkBs7Th,_
%rMX,J+KJ1;ZX+P7%MP*g*[*._on=P"&6%Xg!5.e`1;Oj%@\?HBFjAnJR;`b`,EWms2$6f'*#E_k&=sjN4g;.e^JfgVaFN&[hkb3'
%gkT"*&0p3jPS3ZTV^ck.+jKQN4Jg3LH7O;M&-&_ID[sZSoN^,U@KR!jPiIk8V-E=.Wt?C`@epKXg'(c?PQ5bB*-gga37UD%i7-]7
%K-fF#FItj0%[a%u'+I=&;E\\JclOckmch/lf[hZ^:G4:HYW;Nar#2W#a*j)u0+eJof.n;EcZ<=Z9UH2[eD&uB[`h;ii7k+Qi-]tc
%QH;qTpEWWkJs,iqIK++Vs-@WC6p(0*D<i`!OAI'*2rXZ5^<B79eNdc`d[Q^;q_(ca8TJ&B>g'7>oeMUc60Q2-;UHSV7FnspQL>l:
%3a"V+eMo8gn1313JQ[J)_t;(`QH@%&ULLYV;9X0K&I-*5:m',@hPob]bBs[/S">Eqdod9d9NCXe+ca3,hIOT*QGK`IkbhOGONEd+
%/,O;lk_[6)6#%2m15@J\iWs=jd;QN1i_i)>_A'a?!00I8Lc?UhT>kCS\)i^#->L%KGh'6Mdq"@+*]=*/bmrlHROU^n];pj1W='sV
%C=t7-<*8Y_nPaC<V0T3k6G&&*,$k]>djF/HbHn=1CLm<39QK*m`_`U6]5GMTM<==H<=-\aHpuUX-b1QpZ1*477s)-"F.[@"m[ZjO
%9;6moEM@`k<XorhO*uG54*"PWe4S^6\lL;D-q!jQ$_"p$IE<"9!puRpB-<@[ZuateaOaC.+E'#sC0"1aN_@R6.D>,pf00.<_I"qN
%Kdn3V6AX5h4CH\2S8"2'r"@Hq;><6'aB5#6CIOHnDM+iDgiVE*SS/b-MA"!2KTBj8MI""k'WVW;:`_4oIS!Qua:f,+8$K(N%d?r`
%Uhj*uon#M?U&p$R5/X07"0=[<)Ja;%aq;Qi_&.Y1Ym(?5b%[?3B^Q6S,ZWAk/#F[Z/FqI6SQ]*>=QDk<`.[M\8(bs\U:QJt6ug9j
%c,f0#q:KAYW'$.F-4%LIVm6A:A_;T`3#)kh2)/F1ec9P9/`;NMQ+?^adIY]nU(.FK6g\rae)uSfWGsVF-\j(4b57YPYu<GT<bTmU
%!H_"*+.M2uJPa_=(plu+L]fV1Ma2-5+J>]&K-huk85_SpGUU28&oir?<0C"TcjkiT1ATNm\>Y=ASH-e2*fBlP$criW>u?WLDp`EX
%8*7<W=J??^?cWm5q)pN>2RG=pg)[*C?j8Md5\64?1P@;,5DsTAA48(>ArHJR&@<S)m5Ue_=q'uF>l5NNNsVu>?'+;M!tQMr(^XE`
%iJpdD7^@PcP@Pt,i;BAJpC$jBM%g3qfq_YEjS0gP!DR%>\CB':JaT>2b7YH=n3K)iXBEIHo,8/m>n)qZC4:d#8@f+N9-F^tK(u&5
%8l.<T"fTB6(Qo;tZ:.IqlS:$PRJ3=?MY>9a6oB95Io-9fJAEs`D[LA/$)<i1;dH$ZSPp9ej[cVL'B'5Zj"caMc:tSTkpH&DUL>b!
%1M3O>lut5A^#nXuQ6q_"6eDlM4lE4tWjIpF-h/oEB92+dC&4R'eghLnZ(r6'M3Z+^Tn,uRLHM?UM0u7T]0TMaki+So:`#D[A=CaP
%+K_i3cIn@BC+@B@R/!*;bU;,A&?aY]Or$0VW:Psc_*C)_Z)YFJ#dMPaWS.`lRVrn.WUc[N4-`r=_^\<P*[7A7E;;6EV9d0&%n:G:
%n]!I0Hm6Y::R@f^%#@l'WoSq@<ue_-0.#n8<DM)miBg/5#fq#Mip`O@jS!+L%mj08TTgh'C@i2W%bi2N-;`VYe"pA;R,hdD`%T5Q
%56L*,>l?#%/*a/;*.(k/>NJn2@29k:qZToThh)Md`2\l2U(*5f_#;dfa]Wg2C/i?<[uWqf8=ECrmN+sLGuWD,&&dmeT9>+*<]e0A
%';3o5Uhc\:V;SC0iG?De6@<EnQ)5)TK?&Utl6PO<2-RKNA?@ip:_G$^=1a,3+#N2B`ha>8BY?4EhUr7[*m3[_@7'jDhTiC!!bf2O
%&lrP:"D-DFnG/;/8?J?:$/CX<HYDq0e]g/Z*C,Dt[6@@9qoT^'.L9WO8&]=a&:+='9dJ<H?-pP?Al^NK:/q^`(>A8,5ZO)<AZ5f;
%DNYG-:/ul?-S)9R:PAl%C65k%[+965$'L:qHd=Z-6>n<!rH/CZS5jL:;QJ198Le#R<`PVDKHS]O;);HHSDB6e<pTsH59D>X",T<&
%Hn;@(@+;SLUa"_=4@%H\P?h:33i_CK"O]0k4=Y!&YA\BY+Lr!-lb6$5/k!LA%$/g-f9`>piF4-CH*5=!K1sBSV6H\u-NPE%"oC.5
%7i11/&4du"6=H(/]bncs>en3p`f/F^[8e\C_U(!qKc?FQcWlhJPF3(h4R=W&QcH3(<ReR'KFp2dlI_X/g*9^[Hf/"RXKsr+$kJZQ
%>QXSL?$F+BM.3WHpeT;?,jQ0QfV2E=#_?r.Kr=u%oPagMquAXG+:!GN'ga6Iko!q[%K`-1)i"bd1T7B3KUR`2LL-+cHIdo>dYNZ%
%I?kF1%jlbq;seSe_lThkWX/'$DE"\B^DKh@'VnZlMcVe_*)W\\c5o4FQu!OM*-lnpFcK_1enDhbY6Na661"90U@52X_;I>W0/*e^
%H!8bTJV<[UE2o^=D`T;7qU<QVe`r)#;OAMu.4T5/-Qjb]pbnm]\gYflg=nF[T$]5jUCNmY2[bmi*XD*C=fq%qSl3EmWI9AFn.Yp$
%,>N$#PQIUfTH`-GHC1d42@:4H4&f"XVKC=m_XAJ]@-M-;ciYAF6dsm?5\Q7;ggi?@Yqs**G_KtH$f@C#+SI0,$LkipYl=p\#oHPe
%N\bmjX<bA6KXcb'5W^,4aElU*"q=,?r,0(LR--u]qdj=p:oU:/P%Cqbc*Cp>)lt?.6;F:s+J-m^\$Y<(>PC[dr;_$/2qQnZ&S"KN
%SCXO=ff[sNY1.OVZDI;&Neb+4#r_`bBC3#B^^nbb4k./CTu<^7&'3e(6O*`%XhP32:0&9Jhi903[]60TZ[E+al79Xu8=Tup$ZHDo
%+XL3F(KrOii`2h`[M4ICLd(#fWp!g$*X>r9Bhu.^3f+rWek7+fe>/*N<b,jDRYb,bl4=gbA#!^<bmSP[,As;[#O7SUk"sEE4ba")
%-UJ!hSqo*8O!8oad2n7_If-9e*=8s*qS=A>&kVDl:hWIVRX*uq%FO%.<"U'+KGc^2U`#I&do+9Z(SQD01>?"_,onC[Dsj4;R!nQX
%8LDIh7hC0a"HEe;r_.bUPhP5<WtA*Uf?Zq(H4`P*V/XRMi$]!W+_/`:#uml^ANlj,;ERB9-j8VL_uGi8XnbE>R^?"=hQ:7+!Zg+a
%I72aVG[%s:^sbD[G`H@&PE=uqM.!%\o"`;G`q_]R:&blLgOBMcr-U6:_nQ-*$s-.-9=$6,I"G!X*W8>b';10/fGG_2k508)NICi)
%^t>n/a4V9uXJcG3=2ktZ?RcBMbQsRZEc6D*m6(1tQ4OhhYd_G,;WJ5*YSVfS=C\L$OC=2]r&@p$_DX]h)8a%=&0>"=L[-#'(8u)6
%`4LRM/>LuCJ"XQ_Yshb2nY&i4&fD!RU+p+FmnS;$8G01,Z.IIlF')$jH:QrVj)Yt%5`7BO^Mpb>_8Kq`^h[)$,c5o"lpfcCU-bPh
%.BsJ67Q]3#5k_CXe%hS<q(+;48Hmu6F__E1)`PWtnGThLc*^B$i4tMJW%Z9W5)E'V^%kF=*_b&[K(W=)\=np;cV93Oj=j%(B+6qq
%Bg3's\:(=TUtC?1$3Vr<o!qSA=S;EW;$4s<W'N_#`T%3m46PR.a;X@&R'u@cL`I[?Bq<aQl-U$XeQ$n,fDt1SLDfL9UPp2(JMlZ'
%6Hc2"-!#aE:hM%^4AO-.YJO+f3<f7/Wb3V]9,*C1Dp<()gc6+^GF?\VSa+Ln_8P<5/F/bq&;\aGASc14o(oEZZP>c5oCY/H2k0")
%"J0Nm_Z3D:"(n)YYN9r5#ppO`l/05'^qljgU_5e6/6e$\i*'TKr*0kg6<M-R?,]LEY@7q^F\V["eVp>>c=0e[k5,"l\jk"^<KYcX
%9^oS:pY1orc2<b0nGkCoX>NQ6BbNi5%RrIP6<a>sX?hk3o:QNN8#"Yg!IPqD96C$.&MR.p/D*N"2?sqI="X%6"168X/MjJ>nuJ&_
%!1QX)#_]Y?M2%=9CpUgVI7sQ2cg#_$;*V_Thct\*!%:f;YiW2B&P[<ifeh)kZ3=/t,M47f!elC6BF=#C36"UF0XZa[;23EA=?XdN
%#/pB>'F)FYmIW\0!Wu!#=,)/hpH@(rO4g'TqFIVu@h)eX[R1"H@'57*Ur`<u%0/+q<V$PO7id%5-B6ZX;LR@4F6kl]8Y)AGiMs_S
%MEt0]R:^FZf0C+)7.^EPD=%:=o(790b)]6.+""[SU.G@;;"_lqFVh>a5raq'!4`AQ1C`QhEWdc@Z68kVg/+1#;N,t]cO_"F%Kf>I
%RbH8+&)9,iNf]d4,>^2D9TWDkOR3Y5+_&*_fcagL:j!=EHf,Q?*'cA[ZV1PAMob[qhZ>J`1Pq"=_24]4m7DKCpq_iD4jJF"`KVUJ
%#d4B&(<a<EFpdCUUF/kA<+6.2*$M[L</_B[+oufU"t>'Zq[mhMLYH<@jYTt%R2(TIi;`q,(feD-\'(OZ33O1`OK_'!DT^^m^/"T%
%Y5Xdi>K4T=Tr%i#X/*94Y7X'?"DgVf8?]a^:9dH(`$5;!/[an-hJc(P\!80eATT=:TQoB^=ZFjXO-ULW280JN(!Hg0&O`-<!YfEn
%9+<kE#j.81jr7`b20*O.^,C+I!FCrffL5(8?WT*,&+R@66%ZBSS^mC0cs6+]JGDcoqB.!8VEalu<Ns>k(mmL]C?/nO]#LrFZ@%se
%+608upt`n2s#dpjpK*+Id&s@cV9!$VK;J*4`FNe8$(20>)>58&;Hgpi3m'@6Ws5]GU-OeI1?X6QC:;A'[C&_!s1>EpL$-Z6N<T!R
%o>2Z%,[1'\&..#0JR#jL84ljs76_Ns^IWM=iI372Bc_lC;F;1J*r'@r%::,UT^O3"f#Q?="_RFYPkaOB,1ekj,utDrP'jd7$D,-J
%ZD3<Pjkt!2n'6qC&orOW(h<6I[E"N\,TY90e]N&HFB#[H#Lu[/[YM$*Sc.AF8(D`b;a:9SRB*)t+-"fJ[0CJj<3:^W*EE"307X\[
%;OSCiM.TYJ%)jgl#q&7MF.BKf#V3q@#FA1sOH=.,?=78SVjXPilO\g',Sq<LlCk;P.1a+fh`f^(>8.j4!d*'[nE%>MTMN8pN9c<\
%6-;Y65&_dBV?*k[E+$u4ADf7W=R)a-15Y?:HCY?XTs$&"(gh4oOHAVbA&F3IKdp\T!Ci/+%L7HiN"r5MEnmRa0i3/t/Ub$cJc1m"
%IB-q<7+YRiYH)4CMmRQiKp;tdo?o_(V0B!eD]sJIaN]Y#8*I?^RurdDJa^<)g4(qP4e'IFG$Xa!jg=t+HcE#.ifVuM^#!SuN*Vc=
%ce/*8BH#W\@Ps.I&R,MR0rV-cC`iKW+i+IoqggII1l!Ol<Z/\2e("T'f7Kqr$"&UfOsPOpg(L0t8h-ti8.^Tg/^g!IrVI7@J!nIG
%C\"BdK&:&.cV'"i'pe#[J7qjlB]?lY`RLY[W?GABAs_2QQ'?@!O9'fnrfGQE8^I`#g32KqFmsBg%o>nmRA0,0pV;CC)&9@Or&rqI
%ErJTSTEfo,M/5M$T2'-125CLHFb;YYkZpHpiZ[Qmng7a1SaL/Rd4b!N,p's=BKXR`9'3c%0rJCnS1KXcT39b1LOao-CQOkCKB(3a
%iH?*S(XD\HL%T.J0D4qdmKY\Lc$1nlJUtt,]Ku&gm]"E`m>B6V6P(n*&C4jo=!eq?'KT+-l$fNtW7_*c8o1dcfX%>;r?2-kB-*j4
%MG%>Pch1<d5?l[pHB_knJEfU05D@=Douo0srVbBr05pX!>PuNcN35;E-u?(QE2h3?Z4)Y32IAlI("cZ[<2\e5BJT%g>Lc<c$mjSq
%'&/X5bXtp"pF\qa6^=QfFC8hu1$g(AV0<9#9LE7NXkr$s:gGOr\bJ?0*cJD+B,>Ee3sXXlA6U@6"bh.PTQ;9u3%kj>'Vd0M''o`'
%aI_1#":\!RaJ[8e[N:["T`0SK+4<N3YFaNn:Msm"d#n7e3<K<Q?j+]8Bg5XH)`eE7*XZ=Cdh-:c6o6t>MM<)(WdcL#lqfOb%PS/]
%=)VTQbRT>)+X,ul@2@?8O5-.P%H?bB;J<"l<C1#pS:]U!4r@^eWI[=d:#^Sk@nKi.GEYEDd7m^[77aRnJcn)U4AaKqoj;0!1L%s.
%+n,A91iI^SJ1!N7!BpMs:AC=<(irm%:*G5&BE5*a)d??gUsS8=H<hEQ"f4:t?EGJ]$;h(&M2*@t]#>AEKd>5U+S2=lb!3lYI+$QW
%BE2))-fcVMafX=0Yc*Bj.^&5=LqP3pA^<jiJ`+Xn3'o/nZ@KrV$p#pb(G>ig\OfTu7YuB&)8iNIQgPgUoOT9_5ju.r!'-[s_S(RB
%[Y8Q!icn='C"@5ZfHKn8QiNLUOO1N)$M<Vl159^W`X\!d/VoT@qJZ_W0@,1dJ($>?B$e<<Z3<eK?%I]]^b-o/mCii::s\(ef1?-'
%(bi"q0$tuM94I_RKVUQi0+IpoMh(<0H,PFT.f1=*#^"j&..Dqd`dX`P2/$!MfV'Lr*^S)2I110%Jon0/0%<:4AP48TGb3T$WAmZ4
%m6-cS;D)^mB=3G8:_E+-KP+&RWXb&]$9!d%7"4`)Z<q@<1Y,5]WM-:1;39H?g+W-@b"e,p;TB8-NM@@TQb<'//o>J8O`DN8PaNG_
%TT5rVjYE't8,,G/U*G\S6qNn[5&VE,YAktaM^G2tk)=r9/j3Vk9CVU&^Y)#/(<7P`Tn4)#;Ec2#S!h]jD2TP>$N)jV!-b0<@t5C%
%!SEVfCfF.C:iD(u5u&M1qSL1<EV<tnpYf]'-(.HeX^?t_n3$p;kKe>PU7rRkoGeJ.OgWiHiYFd+;AHm`EJ;N9@@C\W+b'`Q9Qi^@
%*MP=6ks*-t+G@`[525>FPS1pe`)!Xb;<pR4,hsFH>[q'H1U^*q/q`YC[.h.8JD7LUBs(XA%NX#(&BQ)sBC'o[XA]/_cjTogZ7o'm
%Bs'>c\29gTKPRGq0$-Y5QZL0LcUU+jZ(Ys3T$1[91\i6C'Ce_2W3#-()bi.gCs]YQ/96$8\u%&)FVnfEeX1&MS4!I]cF$6S(@@Zi
%6f)=Q)]uLV$a$M@b9Qluep1/[%WS>`)cmD5AhN&SH;hc=Js4I"*?kK_cPL#$Ap^("Z3^=urlpCO8LTC'4p[DZ0HA.0&-1Y*:9<b3
%\j=824l1Ti<N%u;?IMA67-qu9h6p\mLuGA-7!q9i!UUC(_*-M0@&l9q:nb6];b2dl^fsqh2A&Gi4!YgHkYl**VaC1n@'AcX!O?]r
%K5U#2_A]<e6M6S]<?PD?TSGf*.\pIpIUYOYa:X9\g1Or-RXNqK*5CRjanV8.<=LY9l]i?G)I&bcQ>Ar`5"fXs#OkP91DC)ifsD#_
%NPgiFc+`8KQe?VhgN>"V.dFLh2!t#]o_d@;G['?GP?7dD_S^#31Vc0#1NQ+6gWd%sfO53p8IbrjfF=+ua\g)M8J\U`/I1<q9-G%(
%Rh,j\M.)C^jpH"CiZ8MJ%sR45TN,"i%S81EP(YPaEu8(j(m(>T[.<nO#Xab$&T=9N`V5HgrSUdOSD8a^1CD,-H7!1\#G2uWpA@l:
%f%@t>O>PM3.&cr$qjN0=:oGQ>8-2@ii=\\]9N(3l7Rd_Z,4>U*?di*u9a?(sE>"<ZBRpq!8-MY_Y:bAWFbusCRWJq^B-M[:.0qh<
%5XH8lSk>@*#[K*M[jIOP^]]FH%4hZ<(_qUN"I::CC+)bCD6k]'0%%mjPB?EHhLpm5$QsiEWu#:1Aghjrgj2LopO+l@h^'P\87?6*
%9^9<a1*`!#UUR.gr,AU_N]uDd+;CDaQB+>R.Fc?\F#2"#efZc\.@Un)3DJs4b>IZnKV6PP0L2B0]#NA45E6:E]gku.P<+82Pb+J8
%dfi@*Z$/eJ,hM>=b&B6]@@j&'AGR/mBtdGV.1%u#a`U_U=(CbQbO:u[C0`/9eq8g%D*m6(q"Y]jS#i,8ie)'j<RZNi_]=9/CH[#h
%\GF\,L6.+2IE"geG^t+T1aU%(-;q`=EMJ4j*-2L)8!InoJC*1-7:KD].Mo*NiGbqGWEc1CH-*%U"-,V3QF&8?Ado&FmBq;fmrIi+
%>N4#J\U"9TCQBU`i+<i>e6074oqi;;3%QUZMh8e[ZEpQEPP+u&h%HjJ+tXBk<gM+#3tse48--6-4O):cQa+9f-4/4B'9Z(FnIA"a
%:3k3JYa?"8[Ue\]ZLSUsC\eo&qSE6.U4\FpE&aiN;iO]0=J(3&nL:E`#ZYL"bc+-kRMDB7m&sm2!BPP&A^PkIdCgtI!1NdcmR?i"
%ohH/$hj[FA3)EXd]p_[%"=#*rZoCq8*AZ9!mK8A"J?3nT"aE.<\ZA+S*apJ3+2A`X/P\@9a/8Nt4qRUKj7piG3EUKlps_d`SAOXf
%-@JA_MaELTEL$(:AmNa=6;u><!eYPV4gg)HO<*2/nrid@I)^(fNZ0'>`#3%Sde#B^]E(*3pJP[eAq<hs55$lb<TH2G1f^*<.6%:@
%0O)oO?%!D//o=!@A19]i"](`6e]F5nO.?E269LQV^1:&C]q!jGE!$lZWZWA!cB>5d[mFVr@?BKp@1`a!;ACVX(9>tApt<3$3\)'S
%%8I5a-b3U<)$WBd2/:]fque]"ZprNlr6WL8V+6s!(r4?Q.i_dH&SL`S4.)#LXbuJ8H%p<9FlV-hr@-agIWJ"OS[$,o.T,E;e%I4R
%4(:Km(TM2@7@'jD@BG2:1&`dgeC5)++Jg>:?rgD"P=FCc+\(7*R]EGG\6/Z-EQHC7KS1LNbY#@UUU-loBf2GinVB>`lm:-WR>#,:
%5HA2s+\'Q4JJ%'2bdFHe+NXib`7@":80%t4NoiUZkej3$agTV_"oTBAS8s9FW1&%i7WD3bUMoAh<D)bcML>EOnATnU2n-`g!P)g&
%q*LhCLLo'HVI7MUFa]j\)XAYBJlb5nhT6k'csb7lB:)AkN-M*HjRN<kg83Lc$<^DbZa<%lnS0$T7l>&P8?u=up=>Tc[Z"3o=a/ao
%_D3R3dapl-nV"-/4eI_q&_iQ!JIVeXkW)W%m)c:X2<W#ae;bD>%FFuQAmULS$J/B<K?QPme/mc)+^E^EgXR"=5Mn>@Mr*XGr7K^p
%D9,*SMkU;-T/qHnc6I_4V^(5gnEjSs;)nE(2Q-3P=!7'(-&7U!%`9/*_^UTS_,GE#`o2!=7-r>>n)$/'hc'7<_dX`gFE;o#E>f>Q
%G:Q>l&I@s6L<5R:T(=k/9V$n;`t>5[2G-Z%Jjuq^p?RAW!.1<fLlRKHV+*e-?BqT!SAGqmkR1X)kX6Jp3_)dgKII;)IOLSD!^ee&
%5kds@GV&9hk/j$O"CQc]i8m5*Mg;VX208B'1%P6WDCk#"3_DBT1Jq)VQd/IU5rFL^42jq55u^AZ3[9eb3F+m%R(Oh"+[-ukOG_++
%qN+n1!B:c"+e2nW1tmB9><`f4A_U.OXsf+18[7b!*7uPckTRH-,11]MZK_J*Y/hD5:N0"59No`Z<+ELWA@38.(!$H.pcBd1ba0Os
%X(dGc6sh?18dNQ$e7cBP@.gbR**/0Q0a&J,f3boe"$tD[hrj*cd)KSJ.GJZWY0pk)Q[V+3PsRBBX9J#)jrr3DL_H"dL8s/kkpK0r
%e)>Od3imm33bWZb:6Ymo)_>7?iF!Li"fbC=9c>m!`%e@4'h7Zh^TNPJo4][c]tG9,XL#!(=@-Z&q5*Yl<*H*FkYuiQbB)$.&;N]i
%a^[D7jgu!%(;'&e8\KsUOn3iX+]H5C];@_!4@o^Q>T+gn:+:XaPq5hH6or^^_p!.oeljVHA02"doocG>d>K[ma;<qPcX(,K$W^R3
%]%S@Kaq.@>I?QBFB&e+N2d:`oXQ#"@GRC50S?YWl9?Ke@k^[+"!MleVJCDRZFKubcJI6.<hSU-O<`F$&4=j"nAW?)b22[#_6!TZO
%<$?CG-@UX:0eDZ`LtYOW7YT;UJt7XZo8HiFL&ikNhFk1)Jip&G<6:<<=e?/YRR2X4jl02BJ@>EuZpX6<AQck!5C>rIQm)F6PULA#
%6VaBlaL'D=gL'H_[a5/0?[VdEe7KD+9dQ3Zb!3tAX`LNJjW+^=f'.qePEKs+!5>%gpT1u:Te6QL-I]NQs+<d2KRkH9^5-Sh&1F9j
%Q.(?MXq=U%k=&HV_RPU?e8W8":HAgn[2dA,E#P"[SO/57lE/Pp>7=LaVqr5mZH??H69.oYSFm*p4%kI=aP80ek"dXik97+k6_+TW
%3J<Jn"KcN*`I?"9Sp1Bc.(cE,@m*A+h\fdcl(TBq3dj[ZCA<\@&kZ@cW)0#+)r`iZ8UYn4oW/VSoMibs#\#U&aYrj4eScn4J^N(A
%e@CFNTf]bfA)J5OpHhZ\,gPgP")#-^RXf;\aa+?G,`He]8m;@WSL'9\7BF?[;ETQuD=;gH*524!Ca/(K%h5JSY%!J+C-X9@Pq8:p
%,rhEYX7`7iN)t=<]$;K=IuWaeY`#-KR#fI[Ze>FEI6nZ'QG_\4']V0idURjI@8l17aI\"_aYnuSAi$)tj*(J0RWXIYp;YNXor[h^
%Z<j6,Ag+fNWbHk)42*eCUE6]..HQ;i;i_>]<c)-mkcR4jAhIM8ET#TJKal`6p5/eD2;HHC=8hi*X>>Y1L@R_`_4A<!O?(P!LP8&'
%60Tr:a/rA)@&J'ndg^nZ-V\S;j"+j1`_kaOH46RL==G4WUHQW'jE^ZQSu6lADtZ*-'Zr3#91s:h9A4[kIW"a\[pe8S06nMZQYl`a
%W[h6ESf/^?.X[3nKFR.Ii`Z99#^lHFTC1_t*9u<c;jdlaMM`YNf&0E#2/[_bcp"0)>EWe`k,6doEQ[;3,Mpt316)u6SH4Y,N^!f)
%Q:/$-Ob^'YILP1rQ>*]>Bs2Si$V+./$'C:p&@)G;MhmW2^0MtjD7.;IegNDM@f_<)7%`_TbG5t)X).cf#Q`mUV<G'Jrgu?iZ5,MR
%\>u-K[L9YXS0,sSbc=^c?5,t\PYAe:a,&qbaK!Cd#WT"gSuQHQS@$ZaW#-h4GOEkQm,5'C"]#.ta>X>n@C(V4?EOfR18@SBgB&B2
%&d#8AOK@+hjS>\m#mN$:ON$@<rTeA3?`W,sc;V]^\udJr#')_LVQ=gG)*2HoW=NCj`KnesR-:td#<H4:3&.*6#sHuh(bA8bVQK"f
%#DC[Q*3k):[b05KZ1i`jlVE8%cr0OSp)H^F/,T_t*Q'5'&Ru_]Z7t"<XaUH6&DA\LDqLdq9(0!GE<t5_Sm@V1ZLcnqM'dtblA3Ur
%l>X`mIDGb]!?T5V@XM=HQEH)OX<qE]+$Q9$ePGhriUr^e'HAK3';rG^LDRQJ<8n1N*L77/1#0/(?RmaQU<YqRD!J-UbTfsg_[af8
%PZ0$p0$2h/2jp28<OmsG4GB[a9R1LK'i#=S3eW02K!./1'=tbER;^]V0pG)6rE0iF)[`t"rj:D%EY;iGLB@<m-!VZ&+^8'TlXc_9
%X5GQ?TiXV#jqclBh(_0&\&o3q0Ih3fn*Cb4d@/]nB_Hbd]\aj6A"Rjs*P^j/Ohhr&<1>ctlRoZ@Y5n.[f;$,,?EA/dc9<SW(k!Si
%6Y0FOS;"*YnjoK2H%n=e6&/*g,_62V5uI>n2C6="QnFr#:!jsin!otEqPnYfRVua.\0b!nd97NfS1l75->Ae0dCFOmbH+e\3"#s/
%HQV1F+0dre[c"W-5%DF;f\oEb>ZL!-P\:G[UfsMD!(_(:^2R6Z)RZ3pPPe>^dq=A-]E0m_G$07m<HeKenf_XFfj?/>'"aQ3ipr*R
%#_K@)HZM3AIh37g$=.%s\RV7+ii'C2!YQ6HZ.>rO5";O$l?Ff.$4t%QdcMU$hGe$Q2cT[O:h7<Qk)d=m!Nilu#WH]`<-)V4$!ZVB
%,Xb+KMg&+-'W`6bD#Fs/fh[K$D6)kIL'&f'C7Z-NHQTmTY9.7jYH;[R8D)W]&GMR:U&tX/&2o/]d]q[2+\EBurO2)f\QU1=)s.P0
%`U#9:=TGPH^o_M7^uED^Ka0)ZNBMks'"u"PJ#:t]g+$CfG*DmUe`k%Ykl_%rFh\&P>>[&?@W.*?*%Y$^Y$&F.k+qWX`PWl3*V\pJ
%Z3m"1RLi>Se4cnE@ijfs2C];H?:kUaLON0<0Db/)QZ-iS8W\3eT^Ld.ULec'Tjg0P<\"'f#rH0+$N,\bePRRb(?S7'DqFm\:@?kL
%n+JmceA$4krrkLVIol[n8'g\5%&<F[=qpG_HO`,0^5O-d=Bj1Pn*V6joBKNVK>7HYDVm6JJ!"8!>24ClIadQ2;r31\Hr4,J.0NS"
%8Wn`@Dua->g1Hmu<=kbii4pe'=s+pFjlgXE;^_bo`a^kI:'r*RO>>2>*)f^f->9GtO8[TCl?I>L4=/3Mh'>*ZS-?.d:k]BHM:Ib(
%>U2*+,fH9r%$EK,&CMprX_4qZ3_nqH1S<M(FT+KEnr0N%WY8V/Y*/?e$='Et+\;l>_14s:,<N`g_MV*EQp;7\#``/'&kQakOHJoG
%Gf1o26DYqQlHQ"Ja8+JjcT-^sP_%)S[]k!HMc24HTn]RK+:P2_Qs->bP09hc^+,LiW7ao2MW[=\WO6sDB,)W,#>KL[FBfWi'srnV
%C#TK5PaKn74iQC7BG=r<KW\f6oW(EaI=4)geeFX@Q>hT[L[9i4qpND,P6#XVd:;[$?nl:G0h&7ecK5Ys9NIRtJn)Z&B*B-53rI`K
%(9esbY'mCJ6[?0q1oJJ+=E5),e9:N/WcpGR.LIo<e(g]+G0=Cs1X'mI8ODUB+ikk8$YoR[isa&;bAKZ390A9f9oop-R-IUGbY_Q&
%pI#ii^a,:<2O0e`BTg>s8(9>0NOG5I8ARS8q)gVo[7]7oO[8fL-V@RarU)UQ*b"+[_^M@YZ5J1JYc;*q4rF+k]]mHQ27hs+-O3fW
%J-L,sSM2Y8cNTsXOTbYDLb?R9g(@Vtlh*mUj$PC?c"_=2h>SO+WBacpdX.?8L-kU/UZ,n*ARm?<8;=iATp%04Kb[CW$D,ZToS/.9
%;LJ[>e>bit@7)#Ti[r3.;0*-mU':T,8u1Z,\'Wt?c%AgdZs%(78a\Na"MGrN^i>rHeDb@4mAPd=&Drm^T9tM#-$`.FeJ:XUbXY^$
%C4.)e1k<^cbn">ZMr''I:>.iu2(+:G;aT,ijR=?=U]SttS4:(Me>]/kWM@bkq\iTsRB!R3^.,&SSX[S&(tHoI&EUfq>9#U%9Zuh`
%2_EFis3?NKqOt>Z'ud>b3n-sm2t-)mE[T@Y5kIdUd1IT=6NKYJ2C,FkP>F4HCM[4:19U/fa]2hYq^F!7G])P8gMB2S;p6Sf:rfF=
%LJ\'0"Qj$""Y#Sd$oOo)G0gVbH$\RH,tg\;7mZ'O_D;Km-p4*8=Z?ZOh3k4?hRj-Opc]<]9%J5eRruY=3eenMr&0eE/-;NmBa5\1
%3Y_2kGNk2b)b*X:@(!^pYfrHN?=WJ;n%3a.R\_Q,dJP&%0j'=qm1]HmCZJsfZ;j\B[5*W\<AA@+ed/GfSRb^)h<+]KlM@07/'mi3
%'G8HJ)U.NXCc$J<ls'JF^&@u3H[@<Uj]'1mgJ)oEMB@0*+%r4h/j!;?F#Z^oKrrdH*.K9dq\IhCX\D>AdPJ=sIkqt#7N5/dIBVQ+
%qj-u+q$\&6#@aAg4kr^^.4fS-\qUcPOpm%&pYLGE:*<HZ`I/gT#\4Vjf\=JP!nL8R(k`F>hkDk24D"sF?,co%R<a\P&jJeM\U_10
%,m+lUU5Y^rrp)\!4AX`@Kad$1[1l=g+_hlj42d%E8Ni:T+OGDh#NHY'?ijR8P4W2.or;@kWWgn#G+Co\M`+&o"44X]=ttok$''K"
%qtT.mL6`A*@NAZ=[ok]?NMp;Sp*3%E%AuDo8d:*))7iS*F!oPHkb"@'Q*^>doV.Ch(3$"drWZU]RuLoM?YB@N.L&bW#AUT?Y<LC$
%9]P)W'1[6BO2A.%9q7o,!,ZJlf;XQk$cPt<:b$VtU]4rl#Aum@fjQjF->tTV8m%Wi_""@*-f#5nBo-].\cd5#T1tV/$3rWd%rc!Y
%8AMQXea_ZEOO37;nLYB`M,7Mt<52MP_GZ(TPJi0lCd\h"oG$S2.fiO<G154M2S]c[JT8SHbL+(biA1NUZ&n\l^/)Z8>8.%uQ[q1&
%bVP+K^-5"e3p3cB!!b)4+%W^g#RUq?iOFElO3NEU9XjMDN.m9j.31AfO0J_kmniSQPbro6YG^&:nU"mTACN%P4pk(1<LfrI"gTgT
%W[U54%)IqbO'2%@25h;--=3#>k>A+$=1LDCYF11C$;>Aj"r3TMd*ZLS0An^6#uoG\#bn'BGH59`W!?LtlQO%D^`6T418>J0J)Aqr
%'O7!8S(jQ!^F8d(W^fV!dgSF9U`2luo.H^<8fVuiD<So-JEN@A7-Rh(FNn77HA?XI-N!2ZKs;re9,VK7r/-,7ML,qniF&?m"YQ$O
%1V%0&"H)I6J%oC$$*F+?1jsJ-J?<'q>#J=g_T^aR*)gCk*:G0.`Tp]";-\hukk1])s%$A(*_j8',]8"GHtkXI&L$s!nk0^D/Gd(u
%1b2R7$ji=Ti#K%d(R"YpLBLP8<X7pIFW%Fb:JN)1;_TjsELj#cp"o=@Z6%;3/OF\#*3>XV*WEX`=:!i2Y4d)Ipeo-!7FkMnh\SBB
%8@Qc;@r1bc+/;75I)Ph?6@B8ZoB0]T]h[Jra3rdFP8UI:8]hc$kogsZ86+eAr_pc53<5H1Bm<1Q!Y?:^d,nKY*m,=mJXL$)8IQ;i
%;^q&_PU;O/jE<\OA\sg-*C00P2<UjuJn]R;ekW!f@3QbV`9frLo<2d?@Yf5llA,HV^D'lB8bs\X,PAX=_BsnP4bULL.+q]UE\77]
%VWD?M?C,fhq>Bm*@OX+E7Q<^AAMSA!@jo[!%>Zu+S-]\:_DK]0#_9%V_,h4uj-i/2O7n!jh`b<Y]8A[GfhPnrMpWD&JEap'nujHi
%6YM?=O3Qp`RqlC)T/G?YRgp.?4Ke"k1ljerhb"e*()68#.Sj:!T+jI_2\oE?0o"V#jP-PRWc1ti<PTK9qD*d,hisO*E2_CLj7$"d
%m^`i!jc&E+T=U>#]4m8!c/1.UiAK'E-G0iRpD,XaATU>L--^b8XAeLTkj?0%`=`rMj$@X7Re[R1AZmdUPX13-[B&LD!\f'lB20P>
%P)&r-=K:RPaTARe)BA@BB\YRhN&T`&@[9llKsMu0(nIXuiqno7Clq"LTG>%(Q)9eA_Xgm-g3t84lg]E"rD(g5D1;!^9pKA#pI$d'
%BBf74Aoci_XA<G,!r$J-&[H=S(/Vn-WR_4#]g`ie[KQL6abS0O#'/&WZ@q/;/n;FjTn@H%UG\a\_=M9O"Red&,Y0nB;u`VK0FX*k
%#"mcr&?(i/)nq<2]!"XlTFI#g'h!41:2.jp0-oSpO[?"cU!&grrX-;.PSm?82^_q1E^@>MV+"_l[L%g]5*>3Q_!HE\+Ilq&=^ScN
%.@q2-cQKgC]LITT*P'%B#uIYtaWYqG%Ll&OMGehUR>'d5q;N6Gc4?J1Lcl>V!qKR0OU4ODId>T#E[$DU^DD_fXC6LR>qPX$:ud\r
%ULh`_T`=PM.#KB4#;MN2&dsqLM!Hf53G:8oUXql:;SB>M&J"?)B_eKqM+?FRJM4=]\C*:3]Y<\:JJOU#p<\=a]Y,7>fR1QIWa"ek
%YC&lC!-&s:PuLps`o7U^/e2ZN,cf8CK<NBd`<l.9CQ=3.L')A=,F0^a\n4%C""WT"Y!k'3@<gIu8eP6FqpIgrOmo`_rW!d*db_B"
%+i2QG>KIH)7U6BC)1/f#XA-O:GAQGjn$'McD*)PZK,:XqLaXQrqY&0kG\0UfHb0$(Cp)s(Dc!oA38qJe!0A3u:mVC&q_8_,WVbjW
%@7pc2CQ/%1ap$76+_PNqZ,"lSNt7`%$]Lo2/<R&SAr&n^c&<O;2_f<GAHuF945WO&?g,,fhTH&$V7o&[PsJ5g+$XSsQXH@]3Go3B
%]0C1bVf0?F%j`e"q6F;s?[We8JT$moH,*Cbd%ZH%abj+*Zl2RE^"RF,"a?!_LlY#>+VA8lC'TO;9Sk'/k.+U@+[Iqg<rA07U_QK=
%KuC8A&$2C*L^a?#E?:C\G\8`jL'3M^-*bf'4mX+DE/(V>(ek^o/L#5.g""kR'++:T&&bZo8sZYkq.TAXTGOTIZ`m+2h[iGc,NRV1
%%M=Y2-Ydti9(,[3m*4Kq+LuSue<AZWN7=LY'@:1kJg\38,E/7\N#X)Ejr@%1l#DNO9u[a5eUN$FN-S?\R*X1SbH`X?nFIQuA;k=o
%lcpkNSS04B0/&;AZ>l_S@l><35=i*2Zp41D:ptQm*TfKYb>,sAYHK4coGS+0ccL.,CWKm.Y`3*$.ng=_X./nkI'=E%V_pu&M0$oc
%82LT+XiVXMM1f);CI0QjgTlCL6Z2@@Fn&G!gDXUc@UGua?O"STbq7]$?]-!"Tj-g9(pLm8dqJdBofTYVXDQPT1U!@*^a`0`DB"n'
%ZUaQ"Y'Ma)@bCMtXqP9V^"5nEcuCLCC5*p`A>p?[9\q%rs8KOa(jZc-c1'%WSH'e1:Iu#M;HPS-/?+H;b[$pC:g%ihK)TI_l)\3Y
%@oN<MHo9[;n9fugIS]38O,^4PW1:FSX'b"Y<t;Q?+k/P%>.U!=H4F.;$^TEQ>gRIAVaoMLO^'r1-rDQ`Z!Eobi3H"$m0kj$Zf4mK
%L':\$-BbIRak>TQ:+<WcYY_S93o@8(7a\0>1*tLaV_Cql,Dt&l*oL\3"3`<JqF^b</nMpqR'1=1[(^DYgPG1C]gCn:ToIXbMK;d\
%UotZT`Cj3NFMrFL@\&b#p-[@EIm!>H8;aeNM<YD#)=k"L'K8@S&494r"oT-p7Ou.(*)0Kt%V7e">n>Pg5#;1HcA$^2;s[j:/!;N.
%Mk^VuqqJ$sG=^&1?4UaZ+X^2aLSIo`1&lJ(WVQ_+Q=+>b%WU,H<f3%n(f<"u;'@uW*LI`?&a<^BYlQUBCG<gT.:6=Nnt1\sPXoru
%[kk?0P)Ca]JCVb0P3&gr4Vp,/7hZAJ-8q0GpL]\OmMFjcjI9C=LNG:3Ne_ubgknEE#3tu0n=gTD=HE+eO$0*@VoYq4YD$%+NarXC
%_aI'q^2j`i%?W"$)W^$=;GTd$A!,PT!c^pPoSMbO,2S5@`Ph#PE4O4)d0kNh?mt*@T,+#%!oL\;'ot`8blio2-<N&ChjQsUa(.G;
%(q:1+o,rZHBgqO%+;#uK<Fu?m6_iQGl9W]L<F&Z9.5u't)u>qA#\<dCSG]U_.&)I@]du3<8pRRP<r&"Z:F0aKL6XOd*^VI(W.T+T
%<iYMB/WqlV$^%eGW:$':L+&s#,RWnmKK(3gEku!U_H_oBF(CK-_tnmSOB!/U%Ps_s0>U`/(ltg-MW!\b6MMKl#d9LR2N3Di81+E0
%m(l&QWgRKKV(R,Hf*V*eda=OR!VVDRdrV!5THKuhjdCKu'UCN*c;d-PXisZ.K-CI7`#^S5Ffl1JhL]F4mC0ZNLk$GA.-Bm$GH,Ah
%e*6*6!p^H[pVFg8m$8e,X"+g@.WU>e:aCe3g1__1Bd(n:6P2)6&?./j,*kmnhJ?T9bRA+#<m+BWj?G#h#e$1`D_b4f9i_"Goc.p?
%*ePmplWq7RjdHd%5#kOGRd7C2AbRs(3<=(A@[7q$KI(&nM!m;;mFj1GR5%.lhA#s?nn[UWaU/u(g(:Y!9lZq]JiCOij3@o?Vr5&5
%Vk?*jW`aHjH7DAgj\fmr>Tt6rNGY';L"3Cj&95Q"Z.$8hX17LC&Li8,s)bmtTjs[>)_<.Y!YAA;^>(UZ3`I!0^NLUE'tCX%^4_ea
%FnBMQcU^u@4+48m>P___EVlOj?sg6?@d+\^PHc&c,m7'gcTSY#!=C:+<aBGLGY[<G?+LPK:b;OVWCT/EjD6AQ8s\Y'G)]/i/?!]j
%k.!@\QWQ<H@9k3h9+_D`R_I_t+*%SS7foXIe@*'9%c[K^gBmIdAo+`KrE)fUJ74n>S<5e298]LZZ4%nOi=42.`5'FX,<ZsqBh8l^
%25>0m@1]M,dG\ZJ>TI`oUtX$fA!+Yp3*@Dh=b$6,(=L/]L"6o@!u,%L:XuQY<Zde&U*/aNAIuP679O-jM=b(O';P$*G>U^p"E#fI
%gq\<qTZAQo-4bOo<#6Y-Q\sl!`RG4p9-i^G<Wqe901;N!B4;N@4T^V*$k/Q+k:KOV?GK6LV-N&k.8s`>2QLAkLke/7>1_U2h'j7Y
%J7?e_gaeOZllADhlCG=IVeRWb3$7VW/PDfemsoFl2o_@$2NO=/S0DqE\PLkJSses8UsFQ'bLFF(gKhoqBFdGF:fX`V"`!1=82_'6
%&0=cQVmd#B.!Kkue:`R10_BPO=EorbZqm[@0$k!-;iq&ker)\jeUFJt7+Ur-_JUtO4p.r.ZoLcf.H5,,C&TREo3G7:jQP<3WNg7;
%UX5`O8f6lBSdqX3*DG!Y_fk!aSO/:h-&*R`8>[kJ;@=1`^'p>:&hE#Z_l2#Hk#"7`Pc53ki^DD0qLi65*f#)XRZSf8':K8:M1h]*
%9=XP&.3,SfL<3XK)DlD18iE/,oh8ed4A=RA+c^u,fSi>J6u=A@MT`db+uj]"bC1,Y=_Q$0W+7MdQp^'EKO$DF/lL>L4mXB&6[G/o
%kSl(QU9aha>\0^CIJj_0jI8lZU4kZCJ!R&/:1QL:3G!ANCVC!kca>d58>!=2"@Lqaj0mM-^*W/NZB@&Lm2NP.R)+3+o4qlPLFPPa
%E:QD!$DXp#XB;gIM,4M22Komhr#skq9i9H;pNDP9Z(R[mWin&*[hNBG*Ht6#G=G\&.MmFE("J/I9uRNp_2N%W:E$k``H"oM#`FRH
%?l]NBRo_L,O,`2]G$uZCY2`*JGsB:sSEm\[#FeEqT*+Wb#-7MQDPnia2.Jj]kmsCMM,D6Xa:pl*Qj;G[@aA%(\$I(qG16PZ"n5tN
%r;IPm?Q`HAkCFMQbl4fc3X][CNoZ?i`)RqL&]=qdV5*o;Jgl!(W%':'a*_%k'WRP?7Xf1p#-p&\\ArWVM`)*W%S*p"PpBcnS<B)m
%%V#=s=:RM^QJCjqnY=DpjR!CR*[TD$bG-&8RYRn;7h*rSU?#G@M6rNB\NH=(Vm_(\I=%25VMTN=>j'aq8^@((=9h8nK:1;V-?rN;
%Pr`6;SfW)9$F,^Ak@%3XZL:FmgI!#L1M[\Q\/J3E:'_lM,C=%TC[5gd<,"nF@L#cQ\NN[Zdu*qV+iKuj0'qXQ,qI\GE:fVnKSrct
%Pj@cFTJ:mab!i`c@#kgADo2Xu%#f>\C+YQBKR=j8$Q3\!qDi.%WT+`pB`]3iS$lC*N75/HhBc`IX>jsq_]<5AdT41l@puEEOZ>Oo
%AiR[:Z595@k*QX"?'k`KXIm?U9/Qkk.L*_RmKp;n#E]FV@%:uU:+%PnP--+R%].&X)gDiY2%s56"m^J4*]T]JRQ!QdG<?[qa)rQZ
%7)[;b_S^I>LN`HVH/eGP'\lWSFQeR'*eAXfSI^<C@FlgBpUs2h-"RG3Ge:YJBNDsE@3"_[1WnVl0.Au;j9T=]5RYU0F"),]=Wkt5
%.37l4h]28A-jr?;0d#5rO\>=tHb1'AIN\bqfch1\5kM9(8'I4-i>t&i.EeaST!5UYX!L42lY4HhPnX;]2LcTUmHlgZ)3/p%G>8/+
%9#AX4=uX[6@)V15c9YE,+MNjrQotF/]:i@V^"s`f!@NI9U^.q:nciu5me_lcR%Uj8F20^Rh?F0(K*NcW;:KM$N0_b\#YMpTOSpf,
%4/jc7lD/AFWq2Z]APK!iQ`0%KACM3%;Ud>OPR5M\b-#1b\8"IVaJ#(o'\d@NZ#62t7H&*KZb,eNqW2Y$=WWLugn]d0D9[;;A`!F0
%<Di]R7F^*I`sWKl7..V*L3WO>I!m@dC.E$J$Nl3>AbX:(@=2(69<R&^h[b)@1NXU@[i$SLc$=V@!GPa=<E(UJKn+p2f6h&PEqK\P
%!O6+q5286'Dn7`,nj][,*#?kI,=L<+VbcgL_MZ&g^@@n)^NQc'I1jun>O6"eNOeZcZrZCX:Sf2I.:/h]m5Pf3M:t$>>B*]^qeSlM
%Hgu3$GI;6'c=$Ue>N4R6Cda6,(0l#B@?Q\-XMb.b+dOHkUV@gOgGI;-*4P72Gk3cVEMTJlN7FV44RN&!@1aJ&IJCH.r(m%'pY+PT
%M2Gs45_\Am7fgU(9j^@Km?53<_\2Eb8/!LL0+NZlDk]TQP]&<A/L<MM.:IW1($&NO7^`A/"W=D3IV.p:M9lD1<a?&*7&?49"^Mog
%7\A>;\:1Sfj=U25O?.(je'm'5:HNgT5*<id5"T6D3cTi95%q-0^;kG%=sI#MM>-Bah4JnT0'AF2qcE;8%/I"[S&]j3rYEO3a-#K@
%DXVlJ<'B:h>&t,:@\l^l4WBK+)0MnX`:8nP5f#sV_*61W^LgD5$fcD=G)t>LEu9Te3#;>F[nk'7Qg$q2A?6)0RC2@"aGmR1Mc`n%
%f=i"3G(WUBpLRsa4sN^H>LA-bba2nDHGjZeoZanmki7=jF5M`_b_@FK0'iTZ^4'sY+KaN[*D@S-\G^9cG]^lg^.S,oYXr=]^cXaB
%9iJ_8q(8RDf0F2BmZQEbq(D>h5]3mo4)CP5D:<??Z#)N7+1;&NLosP(6Z/VU`K9fO<F))Sq*@ll`\%:(Qhn/B?J9"4gN4_)T"!O4
%mn6H'fN>?O:%p]/^Wr\Y-sY(f<:B,PK7Oj.fb2;^.d&.sJn!?d=&B:c^5Ia#E,E7C1oWj``d<fDlr%@>@mZ@,/VK%H`r_8IR$K''
%%ag%OPI&9^k6jeac`UWE@7eL,D-NUJOh0BP_DB8F5EfE5`g_&Z"b87!gICmZXS9to1!ak)1MQXO0&<+BPHsN[DH+0f@[KMOE^K,/
%.$kuL?ePVWPEVNRd;s4jKWGZ7n$bKe:1fL_o9]=ZNF4kR[2?ZW">4^g#[eu+L;R)>RE*%d@m\>?lk^/_oo8q5pnjd;p2f+T*Q;At
%X23mV*?%0*?ipOZF>J8teEb63QQbI:3^bb_K\Ehl\ghggbZif!$FS_BAMr&&:k]HCUE1M0f9o<>an=q_/sY-XQKU\CF,4N+\o8KA
%S\RRQV$BR-Fp;,P:/NcE.KoHR[]oM<eDJ:HM`@\F'L!DQD%kmqlSsKgE=FYF*jiWX)Ic<mHU3h4;aHi;`OO.[U)7?3]>(?rBF*9Y
%dsKb3/?d"E%86"$UjF0,\d]uGoQn,TGXPm"qRJu<Jp]0q05pi%07m^,s6`e"pP[NCk]$Mb$nnCN^#%G'5Hdg/Nph<#ED#>BDgU\Y
%5Lb-6@u^%_@LHJ)D$MZO^/lAm#h\"1b--'miE]El\+Tu1HQq(u2@s,?K=YD+!k`WFql`^o3F<;>8=3sXpK)oFKSAI]<-g-L?+NL7
%DX<]2Y33XX&$3g,#/>TDVP5`Hm_2E7:aFAF%+uk]epBubhaH(,N'K1W<WDLMpdFWF5c!.kc.GG]aOb:iM]r).$W3o9SsFjY4.EbK
%2G1Tj+Nm+/Do-@IGG2c)M\BtMKpP+'Fg`2%*^QnAVBK[p9<a&'r;]5.;2'_'K>gg-p6RpaM0AK!PA[660jJaFPn*=_Kf+YN:-ne1
%P7R2bZi]#k;\2R&hi(+%;9.==m7O)@[NTupqm2\_'X/t6E61":/S&W6#Qki9XW4C.ESbmWE^Ch>/FK?QGNnh&S!7M.McEF'c,(CO
%1GT?M29H3EZ-=h1')#oPi`4$:'5iCZV0-TZji\jdO&b;k_M"rt[<id;g[&bm+TTuEj`Ojbg0>L7lfSiCY3F%PHl^#[D\<!BY"N.$
%dsqDVK`L<p?X2(\raMt0"mo/Xs7BC:I29YBLQpmtV><G1X;ot_BQApAkp6KCp;7=9dp6.q^9KmJl706OZ0:6Ik*GQSl!2L3Fu1c#
%#Tr=TS&fO.P)bY#c2VmPY"u\OZ3K<"*'\lr7\(Guiba3$8cS2Yn8@*Yr'"(>aM>.snV=^$%XdImBeY`PS0Fc-_L?<t5M`/D5C..k
%r>C-46eUDj/s:V;hHD]4)Y)EPh/<HtMb)%OpG\4A`'LYiqPF46QhoaN8&P\GN8IF%9p5>^In2rU$DnIne2c\dqPV)K"hFb(Q82eo
%W`mdK?qX`;lo&jZD*m;]Er;A;N$3](Ii]ILj9rHkYit-HcBe%q:j^aim</U`gXr-<8b=@Tjb;(Mr27/KIG=FN2#o;ipG8]\Sm'EK
%j9<A1Z/^Y[9Nc"orlNHSo-BVG&Qqo7]n:Y#BMY@#e2Om1ft?QVgnb=Rb54O9U"o!QA'r?qbq8mXUdO2]fBkF^1=nm:&`:Ss#U/l1
%s63\O:V7aS#3'26J*JY7\-,<>m67Z:7'l/PpM#mo^q,8^-DJ',^A0C=C#,W;[,.W!nbjW&Qi1d(C#.\ERT;tM/6I+k?@/L&1NlX>
%l7Tb^oe,nRY%OhEGT"Jm3iVI$46MgmXe\rWT2[IIjr>u\c%@&lJIaF4[#$^&]1F[C]*YSX[mu,NgtlU@^Y=*Rl5.-Tl$bQRd*Us%
%`$Mt$mj?hsmj;=I\"9gYi+3&+DaJ%4rjZu7nZMA.%e2$T-JW@V;M8:)4#\lXj^:g$'#E!N*V_65O3*:3`9jMCY:=FNLGT^oWTt_a
%`hF!9n#;RHMATn@D.EM!-AputN[1ELa7l'FIE_DHpuL&3q74L@2pVnjk"r#O:&,TVNj18Ag$O!Q"4^s@,X#`GO?tOSlR:p6FOA?0
%.idmWQdlg*c68ECIBs!F%6>f&P$mbAlWuG]!bm63T6uIYAP!`t5!YfV6,Z)tRl*q%9rj/<W?p\)8AjBhM*S"sF,m2m'9sZfp:[Ce
%WCTq+FMioR@Z\+1T@50*f(n3l>"^!<U-\n`f#',<kY1LIJ[W@@7?ZGrR++KdLP.P6&1%tbn=,:r)DZS$VLO_FZ:Z1:$5@&Km$/L*
%MTH&/-T,8__#$q#Y$?a[=ual\)4NksJZLX/(5qJ\ql5l+>_'Da]Ln$5cAFoQBOTl^;8O=lU.dh_`]8]H5e8d*?E=T@FYJm[rX[K>
%&B')h/O7Hd2mK&Q0?sK#2T2.o.4GlAZfa\oCt8jN\N01S6sT*hX@/"5'LF&!P#h-ra>:j5Yq6e]#N^bYeCe3ll?[<BiCGC!5K[5P
%,r(7%#T6J-S58h!WABD[]Yj+lo+4\G+2TX6G0Z@Qc.6t1cS`IY#)'7R>L-h#0u/@ck/!h(:9=RjP3n+C77Z%VE)4pJ9),@n';_0E
%lJ^lE!"X4f[6+/5@!0"0BF&7CHg4F-&F5cB5&0A3/<$u(ZctQep`.#.3@Ro<[B'Jn:_s[2<RnkBZcd7C'g&RbiMo!a&[E-X079k%
%Jaopa?DV5p%)p)se/+Ai<[Psg3!_8q0qWGLZPpc.Q8j#C;j_Hh?pLgK4b<d%gEuXQTidnP*:g#+gIUTi67dq]MthKBb!+57id7FK
%+GL4/GiWSgHGd2Z1JT%_PmR-jeNZnV+4GeE8?jl%K?*Q@'ZJmuh7$0]_G=I)D"hqo./OP1DT%]\D5e.*Ni5K2>Rjq<?]Jo_+-1;6
%h.r)3f9=Fa@%4-$RhY.CS^6L);MBLf!a$ej7LDj\MWkYjN/o$kL'U+^&K92GMBAo8TtHDt^d\?ABD:\c<b<j\4I3W$C4)MBA2ZZ_
%KXHh:;`&2bC.Y6MNB,L0C46E%Z0QO0lIo`BZNQeHXYk9'=-(b/N5GDK[^X:4.`p_H-&A]UPm616cjdfflrgGC=XE#tDMgf<GRMB/
%M)&k,B-Mk.e:@i>gZp?aWGAe;gQt`ee#j^\+hd,BU@)hocS;!7kL#c1mo^f<nf`cm?t@b_Vm%]q'i9aQ$l`EVX@Lr@34P?G;a-$1
%b&M>8J-mkaRZG+j0)Mb3:-`hT)1'=!GrX4r-)3aC=YXu0OIrm/6W;DNlI\N=E'-Qi`qKQu%c,@cir*70$?;r7S&h16+b\*`@G<C[
%!7<D;[sKbW6!<rSS$1//gV%!s37@32$r/e.jcON5!'EJGY>l(KgS[^'pT;Z3g\cf_dXqe;QrBD8"Y>Mq5sbhfOAR4'J.Ul7E0i.=
%.M/q)P+m".f)$aMU?hJNJ5lS?j7U?P^_9/0+"C\*ht=j!@)\`%U"J"791'%V0KQqk.d+V[RRI#DE86N^8eN<os1Sk<]9u'N_:u4@
%@.OPK"DW\<YV./=F-#aK#RTF;$>Y)g\g7(IBg629JY+7T06A'T4pb$n[^O'59^5E(:e>35_`%T95tK!W#TjPopk$6>R;mVU=a?F_
%^$t6SfjcadA4H9sAODj2kat>g*eg8VA=qO$X?r6+I]CF4=\nDMFgcM\f)f0Ta6R'I0_,2J&.[O@KhjI\kbpPE<M52'*u56XgO*I0
%K\<ZW9h7H%WTFoP0'ai?TO^UQARipbY,*GgW^,\CTBc-&OJR\Hh!Tcb,]jkL6C9$E;i/mu=5,P;i4BahM$[WdhERLCmk#IUYm#b>
%/hh2Df0kP(f@3Og^<'cQRH5^#,boc?dmil*O5H7s/h-4JGPOq@^!"aFi#iG4kOfu8/CZ`IZM.)%Ig?:VIkH'cR,="]#28P:R;BM0
%-Os05G5+7'k?[eqa_h2Z4rM/fO8JO$^CQ:\jYPRC0j*K?/5LmUm]uR]FrQhBaT0&(gn,\dD.)@/5*Pp`K8&Aa]an.:GM2j?gBV>=
%gaBDR#5ZfbhZq0insSjr(bEHFp8>_fn$;[^FrQh>aT0&(gn,\dI:2t*T?2PA_4$,;^5Z0C'#*hOgXrl/`piZurquQ[@hZ';WUO7M
%@R&ES!F0u8"sP$/7VriDp&I)oWa<p5TI7JS^!;D8R2H5Y'G.8n0-&?#Hq:09(i*C]\1QE?Lk,QqQBKrhTR7SfA1"RCVeHlK[tGd2
%-I]@W)M/_)'Oh^rOW[qWLGAuUobAd,./8KaGZ`McO-BdB*Q.nq\l%:O.#<U4o.J'U37QJh1cBM64E,$WO3Q_h-#;9bnrZVkTV*VN
%JpPN>iI,!d3$=Um+[HC+Or8@L=A*lr$I^>d,]AkGJ]eVUk]OKGr$?HXO:/4uNY-sj4uQS["Or'h5q#g-D/7AZ(/,[,JFej*5q0b-
%!E8U`fog[=*2./)1p$uMdO^#+A/VlcoHTIQ!iQG<RrUc=cVk@#f_a3WiTR',.b/SBS*,$$NfPKF(YN5sCA]h0T@oE-*C.I#(9.n.
%i;cXtL)0jTQGd9^K!Bd:/=Yo.P,DH#f.<[3T"aC!$tt%"kY,87]J)KW.qJlE.&:WGN3q*FgsbJ5FehXf$ORIYNTNt2&NKXX\q"eP
%)neP76SY5bZ/kUNRio-Z=ddi@fXtpjY1F!XhLbAAlO..'V;k/E'+!TBdf)mae+E7<,N0;QrD/t4S$HD)oVq>H3&>mmoA)n'HkO0^
%_L6s;0DnN=l(EMi'DhdK.t&oF2+DG_-0@C+rCQdu$Z?-s4r_X?^@7b`M1'p6Ps,r^&u,XN:cQ>:JI:I0:B&@b+4=1gEA0+];d^4C
%6nq)=%Tj)Ap7^RNKL*Do2C(kLPW!O=*A%qS%Ws?1E"E6X1bBS^!LfEP,Q!?C;q-bNU8V0*]fu6u-b*lds&83KOKG8r_oXipVi5TY
%I'IGMpct:`2`$(,*9nUa'1VC5,f:"a$qu!=UPW];\-(KeJV/3I'Q%9oP-X-+Rj,8_F&1g86iZkH$'N(':Ck9kqHrOfnXojT^V0[+
%s8D!8J,T3Tr:U*`LVNZFs8MbBpqQh#a1qYTs6quIn;%&6a"Mr;gV<^!J,I2Krpd`frn!LOq>3DU_a".VhuE5i5Q%.'p]!L1S(8$u
%rR_)FJ,Q#>l9G2r[#e;U~>
%AI9_PrivateDataEnd
